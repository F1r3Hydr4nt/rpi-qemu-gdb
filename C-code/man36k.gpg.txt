GPG(1)                     GNU Privacy Guard 2.2                     GPG(1)

NAME
       gpg - OpenPGP encryption and signing tool

SYNOPSIS
       gpg [--homedir dir] [--options file] [options] command [args]

DESCRIPTION
       gpg  is  the  OpenPGP part of the GNU Privacy Guard (GnuPG). It is a
       tool to provide digital encryption and signing  services  using  the
       OpenPGP  standard.  gpg features complete key management and all the
       bells and whistles you would expect from a full OpenPGP  implementa‐
       tion.

       There  are  two  main  versions  of  GnuPG: GnuPG 1.x and GnuPG 2.x.
       GnuPG 2.x supports modern encryption algorithms and thus  should  be
       preferred  over  GnuPG  1.x.  You only need to use GnuPG 1.x if your
       platform doesn't support GnuPG 2.x, or you  need  support  for  some
       features  that  GnuPG 2.x has deprecated, e.g., decrypting data cre‐
       ated with PGP-2 keys.

       If you are looking for version 1 of GnuPG, you may find that version
       installed under the name gpg1.

RETURN VALUE
       The program returns 0 if everything was fine, 1 if at least a signa‐
       ture was bad, and other error codes for fatal errors.

WARNINGS
       Use a *good* password for your user account and a *good*  passphrase
       to  protect  your secret key. This passphrase is the weakest part of
       the whole system. Programs to do dictionary attacks on  your  secret
       keyring  are  very  easy  to  write  and  so you should protect your
       "~/.gnupg/" directory very well.

       Keep in mind that, if this program is used over a network  (telnet),
       it is *very* easy to spy out your passphrase!

       If  you  are going to verify detached signatures, make sure that the
       program knows about it; either give both filenames  on  the  command
       line or use ‘-’ to specify STDIN.

       For scripted or other unattended use of gpg make sure to use the ma‐
       chine-parseable interface and not the default interface which is in‐
       tended  for  direct  use by humans.  The machine-parseable interface
       provides a stable and well documented API independent of the  locale
       or  future changes of gpg.  To enable this interface use the options
       --with-colons and --status-fd.  For certain  operations  the  option
       --command-fd  may  come  handy  too.  See this man page and the file
       ‘DETAILS’ for the specification of the  interface.   Note  that  the
       GnuPG  ``info'' pages as well as the PDF version of the GnuPG manual
       features a chapter on unattended use of GnuPG.   As  an  alternative
       the  library GPGME can be used as a high-level abstraction on top of
       that interface.

INTEROPERABILITY
       GnuPG tries to be a very  flexible  implementation  of  the  OpenPGP
       standard. In particular, GnuPG implements many of the optional parts
       of the standard, such as the SHA-512 hash, and the  ZLIB  and  BZIP2
       compression  algorithms.  It  is  important to be aware that not all
       OpenPGP programs implement these optional  algorithms  and  that  by
       forcing  their  use via the --cipher-algo, --digest-algo, --cert-di‐
       gest-algo, or --compress-algo options in GnuPG, it  is  possible  to
       create  a  perfectly  valid  OpenPGP message, but one that cannot be
       read by the intended recipient.

       There are dozens of variations of OpenPGP  programs  available,  and
       each  supports  a  slightly different subset of these optional algo‐
       rithms.  For example, until recently, no (unhacked) version  of  PGP
       supported  the  BLOWFISH  cipher algorithm. A message using BLOWFISH
       simply could not be read by a PGP user. By default, GnuPG  uses  the
       standard  OpenPGP  preferences  system that will always do the right
       thing and create messages that are usable by all recipients, regard‐
       less  of which OpenPGP program they use. Only override this safe de‐
       fault if you really know what you are doing.

       If you absolutely must override the safe default, or if the  prefer‐
       ences on a given key are invalid for some reason, you are far better
       off using the --pgp6, --pgp7, or --pgp8 options. These  options  are
       safe  as they do not force any particular algorithms in violation of
       OpenPGP, but rather reduce the available algorithms to a  "PGP-safe"
       list.

COMMANDS
       Commands are not distinguished from options except for the fact that
       only one command is allowed.  Generally speaking, irrelevant options
       are silently ignored, and may not be checked for correctness.

       gpg  may be run with no commands. In this case it will print a warn‐
       ing perform a reasonable action depending on the type of file it  is
       given  as  input  (an encrypted message is decrypted, a signature is
       verified, a file containing keys is listed, etc.).

       If you run into any problems, please add the option --verbose to the
       invocation to see more diagnostics.

   Commands not specific to the function

       --version
              Print  the  program  version and licensing information.  Note
              that you cannot abbreviate this command.

       --help
       -h     Print a usage message summarizing the  most  useful  command-
              line  options.   Note  that you cannot arbitrarily abbreviate
              this command (though you can use its short form -h).

       --warranty
              Print warranty information.

       --dump-options
              Print a list of all available  options  and  commands.   Note
              that you cannot abbreviate this command.

   Commands to select the type of operation

       --sign
       -s     Sign  a  message. This command may be combined with --encrypt
              (to sign and encrypt a message),  --symmetric  (to  sign  and
              symmetrically  encrypt  a  message),  or  both  --encrypt and
              --symmetric (to sign and encrypt a message that  can  be  de‐
              crypted using a secret key or a passphrase).  The signing key
              is chosen by default or can be set explicitly using the --lo‐
              cal-user and --default-key options.

       --clear-sign
       --clearsign
              Make  a cleartext signature.  The content in a cleartext sig‐
              nature is readable  without  any  special  software.  OpenPGP
              software  is  only needed to verify the signature.  cleartext
              signatures may modify end-of-line whitespace for platform in‐
              dependence  and are not intended to be reversible.  The sign‐
              ing key is chosen by default or can be set  explicitly  using
              the --local-user and --default-key options.

       --detach-sign
       -b     Make a detached signature.

       --encrypt
       -e     Encrypt  data to one or more public keys. This command may be
              combined with --sign (to sign and encrypt a message),  --sym‐
              metric  (to  encrypt  a message that can be decrypted using a
              secret key or a passphrase), or --sign  and  --symmetric  to‐
              gether  (for  a  signed message that can be decrypted using a
              secret key or a passphrase).  --recipient and related options
              specify which public keys to use for encryption.

       --symmetric
       -c     Encrypt  with  a symmetric cipher using a passphrase. The de‐
              fault symmetric cipher used is AES-128,  but  may  be  chosen
              with  the  --cipher-algo option. This command may be combined
              with --sign (for a signed and  symmetrically  encrypted  mes‐
              sage),  --encrypt  (for a message that may be decrypted via a
              secret key or a passphrase), or --sign and --encrypt together
              (for  a signed message that may be decrypted via a secret key
              or a passphrase).  gpg caches the passphrase used for symmet‐
              ric  encryption  so  that a decrypt operation may not require
              that the user needs to  enter  the  passphrase.   The  option
              --no-symkey-cache can be used to disable this feature.

       --store
              Store only (make a simple literal data packet).

       --decrypt
       -d     Decrypt  the  file  given on the command line (or STDIN if no
              file is specified) and write it to STDOUT (or the file speci‐
              fied  with  --output).  If  the decrypted file is signed, the
              signature is also verified. This command differs from the de‐
              fault  operation, as it never writes to the filename which is
              included in the file and it rejects files  that  don't  begin
              with an encrypted message.

       --verify
              Assume that the first argument is a signed file and verify it
              without generating any output.  With no arguments, the signa‐
              ture  packet  is  read  from  STDIN.  If only one argument is
              given, the specified file is expected to include  a  complete
              signature.

              With  more than one argument, the first argument should spec‐
              ify a file with a detached signature and the remaining  files
              should  contain the signed data. To read the signed data from
              STDIN, use ‘-’ as the second filename.  For security reasons,
              a  detached  signature will not read the signed material from
              STDIN if not explicitly specified.

              Note: If the option --batch is not used, gpg may assume  that
              a single argument is a file with a detached signature, and it
              will try to find a matching data file  by  stripping  certain
              suffixes.  Using this historical feature to verify a detached
              signature is strongly discouraged; you should always  specify
              the data file explicitly.

              Note: When verifying a cleartext signature, gpg verifies only
              what makes up the cleartext signed data  and  not  any  extra
              data  outside  of the cleartext signature or the header lines
              directly following the dash marker line.  The option --output
              may  be  used  to write out the actual signed data, but there
              are other pitfalls with this format as well.  It is suggested
              to  avoid  cleartext  signatures  in favor of detached signa‐
              tures.

              Note: Sometimes the use of the gpgv tool is easier than using
              the  full-fledged  gpg with this option.  gpgv is designed to
              compare signed data against a list of trusted  keys  and  re‐
              turns with success only for a good signature.  It has its own
              manual page.

       --multifile
              This modifies certain other commands to accept multiple files
              for  processing  on  the command line or read from STDIN with
              each filename on a separate line. This allows for many  files
              to  be  processed  at once. --multifile may currently be used
              along with --verify,  --encrypt,  and  --decrypt.  Note  that
              --multifile  --verify  may  not  be used with detached signa‐
              tures.

       --verify-files
              Identical to --multifile --verify.

       --encrypt-files
              Identical to --multifile --encrypt.

       --decrypt-files
              Identical to --multifile --decrypt.

       --list-keys
       -k
       --list-public-keys
              List the specified keys.  If no keys are specified, then  all
              keys from the configured public keyrings are listed.

              Never use the output of this command in scripts or other pro‐
              grams.  The output is intended only for humans and its format
              is likely to change.  The --with-colons option emits the out‐
              put in a stable, machine-parseable format, which is  intended
              for use by scripts and other programs.

       --list-secret-keys
       -K     List  the  specified  secret keys.  If no keys are specified,
              then all known secret keys are listed.  A # after the initial
              tags  sec  or ssb means that the secret key or subkey is cur‐
              rently not usable.  We also say that this key has been  taken
              offline  (for  example, a primary key can be taken offline by
              exporting the key using the command --export-secret-subkeys).
              A  >  after  these  tags indicate that the key is stored on a
              smartcard.  See also --list-keys.

       --check-signatures
       --check-sigs
              Same as --list-keys, but the key signatures are verified  and
              listed too.  Note that for performance reasons the revocation
              status of a signing key is not shown.  This command  has  the
              same effect as using --list-keys with --with-sig-check.

              The  status  of  the  verification is indicated by a flag di‐
              rectly following the "sig" tag (and thus before the flags de‐
              scribed  below.   A "!" indicates that the signature has been
              successfully verified, a "-" denotes a bad  signature  and  a
              "%" is used if an error occurred while checking the signature
              (e.g. a non supported algorithm).  Signatures where the  pub‐
              lic  key is not available are not listed; to see their keyids
              the command --list-sigs can be used.

              For each signature listed, there are several flags in between
              the  signature status flag and keyid.  These flags give addi‐
              tional information about each key signature.   From  left  to
              right,  they  are the numbers 1-3 for certificate check level
              (see --ask-cert-level), "L" for  a  local  or  non-exportable
              signature (see --lsign-key), "R" for a nonRevocable signature
              (see the --edit-key command "nrsign"), "P"  for  a  signature
              that contains a policy URL (see --cert-policy-url), "N" for a
              signature that contains a notation (see --cert-notation), "X"
              for  an  eXpired  signature  (see --ask-cert-expire), and the
              numbers 1-9 or "T" for 10 and above to indicate trust  signa‐
              ture levels (see the --edit-key command "tsign").

       --locate-keys
       --locate-external-keys
              Locate  the  keys given as arguments.  This command basically
              uses the same algorithm as used when locating  keys  for  en‐
              cryption or signing and may thus be used to see what keys gpg
              might use.  In particular  external  methods  as  defined  by
              --auto-key-locate  may  be used to locate a key.  Only public
              keys are listed.  The variant --locate-external-keys does not
              consider a locally existing key and can thus be used to force
              the refresh of a key via the defined external methods.

       --show-keys
              This commands takes OpenPGP keys as input and prints informa‐
              tion  about them in the same way the command --list-keys does
              for locally stored key.  In addition the list  options  show-
              unusable-uids,   show-unusable-subkeys,   show-notations  and
              show-policy-urls are also enabled.  As  usual  for  automated
              processing,  this  command should be combined with the option
              --with-colons.

       --fingerprint
              List all keys (or the specified ones) along with  their  fin‐
              gerprints.  This  is  the same output as --list-keys but with
              the additional output of a line  with  the  fingerprint.  May
              also be combined with --check-signatures.  If this command is
              given twice, the  fingerprints  of  all  secondary  keys  are
              listed too.  This command also forces pretty printing of fin‐
              gerprints if the keyid format has been set to "none".

       --list-packets
              List only the sequence of packets.  This command is only use‐
              ful  for  debugging.  When used with option --verbose the ac‐
              tual MPI values are dumped and not only their lengths.   Note
              that the output of this command may change with new releases.

       --edit-card
       --card-edit
              Present  a  menu  to  work  with  a smartcard. The subcommand
              "help" provides an overview on available commands. For a  de‐
              tailed   description,   please   see   the   Card   HOWTO  at
              https://gnupg.org/documentation/howtos.html#GnuPG-cardHOWTO .

       --card-status
              Show the content of the smart card.

       --change-pin
              Present a menu to allow changing the PIN of a smartcard. This
              functionality  is  also  available as the subcommand "passwd"
              with the --edit-card command.

       --delete-keys name
              Remove key from the public  keyring.  In  batch  mode  either
              --yes  is  required  or  the key must be specified by finger‐
              print. This is a safeguard  against  accidental  deletion  of
              multiple  keys.   If the exclamation mark syntax is used with
              the fingerprint of a subkey only that subkey is  deleted;  if
              the exclamation mark is used with the fingerprint of the pri‐
              mary key the entire public key is deleted.

       --delete-secret-keys name
              Remove key from the secret keyring. In  batch  mode  the  key
              must  be  specified  by fingerprint.  The option --yes can be
              used to advice gpg-agent not to request a confirmation.  This
              extra  pre-caution is done because gpg can't be sure that the
              secret key (as controlled by gpg-agent) is only used for  the
              given  OpenPGP public key.  If the exclamation mark syntax is
              used with the fingerprint of a subkey only the secret part of
              that  subkey is deleted; if the exclamation mark is used with
              the fingerprint of the primary key only the  secret  part  of
              the primary key is deleted.

       --delete-secret-and-public-key name
              Same  as --delete-key, but if a secret key exists, it will be
              removed first. In batch mode the key  must  be  specified  by
              fingerprint.   The  option  --yes  can be used to advice gpg-
              agent not to request a confirmation.

       --export
              Either export all keys from all  keyrings  (default  keyrings
              and  those  registered  via option --keyring), or if at least
              one name is given, those of the given name. The exported keys
              are written to STDOUT or to the file given with option --out‐
              put.  Use together with --armor to mail those keys.

       --send-keys keyIDs
              Similar to --export but sends the keys to a keyserver.   Fin‐
              gerprints  may  be  used instead of key IDs.  Don't send your
              complete keyring to a keyserver --- select  only  those  keys
              which are new or changed by you.  If no keyIDs are given, gpg
              does nothing.

       --export-secret-keys
       --export-secret-subkeys
              Same as --export, but exports the secret keys  instead.   The
              exported keys are written to STDOUT or to the file given with
              option --output.  This command is often used along  with  the
              option  --armor to allow for easy printing of the key for pa‐
              per backup; however the external tool paperkey does a  better
              job  of creating backups on paper.  Note that exporting a se‐
              cret key can be a security risk if the exported keys are sent
              over an insecure channel.

              The  second  form  of the command has the special property to
              render the secret part of the primary key useless; this is  a
              GNU extension to OpenPGP and other implementations can not be
              expected to successfully import such a key.  Its intended use
              is in generating a full key with an additional signing subkey
              on a dedicated machine.  This command then  exports  the  key
              without the primary key to the main machine.

              GnuPG  may ask you to enter the passphrase for the key.  This
              is required, because the internal protection  method  of  the
              secret key is different from the one specified by the OpenPGP
              protocol.

       --export-ssh-key
              This command is used to export a key in  the  OpenSSH  public
              key  format.  It requires the specification of one key by the
              usual means and exports the latest valid subkey which has  an
              authentication capability to STDOUT or to the file given with
              option --output.  That output can directly be added to  ssh's
              ‘authorized_key’ file.

              By  specifying  the key to export using a key ID or a finger‐
              print suffixed with an exclamation mark (!), a specific  sub‐
              key  or  the primary key can be exported.  This does not even
              require that the key has the authentication  capability  flag
              set.

       --import
       --fast-import
              Import/merge  keys.  This adds the given keys to the keyring.
              The fast version is currently just a synonym.

              There are a few other options which control how this  command
              works.   Most notable here is the --import-options merge-only
              option which does not insert new keys but does only the merg‐
              ing of new signatures, user-IDs and subkeys.

       --receive-keys keyIDs
       --recv-keys keyIDs
              Import the keys with the given keyIDs from a keyserver.

       --refresh-keys
              Request  updates from a keyserver for keys that already exist
              on the local keyring. This is useful for updating a key  with
              the  latest  signatures,  user IDs, etc. Calling this with no
              arguments will refresh the entire keyring.

       --search-keys names
              Search the keyserver for  the  given  names.  Multiple  names
              given  here  will  be  joined  together  to create the search
              string for the keyserver.  Note that  keyservers  search  for
              names in a different and simpler way than gpg does.  The best
              choice is to use a mail address.  Due to data privacy reasons
              keyservers  may  even  not even allow searching by user id or
              mail address and thus may only return results when being used
              with  the  --recv-key command to search by key fingerprint or
              keyid.

       --fetch-keys URIs
              Retrieve keys located at the specified URIs. Note  that  dif‐
              ferent installations of GnuPG may support different protocols
              (HTTP, FTP, LDAP, etc.).  When using HTTPS  the  system  pro‐
              vided root certificates are used by this command.

       --update-trustdb
              Do trust database maintenance. This command iterates over all
              keys and builds the Web of Trust. This is an interactive com‐
              mand  because  it may have to ask for the "ownertrust" values
              for keys. The user has to give an estimation of how  far  she
              trusts  the  owner  of the displayed key to correctly certify
              (sign) other keys. GnuPG only asks for the  ownertrust  value
              if  it  has not yet been assigned to a key. Using the --edit-
              key menu, the assigned value can be changed at any time.

       --check-trustdb
              Do trust database maintenance without user interaction.  From
              time  to  time the trust database must be updated so that ex‐
              pired keys or signatures and the resulting changes in the Web
              of  Trust can be tracked. Normally, GnuPG will calculate when
              this is required and do it  automatically  unless  --no-auto-
              check-trustdb  is  set.  This  command can be used to force a
              trust database check at any time. The processing is identical
              to  that of --update-trustdb but it skips keys with a not yet
              defined "ownertrust".

              For use with cron jobs, this command  can  be  used  together
              with  --batch  in which case the trust database check is done
              only if a check is needed. To force a run even in batch  mode
              add the option --yes.

       --export-ownertrust
              Send  the  ownertrust  values  to  STDOUT. This is useful for
              backup purposes as these values are the only ones which can't
              be re-created from a corrupted trustdb.  Example:
                  gpg --export-ownertrust > otrust.txt

       --import-ownertrust
              Update the trustdb with the ownertrust values stored in files
              (or STDIN if not given); existing values will be overwritten.
              In  case  of a severely damaged trustdb and if you have a re‐
              cent backup of  the  ownertrust  values  (e.g.  in  the  file
              ‘otrust.txt’), you may re-create the trustdb using these com‐
              mands:
                  cd ~/.gnupg
                  rm trustdb.gpg
                  gpg --import-ownertrust < otrust.txt

       --rebuild-keydb-caches
              When updating from version 1.0.6 to 1.0.7 this command should
              be  used  to create signature caches in the keyring. It might
              be handy in other situations too.

       --print-md algo
       --print-mds
              Print message digest of algorithm algo for all given files or
              STDIN.   With  the second form (or a deprecated "*" for algo)
              digests for all available algorithms are printed.

       --gen-random 0|1|2 count
              Emit count random bytes of the given quality level 0, 1 or 2.
              If  count is not given or zero, an endless sequence of random
              bytes will be emitted.  If used with --armor the output  will
              be base64 encoded.  PLEASE, don't use this command unless you
              know what you are doing; it may remove precious entropy  from
              the system!

       --gen-prime mode bits
              Use  the  source,  Luke  :-). The output format is subject to
              change with ant release.

       --enarmor
       --dearmor
              Pack or unpack an arbitrary input into/from an OpenPGP  ASCII
              armor.   This  is a GnuPG extension to OpenPGP and in general
              not very useful.

       --tofu-policy {auto|good|unknown|bad|ask} keys
              Set the TOFU policy for all the bindings associated with  the
              specified  keys.   For  more information about the meaning of
              the policies, see: [trust-model-tofu].  The keys may be spec‐
              ified either by their fingerprint (preferred) or their keyid.

   How to manage your keys

       This section explains the main commands for key management.

       --quick-generate-key user-id [algo [usage [expire]]]
       --quick-gen-key
              This  is a simple command to generate a standard key with one
              user id.  In contrast to --generate-key the key is  generated
              directly  without the need to answer a bunch of prompts.  Un‐
              less the option --yes is given, the key creation will be can‐
              celed if the given user id already exists in the keyring.

              If  invoked  directly  on the console without any special op‐
              tions an answer to a ``Continue?'' style confirmation  prompt
              is  required.   In  case  the  user  id already exists in the
              keyring a second prompt to force the creation of the key will
              show up.

              If  algo  or usage are given, only the primary key is created
              and no prompts are shown.  To specify an expiration date  but
              still  create  a  primary and subkey use ``default'' or ``fu‐
              ture-default'' for algo and ``default'' for usage.  For a de‐
              scription   of  these  optional  arguments  see  the  command
              --quick-add-key.  The usage accepts also the  value  ``cert''
              which can be used to create a certification only primary key;
              the default is to a create certification and signing key.

              The expire argument can be used to specify an expiration date
              for the key.  Several formats are supported; commonly the ISO
              formats ``YYYY-MM-DD'' or ``YYYYMMDDThhmmss'' are  used.   To
              make  the key expire in N seconds, N days, N weeks, N months,
              or N years use  ``seconds=N'',  ``Nd'',  ``Nw'',  ``Nm'',  or
              ``Ny''  respectively.  Not specifying a value, or using ``-''
              results in a key expiring in a reasonable  default  interval.
              The  values ``never'', ``none'' can be used for no expiration
              date.

              If this command is used  with  --batch,  --pinentry-mode  has
              been  set  to  loopback,  and  one  of the passphrase options
              (--passphrase, --passphrase-fd, or passphrase-file) is  used,
              the supplied passphrase is used for the new key and the agent
              does not ask for it.  To create a key without any  protection
              --passphrase '' may be used.

              To  create an OpenPGP key from the keys available on the cur‐
              rently inserted smartcard, the special string ``card'' can be
              used  for  algo.   If  the  card features an encryption and a
              signing key, gpg will figure them out and creates an  OpenPGP
              key consisting of the usual primary key and one subkey.  This
              works only with certain smartcards.  Note that  the  interac‐
              tive  --full-gen-key  command  allows to do the same but with
              greater flexibility in the selection of the smartcard keys.

              Note that it is possible to create a primary key and a subkey
              using  non-default algorithms by using ``default'' and chang‐
              ing the default parameters using  the  option  --default-new-
              key-algo.

       --quick-set-expire fpr expire [*|subfprs]
              With two arguments given, directly set the expiration time of
              the primary key identified by fpr to expire.  To  remove  the
              expiration  time 0 can be used.  With three arguments and the
              third given as an asterisk, the expiration time of  all  non-
              revoked  and not yet expired subkeys are set to expire.  With
              more than two arguments and a list of fingerprints given  for
              subfprs,  all non-revoked subkeys matching these fingerprints
              are set to expire.

       --quick-add-key fpr [algo [usage [expire]]]
              Directly add a subkey to the key identified  by  the  finger‐
              print fpr.  Without the optional arguments an encryption sub‐
              key is added.  If any of the arguments are given a more  spe‐
              cific subkey is added.

              algo  may  be  any of the supported algorithms or curve names
              given in the format as used by key listings.  To use the  de‐
              fault  algorithm the string ``default'' or ``-'' can be used.
              Supported   algorithms   are   ``rsa'',   ``dsa'',   ``elg'',
              ``ed25519'',  ``cv25519'', and other ECC curves.  For example
              the string ``rsa'' adds an  RSA  key  with  the  default  key
              length;  a string ``rsa4096'' requests that the key length is
              4096 bits.  The string ``future-default'' is an alias for the
              algorithm  which  will likely be used as default algorithm in
              future versions of gpg.  To list the supported ECC curves the
              command gpg --with-colons --list-config curve can be used.

              Depending  on  the given algo the subkey may either be an en‐
              cryption subkey or a signing subkey.  If an algorithm is  ca‐
              pable of signing and encryption and such a subkey is desired,
              a usage string must be given.  This string  is  either  ``de‐
              fault''  or  ``-''  to  keep the default or a comma delimited
              list (or space delimited list) of keywords:  ``sign''  for  a
              signing  subkey,  ``auth''  for an authentication subkey, and
              ``encr'' for an encryption subkey (``encrypt'' can be used as
              alias  for  ``encr'').   The valid combinations depend on the
              algorithm.

              The expire argument can be used to specify an expiration date
              for the key.  Several formats are supported; commonly the ISO
              formats ``YYYY-MM-DD'' or ``YYYYMMDDThhmmss'' are  used.   To
              make  the key expire in N seconds, N days, N weeks, N months,
              or N years use  ``seconds=N'',  ``Nd'',  ``Nw'',  ``Nm'',  or
              ``Ny''  respectively.  Not specifying a value, or using ``-''
              results in a key expiring in a reasonable  default  interval.
              The  values ``never'', ``none'' can be used for no expiration
              date.

       --generate-key
       --gen-key
              Generate a new key pair using the current default parameters.
              This  is  the standard command to create a new key.  In addi‐
              tion to the key  a  revocation  certificate  is  created  and
              stored  in  the  ‘openpgp-revocs.d’ directory below the GnuPG
              home directory.

       --full-generate-key
       --full-gen-key
              Generate a new key pair with dialogs for all  options.   This
              is an extended version of --generate-key.

              There  is  also  a feature which allows you to create keys in
              batch mode. See the manual section ``Unattended  key  genera‐
              tion'' on how to use this.

       --generate-revocation name
       --gen-revoke name
              Generate  a  revocation certificate for the complete key.  To
              only revoke a subkey or a key signature, use the --edit  com‐
              mand.

              This  command  merely  creates  the revocation certificate so
              that it can be used to revoke the key if that is ever needed.
              To  actually  revoke a key the created revocation certificate
              needs to be merged with the key to revoke.  This is  done  by
              importing  the revocation certificate using the --import com‐
              mand.  Then the revoked key needs to be published,  which  is
              best  done by sending th