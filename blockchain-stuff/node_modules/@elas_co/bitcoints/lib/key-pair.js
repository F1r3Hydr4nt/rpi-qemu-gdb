"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyPair = void 0;
const bw_1 = require("./bw");
const priv_key_1 = require("./priv-key");
const pub_key_1 = require("./pub-key");
const struct_1 = require("./struct");
class KeyPair extends struct_1.Struct {
    constructor(privKey, pubKey, PrivKey = priv_key_1.PrivKey) {
        super({ privKey, pubKey });
        this.PrivKey = PrivKey;
    }
    fromJSON(json) {
        if (json.privKey) {
            this.privKey = this.PrivKey.fromJSON(json.privKey);
        }
        if (json.pubKey) {
            this.pubKey = pub_key_1.PubKey.fromJSON(json.pubKey);
        }
        return this;
    }
    fromBr(br) {
        const buflen1 = br.readUInt8();
        if (buflen1 > 0) {
            this.privKey = new this.PrivKey().fromFastBuffer(br.read(buflen1));
        }
        const buflen2 = br.readUInt8();
        if (buflen2 > 0) {
            this.pubKey = new pub_key_1.PubKey().fromFastBuffer(br.read(buflen2));
        }
        return this;
    }
    toBw(bw) {
        if (!bw) {
            bw = new bw_1.Bw();
        }
        if (this.privKey) {
            const privKeybuf = this.privKey.toFastBuffer();
            bw.writeUInt8(privKeybuf.length);
            bw.write(privKeybuf);
        }
        else {
            bw.writeUInt8(0);
        }
        if (this.pubKey) {
            const pubKeybuf = this.pubKey.toFastBuffer();
            bw.writeUInt8(pubKeybuf.length);
            bw.write(pubKeybuf);
        }
        else {
            bw.writeUInt8(0);
        }
        return bw;
    }
    fromString(str) {
        return this.fromJSON(JSON.parse(str));
    }
    toString() {
        return JSON.stringify(this.toJSON());
    }
    toPublic() {
        const keyPair = new KeyPair().fromObject(this);
        keyPair.privKey = undefined;
        return keyPair;
    }
    fromPrivKey(privKey) {
        this.privKey = privKey;
        this.pubKey = new pub_key_1.PubKey().fromPrivKey(privKey);
        return this;
    }
    static fromPrivKey(privKey) {
        return new this().fromPrivKey(privKey);
    }
    async asyncFromPrivKey(privKey) {
        this.privKey = privKey;
        this.pubKey = await new pub_key_1.PubKey().asyncFromPrivKey(privKey);
        return this;
    }
    static asyncFromPrivKey(privKey) {
        return new this().asyncFromPrivKey(privKey);
    }
    fromRandom() {
        this.privKey = new this.PrivKey().fromRandom();
        this.pubKey = new pub_key_1.PubKey().fromPrivKey(this.privKey);
        return this;
    }
    static fromRandom() {
        return new this().fromRandom();
    }
    async asyncFromRandom() {
        this.privKey = new this.PrivKey().fromRandom();
        return this.asyncFromPrivKey(this.privKey);
    }
    static asyncFromRandom() {
        return new this().asyncFromRandom();
    }
}
exports.KeyPair = KeyPair;
KeyPair.Mainnet = class extends KeyPair {
    constructor(privKey, pubKey) {
        super(privKey, pubKey, priv_key_1.PrivKey.Mainnet);
    }
};
KeyPair.Testnet = class extends KeyPair {
    constructor(privKey, pubKey) {
        super(privKey, pubKey, priv_key_1.PrivKey.Testnet);
    }
};
//# sourceMappingURL=key-pair.js.map