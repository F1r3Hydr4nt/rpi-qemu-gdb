"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Base58Check = void 0;
/**
 * Base58 Check Encoding
 * =====================
 *
 * Base58 check encoding. The usual way to use it is
 * new Base58Check(buf).toString() or new Base58Check(str).toBuffer().
 */
const base_58_1 = require("./base-58");
const cmp_1 = require("./cmp");
const hash_1 = require("./hash");
const struct_1 = require("./struct");
class Base58Check extends struct_1.Struct {
    constructor(buf) {
        super({ buf });
    }
    fromHex(hex) {
        return this.fromBuffer(Buffer.from(hex, 'hex'));
    }
    toHex() {
        return this.toBuffer().toString('hex');
    }
    static decode(s) {
        if (typeof s !== 'string') {
            throw new Error('Input must be a string');
        }
        const buf = base_58_1.Base58.decode(s);
        if (buf.length < 4) {
            throw new Error('Input string too short');
        }
        const data = buf.slice(0, -4);
        const csum = buf.slice(-4);
        const hash = hash_1.Hash.sha256Sha256(data);
        const hash4 = hash.slice(0, 4);
        if (!(0, cmp_1.cmp)(csum, hash4)) {
            throw new Error('Checksum mismatch');
        }
        return data;
    }
    static encode(buf) {
        if (!Buffer.isBuffer(buf)) {
            throw new Error('Input must be a buffer');
        }
        const checkedBuf = Buffer.alloc(buf.length + 4);
        const hash = hash_1.Hash.sha256Sha256(buf);
        buf.copy(checkedBuf);
        hash.copy(checkedBuf, buf.length);
        return base_58_1.Base58.encode(checkedBuf);
    }
    fromBuffer(buf) {
        this.buf = buf;
        return this;
    }
    fromString(str) {
        const buf = Base58Check.decode(str);
        this.buf = buf;
        return this;
    }
    toBuffer() {
        return this.buf;
    }
    toString() {
        return Base58Check.encode(this.buf);
    }
}
exports.Base58Check = Base58Check;
//# sourceMappingURL=base-58-check.js.map