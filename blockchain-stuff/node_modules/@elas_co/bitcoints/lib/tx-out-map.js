"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxOutMap = void 0;
/**
 * Transaction Output Map
 * ======================
 *
 * A map from a transaction hash and output number to that particular output.
 * Note that the map is from the transaction *hash*, which is the value that
 * occurs in the blockchain, not the id, which is the reverse of the hash. The
 * TxOutMap is necessary when signing a transction to get the script and value
 * of that output which is plugged into the sighash algorithm.
 */
const struct_1 = require("./struct");
const tx_out_1 = require("./tx-out");
class TxOutMap extends struct_1.Struct {
    constructor(map = new Map()) {
        super({ map });
    }
    toJSON() {
        const json = {};
        for (const [label, txOut] of this.map.entries()) {
            json[label] = txOut.toHex();
        }
        return json;
    }
    fromJSON(json) {
        for (const label of Object.keys(json)) {
            this.map.set(label, tx_out_1.TxOut.fromHex(json[label]));
        }
        return this;
    }
    set(txHashBuf, txOutNum, txOut) {
        const label = txHashBuf.toString('hex') + ':' + txOutNum;
        this.map.set(label, txOut);
        return this;
    }
    get(txHashBuf, txOutNum) {
        const label = txHashBuf.toString('hex') + ':' + txOutNum;
        return this.map.get(label);
    }
    setTx(tx) {
        const txhashhex = tx.hash().toString('hex');
        for (const [index, txOut] of tx.txOuts.entries()) {
            const label = txhashhex + ':' + index;
            this.map.set(label, txOut);
        }
        return this;
    }
}
exports.TxOutMap = TxOutMap;
//# sourceMappingURL=tx-out-map.js.map