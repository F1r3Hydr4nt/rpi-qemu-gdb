"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Version = void 0;
const bw_1 = require("./bw");
const constants_1 = require("./constants");
const struct_1 = require("./struct");
const var_int_1 = require("./var-int");
const Constants = constants_1.Constants.Default;
class Version extends struct_1.Struct {
    constructor(versionBytesNum = Constants.Msg.versionBytesNum, servicesBuf, timeBn, addrRecvServicesBuf, addrRecvIpAddrBuf, addrRecvPort, addrTransServicesBuf, addrTransIpAddrBuf, addrTransPort, nonceBuf, userAgentVi, userAgentBuf, startHeightNum, relay) {
        super({
            versionBytesNum,
            servicesBuf,
            timeBn,
            addrRecvServicesBuf,
            addrRecvIpAddrBuf,
            addrRecvPort,
            addrTransServicesBuf,
            addrTransIpAddrBuf,
            addrTransPort,
            nonceBuf,
            userAgentVi,
            userAgentBuf,
            startHeightNum,
            relay,
        });
    }
    toBw(bw) {
        if (!bw) {
            bw = new bw_1.Bw();
        }
        bw.writeUInt32LE(this.versionBytesNum);
        bw.write(this.servicesBuf);
        bw.writeUInt64LEBn(this.timeBn);
        bw.write(this.addrRecvServicesBuf);
        bw.write(this.addrRecvIpAddrBuf);
        bw.writeUInt16BE(this.addrRecvPort); // note BE
        bw.write(this.addrTransServicesBuf);
        bw.write(this.addrTransIpAddrBuf);
        bw.writeUInt16BE(this.addrTransPort); // note BE
        bw.write(this.nonceBuf);
        bw.write(this.userAgentVi.buf);
        bw.write(this.userAgentBuf);
        bw.writeUInt32LE(this.startHeightNum);
        bw.writeUInt8(Number(this.relay));
        return bw;
    }
    fromBr(br) {
        this.versionBytesNum = br.readUInt32LE();
        this.servicesBuf = br.read(8);
        this.timeBn = br.readUInt64LEBn();
        this.addrRecvServicesBuf = br.read(8);
        this.addrRecvIpAddrBuf = br.read(16);
        this.addrRecvPort = br.readUInt16BE(); // note BE
        this.addrTransServicesBuf = br.read(8);
        this.addrTransIpAddrBuf = br.read(16);
        this.addrTransPort = br.readUInt16BE(); // note BE
        this.nonceBuf = br.read(8);
        this.userAgentVi = new var_int_1.VarInt(br.readVarIntBuf());
        this.userAgentBuf = br.read(this.userAgentVi.toNumber());
        this.startHeightNum = br.readUInt32LE();
        this.relay = Boolean(br.readUInt8());
        return this;
    }
}
exports.Version = Version;
//# sourceMappingURL=version.js.map