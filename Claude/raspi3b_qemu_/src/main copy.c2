#include <stdint.h>
#include <stddef.h>
#include "sha1.h"
#include "printf.h"
#include <string.h>
#include "cast5.h"

// QEMU Versatile PB UART0 address
#define UART0_DR *((volatile uint32_t *)0x101f1000)

// Function prototypes
void uart_putc(char c);
void print(const char *str);
void print_hex(uint8_t byte);
uint8_t hex_to_nibble(char hex);
void hex_to_bytes(const char *hex, uint8_t *bytes, unsigned int len);
void derive_key(const uint8_t *salt, const char *password, unsigned int pass_len, uint32_t iterations, uint8_t *key);

void putc_uart(void *p, char c)
{
    (void)p; // This parameter is not used in this implementation
    uart_putc(c);
}

void uart_putc(char c)
{
    UART0_DR = c;
}

void print(const char *str)
{
    while (*str)
    {
        uart_putc(*str++);
    }
}

void print_hex(uint8_t byte)
{
    const char hex_chars[] = "0123456789ABCDEF";
    uart_putc(hex_chars[byte >> 4]);
    uart_putc(hex_chars[byte & 0x0F]);
}

// Convert a hex character to its 4-bit value
uint8_t hex_to_nibble(char hex)
{
    if (hex >= '0' && hex <= '9')
        return hex - '0';
    if (hex >= 'A' && hex <= 'F')
        return hex - 'A' + 10;
    if (hex >= 'a' && hex <= 'f')
        return hex - 'a' + 10;
    return 0; // Invalid hex character
}

// Convert hex string to bytes
void hex_to_bytes(const char *hex, uint8_t *bytes, unsigned int len)
{
    for (unsigned int i = 0; i < len; i++)
    {
        bytes[i] = (hex_to_nibble(hex[i * 2]) << 4) | hex_to_nibble(hex[i * 2 + 1]);
    }
}

size_t my_strlen(const char *str)
{
    size_t len = 0;
    while (str[len] != '\0')
    {
        len++;
    }
    return len;
}

// Key derivation function using SHA1
void derive_key(const uint8_t *salt, const char *password, unsigned int pass_len, uint32_t iterations, uint8_t *key)
{
    SHA1_CTX ctx;
    SHA1Init(&ctx);

    unsigned int saltPlusPasswordLen = 8 + pass_len; // 8 bytes of salt + password length
    unsigned int bytesProcessed = 0;
    unsigned int index = 0;

    while (bytesProcessed < iterations)
    {
        uint8_t byte;
        if (index < 8)
        {
            byte = salt[index];
        }
        else
        {
            byte = password[index - 8];
        }

        SHA1Update(&ctx, &byte, 1);
        bytesProcessed++;
        index++;

        // If we've reached the end of saltPlusPassword, wrap around
        if (index >= saltPlusPasswordLen)
        {
            index = 0;
        }
    }

    SHA1Final(key, &ctx);
}
// Add this function at the top of your file or in a separate header
int is_printable(char c)
{
    return (c >= 32 && c <= 126);
}

// Encrypted data as a byte array
static const uint8_t target_data[] = {
    0x8c, 0x0d, 0x04, 0x03, 0x03, 0x02, 0x0a, 0x0b,
    0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0xf8, 0xc9,
    0x1f, 0xa6, 0xca, 0x6c, 0x8a, 0xee, 0xf4, 0xae,
    0x83, 0x5e, 0xe0, 0xb8, 0xbe, 0x11, 0x22, 0xe0,
    0x36, 0x90, 0xcf, 0x3f, 0x28, 0xd6, 0x0d, 0x27,
    0xd6, 0x68, 0xd1, 0x17, 0xef, 0xfd, 0xba, 0x09};

static const char password[] = "password";
static const uint8_t salt[] = {0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11};
static const uint8_t random[] = {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF};
static const uint8_t timestamp[] = {0x60, 0xD8, 0x30, 0x00};

void main()
{
    init_printf(0, putc_uart);
    printf("Printf initialised!\n");

    while (1)
    {
    } // Loop forever
}
/*// Initialise cipher
    // Step by step, here is the procedure:
    //    1.  The feedback register (FR) is set to the IV, which is all zeros.
    struct Block iv = {.msb = 0x00000000, .lsb = 0x00000000};
    struct Block fr = iv;
    printBlock(fr);
    //    2.  FR is encrypted to produce FRE (FR Encrypted).  This is the
    //        encryption of an all-zero value.
    struct Block encrypted = encrypt(key, fr);
    printBlock(encrypted);
    //    3.  FRE is xored with the first 8 octets of random data prefixed to
    //        the plaintext to produce C1-C8, the first 8 octets of ciphertext.
    struct Block freXored = xorBlock(encrypted, blockFromBytes((uint8_t *)random));
    printBlock(freXored);
    int encOffset = 0;
    // appendBytes(encryptedData, encOffset, bytesFromBlock(freXored), 8);
    encOffset += 8;
    //    4.  FR is loaded with C1-C8.
    fr = freXored;
    printBlock(fr);

    //    5.  FR is encrypted to produce FRE, the encryption of the first 8
    //        octets of ciphertext.
    encrypted = encrypt(key, fr); // This needs an iv of all zeros
    printBlock(encrypted);
    // // Encrypt random data
    // uint8_t ciphertext[10];
    // cast5_encrypt(key, random, ciphertext);
    // printData("ciphertext", ciphertext, sizeof(ciphertext));
*/