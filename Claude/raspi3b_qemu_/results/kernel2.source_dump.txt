
build/kernel2.img:     file format elf32-littlearm


Disassembly of section .text:

00008000 <__text_start>:
    8000:	e3a0d302 	mov	sp, #134217728	; 0x8000000
    8004:	eb002dac 	bl	136bc <__rodata_start>
    8008:	eafffffe 	b	8008 <__text_start+0x8>

0000800c <gnupg_rl_initialize>:
                            cleanup_after_signal,
                            readline,
                            add_history);
  rl_readline_name = GNUPG_NAME;
#endif
}
    800c:	e12fff1e 	bx	lr

00008010 <fd_cache_strcmp>:
   distinguish between backslash and slash.  */
static int
fd_cache_strcmp (const char *a, const char *b)
{
// #ifdef HAVE_DOSISH_SYSTEM
  for (; *a && *b; a++, b++)
    8010:	e5d03000 	ldrb	r3, [r0]
    8014:	e3530000 	cmp	r3, #0
    {
      if (*a != *b && !((*a == '/' && *b == '\\')
                        || (*a == '\\' && *b == '/')) )
        break;
    }
  return *(const unsigned char *)a - *(const unsigned char *)b;
    8018:	05d12000 	ldrbeq	r2, [r1]
  for (; *a && *b; a++, b++)
    801c:	1a00000c 	bne	8054 <fd_cache_strcmp+0x44>
    8020:	ea00000f 	b	8064 <fd_cache_strcmp+0x54>
      if (*a != *b && !((*a == '/' && *b == '\\')
    8024:	e1520003 	cmp	r2, r3
    8028:	0a000006 	beq	8048 <fd_cache_strcmp+0x38>
    802c:	e353002f 	cmp	r3, #47	; 0x2f
    8030:	0352005c 	cmpeq	r2, #92	; 0x5c
    8034:	0a000003 	beq	8048 <fd_cache_strcmp+0x38>
    8038:	e353005c 	cmp	r3, #92	; 0x5c
    803c:	1a000008 	bne	8064 <fd_cache_strcmp+0x54>
                        || (*a == '\\' && *b == '/')) )
    8040:	e352002f 	cmp	r2, #47	; 0x2f
    8044:	1a000006 	bne	8064 <fd_cache_strcmp+0x54>
  for (; *a && *b; a++, b++)
    8048:	e5f03001 	ldrb	r3, [r0, #1]!
    804c:	e3530000 	cmp	r3, #0
    8050:	0a000005 	beq	806c <fd_cache_strcmp+0x5c>
    8054:	e1a0c001 	mov	ip, r1
    8058:	e4d12001 	ldrb	r2, [r1], #1
    805c:	e3520000 	cmp	r2, #0
    8060:	1affffef 	bne	8024 <fd_cache_strcmp+0x14>
// #else
//  return strcmp (a, b);
// #endif
}
    8064:	e0430002 	sub	r0, r3, r2
    8068:	e12fff1e 	bx	lr
  return *(const unsigned char *)a - *(const unsigned char *)b;
    806c:	e5dc2001 	ldrb	r2, [ip, #1]
}
    8070:	e0430002 	sub	r0, r3, r2
    8074:	e12fff1e 	bx	lr

00008078 <fd_cache_invalidate>:
/*
 * Invalidate (i.e. close) a cached iobuf
 */
static int
fd_cache_invalidate (const char *fname)
{
    8078:	e92d4070 	push	{r4, r5, r6, lr}
    807c:	e1a05000 	mov	r5, r0
    8080:	e59f403c 	ldr	r4, [pc, #60]	; 80c4 <fd_cache_invalidate+0x4c>
  close_cache_t cc;
  int rc = 0;

  printf (fname);
    8084:	eb0024de 	bl	11404 <tfp_printf>
  if (DBG_IOBUF)
    8088:	e59f2038 	ldr	r2, [pc, #56]	; 80c8 <fd_cache_invalidate+0x50>
{
    808c:	e08f4004 	add	r4, pc, r4
    8090:	e1a03004 	mov	r3, r4
  if (DBG_IOBUF)
    8094:	e7943002 	ldr	r3, [r4, r2]
    8098:	e5933000 	ldr	r3, [r3]
    809c:	e3530000 	cmp	r3, #0
    80a0:	1a000001 	bne	80ac <fd_cache_invalidate+0x34>
#endif
	  cc->fp = GNUPG_INVALID_FD;
	}
    }
  return rc;
}
    80a4:	e3a00000 	mov	r0, #0
    80a8:	e8bd8070 	pop	{r4, r5, r6, pc}
    printf ("fd_cache_invalidate (%s)\n", fname);
    80ac:	e59f0018 	ldr	r0, [pc, #24]	; 80cc <fd_cache_invalidate+0x54>
    80b0:	e1a01005 	mov	r1, r5
    80b4:	e08f0000 	add	r0, pc, r0
    80b8:	eb0024d1 	bl	11404 <tfp_printf>
}
    80bc:	e3a00000 	mov	r0, #0
    80c0:	e8bd8070 	pop	{r4, r5, r6, pc}
    80c4:	00033930 	.word	0x00033930
    80c8:	0000001c 	.word	0x0000001c
    80cc:	0000de88 	.word	0x0000de88

000080d0 <file_filter>:


int
file_filter (void *opaque, int control, iobuf_t chain, byte * buf,
	     size_t * ret_len)
{
    80d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  size_t nbytes = 0;
  int rc = 0;

  (void)chain; /* Not used.  */

  if (control == IOBUFCTRL_UNDERFLOW)
    80d4:	e3510003 	cmp	r1, #3
{
    80d8:	e59d6018 	ldr	r6, [sp, #24]
    80dc:	e1a04000 	mov	r4, r0
    80e0:	e59fc14c 	ldr	ip, [pc, #332]	; 8234 <file_filter+0x164>
    80e4:	e1a05003 	mov	r5, r3
  size_t size = *ret_len;
    80e8:	e5967000 	ldr	r7, [r6]
{
    80ec:	e08fc00c 	add	ip, pc, ip
  if (control == IOBUFCTRL_UNDERFLOW)
    80f0:	0a00000d 	beq	812c <file_filter+0x5c>
	    }
#endif
	  *ret_len = nbytes;
	}
    }
  else if (control == IOBUFCTRL_FLUSH)
    80f4:	e3510004 	cmp	r1, #4
    80f8:	0a000007 	beq	811c <file_filter+0x4c>
	  nbytes = p - buf;
#endif
	}
      *ret_len = nbytes;
    }
  else if (control == IOBUFCTRL_INIT)
    80fc:	e3510001 	cmp	r1, #1
    8100:	0a000018 	beq	8168 <file_filter+0x98>
      a->keep_open = 0;
      a->no_cache = 0;
      a->npeeked = 0;
      a->upeeked = 0;
    }
  else if (control == IOBUFCTRL_PEEK)
    8104:	e3510007 	cmp	r1, #7
    8108:	0a00003b 	beq	81fc <file_filter+0x12c>
    }
  else if (control == IOBUFCTRL_DESC)
    {
//      mem2str (buf, "file_filter(fd)", *ret_len);
    }
  else if (control == IOBUFCTRL_FREE)
    810c:	e3510002 	cmp	r1, #2
    8110:	0a000029 	beq	81bc <file_filter+0xec>
  int rc = 0;
    8114:	e3a00000 	mov	r0, #0
	}
      xfree (a); /* We can free our context now. */
    }

  return rc;
}
    8118:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
      *ret_len = nbytes;
    811c:	e3a03000 	mov	r3, #0
    8120:	e5863000 	str	r3, [r6]
	  if (n == -1)
    8124:	e1a00003 	mov	r0, r3
      *ret_len = nbytes;
    8128:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
      printf (size); /* We need a buffer.  */
    812c:	e1a00007 	mov	r0, r7
    8130:	eb0024b3 	bl	11404 <tfp_printf>
      if (a->npeeked > a->upeeked)
    8134:	e5d43034 	ldrb	r3, [r4, #52]	; 0x34
    8138:	e5d42035 	ldrb	r2, [r4, #53]	; 0x35
    813c:	e1530002 	cmp	r3, r2
    8140:	8a00000f 	bhi	8184 <file_filter+0xb4>
      else if (a->eof_seen)
    8144:	e594000c 	ldr	r0, [r4, #12]
    8148:	e3500000 	cmp	r0, #0
	      rc = -1;
    814c:	e3e00000 	mvn	r0, #0
	  *ret_len = 0;
    8150:	13a03000 	movne	r3, #0
	      a->eof_seen = 1;
    8154:	03a02001 	moveq	r2, #1
    8158:	0584200c 	streq	r2, [r4, #12]
	  *ret_len = nbytes;
    815c:	03a03000 	moveq	r3, #0
    8160:	e5863000 	str	r3, [r6]
    8164:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
      a->eof_seen = 0;
    8168:	e3a03000 	mov	r3, #0
    816c:	e580300c 	str	r3, [r0, #12]
  int rc = 0;
    8170:	e1a00003 	mov	r0, r3
      a->keep_open = 0;
    8174:	e5843004 	str	r3, [r4, #4]
      a->no_cache = 0;
    8178:	e5843008 	str	r3, [r4, #8]
      a->npeeked = 0;
    817c:	e1c433b4 	strh	r3, [r4, #52]	; 0x34
    8180:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
          nbytes = a->npeeked - a->upeeked;
    8184:	e0433002 	sub	r3, r3, r2
          memcpy (buf, a->peeked + a->upeeked, nbytes);
    8188:	e2841014 	add	r1, r4, #20
    818c:	e1570003 	cmp	r7, r3
    8190:	e1a00005 	mov	r0, r5
    8194:	e0811002 	add	r1, r1, r2
    8198:	21a07003 	movcs	r7, r3
    819c:	e1a02007 	mov	r2, r7
    81a0:	eb001bcb 	bl	f0d4 <memcpy>
          a->upeeked += nbytes;
    81a4:	e5d43035 	ldrb	r3, [r4, #53]	; 0x35
  int rc = 0;
    81a8:	e3a00000 	mov	r0, #0
          a->upeeked += nbytes;
    81ac:	e0833007 	add	r3, r3, r7
    81b0:	e5c43035 	strb	r3, [r4, #53]	; 0x35
          *ret_len = nbytes;
    81b4:	e5867000 	str	r7, [r6]
    81b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  gnupg_fd_t f = a->fp;
    81bc:	e5902000 	ldr	r2, [r0]
      if (f != FD_FOR_STDIN && f != FD_FOR_STDOUT)
    81c0:	e3520001 	cmp	r2, #1
    81c4:	9a000008 	bls	81ec <file_filter+0x11c>
	  if (DBG_IOBUF)
    81c8:	e59f3068 	ldr	r3, [pc, #104]	; 8238 <file_filter+0x168>
    81cc:	e79c3003 	ldr	r3, [ip, r3]
    81d0:	e5933000 	ldr	r3, [r3]
    81d4:	e3530000 	cmp	r3, #0
    81d8:	0a000003 	beq	81ec <file_filter+0x11c>
	    printf ("%s: close fd/handle %d\n", a->fname, FD2INT (f));
    81dc:	e59f0058 	ldr	r0, [pc, #88]	; 823c <file_filter+0x16c>
    81e0:	e2841036 	add	r1, r4, #54	; 0x36
    81e4:	e08f0000 	add	r0, pc, r0
    81e8:	eb002485 	bl	11404 <tfp_printf>
      xfree (a); /* We can free our context now. */
    81ec:	e1a00004 	mov	r0, r4
    81f0:	eb001b7d 	bl	efec <xfree>
  int rc = 0;
    81f4:	e3a00000 	mov	r0, #0
    81f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
          a->npeeked += n;
    81fc:	e5d02034 	ldrb	r2, [r0, #52]	; 0x34
      if (n > 0)
    8200:	e3a03000 	mov	r3, #0
    8204:	e1530003 	cmp	r3, r3
      memcpy (buf, a->peeked, size);
    8208:	e2801014 	add	r1, r0, #20
          a->eof_seen = 1;
    820c:	03a03001 	moveq	r3, #1
    8210:	0580300c 	streq	r3, [r0, #12]
      memcpy (buf, a->peeked, size);
    8214:	e1a00005 	mov	r0, r5
      size = a->npeeked < size? a->npeeked : size;
    8218:	e1520007 	cmp	r2, r7
    821c:	31a07002 	movcc	r7, r2
      memcpy (buf, a->peeked, size);
    8220:	e1a02007 	mov	r2, r7
    8224:	eb001baa 	bl	f0d4 <memcpy>
      *ret_len = size;
    8228:	e5867000 	str	r7, [r6]
      rc = 0;  /* Return success - the user needs to check ret_len.  */
    822c:	e3a00000 	mov	r0, #0
    8230:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8234:	000338d0 	.word	0x000338d0
    8238:	0000001c 	.word	0x0000001c
    823c:	0000dd74 	.word	0x0000dd74

00008240 <filter_flush>:
{
    8240:	e92d4030 	push	{r4, r5, lr}
    8244:	e1a04000 	mov	r4, r0
  if (a->use == IOBUF_OUTPUT_TEMP)
    8248:	e5d03000 	ldrb	r3, [r0]
{
    824c:	e24dd014 	sub	sp, sp, #20
    8250:	e59f20f4 	ldr	r2, [pc, #244]	; 834c <filter_flush+0x10c>
  if (a->use == IOBUF_OUTPUT_TEMP)
    8254:	e3530003 	cmp	r3, #3
{
    8258:	e08f2002 	add	r2, pc, r2
  if (a->use == IOBUF_OUTPUT_TEMP)
    825c:	0a000021 	beq	82e8 <filter_flush+0xa8>
  else if (a->use != IOBUF_OUTPUT)
    8260:	e3530002 	cmp	r3, #2
    8264:	1a00001a 	bne	82d4 <filter_flush+0x94>
  else if (!a->filter)
    8268:	e590502c 	ldr	r5, [r0, #44]	; 0x2c
    826c:	e3550000 	cmp	r5, #0
    8270:	0a000030 	beq	8338 <filter_flush+0xf8>
  len = a->d.len;
    8274:	e594101c 	ldr	r1, [r4, #28]
  rc = a->filter (a->filter_ov, IOBUFCTRL_FLUSH, a->chain, a->d.buf, &len);
    8278:	e28d200c 	add	r2, sp, #12
    827c:	e5943020 	ldr	r3, [r4, #32]
  len = a->d.len;
    8280:	e58d100c 	str	r1, [sp, #12]
  rc = a->filter (a->filter_ov, IOBUFCTRL_FLUSH, a->chain, a->d.buf, &len);
    8284:	e3a01004 	mov	r1, #4
    8288:	e58d2000 	str	r2, [sp]
    828c:	e594203c 	ldr	r2, [r4, #60]	; 0x3c
    8290:	e5940030 	ldr	r0, [r4, #48]	; 0x30
    8294:	e12fff35 	blx	r5
  if (!rc && len != a->d.len)
    8298:	e3500000 	cmp	r0, #0
    a->error = rc;
    829c:	15840028 	strne	r0, [r4, #40]	; 0x28
  if (!rc && len != a->d.len)
    82a0:	1a000007 	bne	82c4 <filter_flush+0x84>
    82a4:	e594201c 	ldr	r2, [r4, #28]
    82a8:	e59d300c 	ldr	r3, [sp, #12]
    82ac:	e1520003 	cmp	r2, r3
    82b0:	0a000003 	beq	82c4 <filter_flush+0x84>
      printf ("filter_flush did not write all!\n");
    82b4:	e59f0094 	ldr	r0, [pc, #148]	; 8350 <filter_flush+0x110>
    82b8:	e08f0000 	add	r0, pc, r0
    82bc:	eb002450 	bl	11404 <tfp_printf>
      rc = GPG_ERR_INTERNAL;
    82c0:	e3a0003f 	mov	r0, #63	; 0x3f
  a->d.len = 0;
    82c4:	e3a03000 	mov	r3, #0
    82c8:	e584301c 	str	r3, [r4, #28]
}
    82cc:	e28dd014 	add	sp, sp, #20
    82d0:	e8bd8030 	pop	{r4, r5, pc}
    printf ("flush on non-output iobuf\n");
    82d4:	e59f0078 	ldr	r0, [pc, #120]	; 8354 <filter_flush+0x114>
    82d8:	e08f0000 	add	r0, pc, r0
    82dc:	eb002448 	bl	11404 <tfp_printf>
  rc = a->filter (a->filter_ov, IOBUFCTRL_FLUSH, a->chain, a->d.buf, &len);
    82e0:	e594502c 	ldr	r5, [r4, #44]	; 0x2c
    82e4:	eaffffe2 	b	8274 <filter_flush+0x34>
      if (DBG_IOBUF)
    82e8:	e59f3068 	ldr	r3, [pc, #104]	; 8358 <filter_flush+0x118>
      size_t newsize = a->d.size + IOBUF_BUFFER_SIZE;
    82ec:	e5901014 	ldr	r1, [r0, #20]
      if (DBG_IOBUF)
    82f0:	e7923003 	ldr	r3, [r2, r3]
      size_t newsize = a->d.size + IOBUF_BUFFER_SIZE;
    82f4:	e2815a02 	add	r5, r1, #8192	; 0x2000
      if (DBG_IOBUF)
    82f8:	e5933000 	ldr	r3, [r3]
    82fc:	e3530000 	cmp	r3, #0
    8300:	1a000007 	bne	8324 <filter_flush+0xe4>
      a->d.buf = xrealloc (a->d.buf, newsize);
    8304:	e5940020 	ldr	r0, [r4, #32]
    8308:	e1a01005 	mov	r1, r5
    830c:	eb001b79 	bl	f0f8 <xrealloc>
    8310:	e5840020 	str	r0, [r4, #32]
      return 0;
    8314:	e3a00000 	mov	r0, #0
      a->d.size = newsize;
    8318:	e5845014 	str	r5, [r4, #20]
}
    831c:	e28dd014 	add	sp, sp, #20
    8320:	e8bd8030 	pop	{r4, r5, pc}
	printf ("increasing temp iobuf from %lu to %lu\n",
    8324:	e59f0030 	ldr	r0, [pc, #48]	; 835c <filter_flush+0x11c>
    8328:	e1a02005 	mov	r2, r5
    832c:	e08f0000 	add	r0, pc, r0
    8330:	eb002433 	bl	11404 <tfp_printf>
    8334:	eafffff2 	b	8304 <filter_flush+0xc4>
    printf ("filter_flush: no filter\n");
    8338:	e59f0020 	ldr	r0, [pc, #32]	; 8360 <filter_flush+0x120>
    833c:	e08f0000 	add	r0, pc, r0
    8340:	eb00242f 	bl	11404 <tfp_printf>
  rc = a->filter (a->filter_ov, IOBUFCTRL_FLUSH, a->chain, a->d.buf, &len);
    8344:	e594502c 	ldr	r5, [r4, #44]	; 0x2c
    8348:	eaffffc9 	b	8274 <filter_flush+0x34>
    834c:	00033764 	.word	0x00033764
    8350:	0000dd18 	.word	0x0000dd18
    8354:	0000dcc0 	.word	0x0000dcc0
    8358:	0000001c 	.word	0x0000001c
    835c:	0000dc44 	.word	0x0000dc44
    8360:	0000dc78 	.word	0x0000dc78

00008364 <print_chain.part.0>:
print_chain (iobuf_t a)
    8364:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for (; a; a = a->chain)
    8368:	e2504000 	subs	r4, r0, #0
print_chain (iobuf_t a)
    836c:	e24dd03c 	sub	sp, sp, #60	; 0x3c
  for (; a; a = a->chain)
    8370:	0a000026 	beq	8410 <print_chain.part.0+0xac>
    memcpy (buf, "?", 2);
    8374:	e59fb09c 	ldr	fp, [pc, #156]	; 8418 <print_chain.part.0+0xb4>
    8378:	e28d6018 	add	r6, sp, #24
      printf ("iobuf chain: %d.%d '%s' filter_eof=%d start=%d len=%d\n",
    837c:	e59fa098 	ldr	sl, [pc, #152]	; 841c <print_chain.part.0+0xb8>
  size_t len = MAX_IOBUF_DESC;
    8380:	e3a09020 	mov	r9, #32
    memcpy (buf, "?", 2);
    8384:	e08fb00b 	add	fp, pc, fp
      printf ("iobuf chain: %d.%d '%s' filter_eof=%d start=%d len=%d\n",
    8388:	e08fa00a 	add	sl, pc, sl
    838c:	ea000010 	b	83d4 <print_chain.part.0+0x70>
    a->filter (a->filter_ov, IOBUFCTRL_DESC, NULL, buf, &len);
    8390:	e5940030 	ldr	r0, [r4, #48]	; 0x30
    8394:	e58dc000 	str	ip, [sp]
    8398:	e12fff35 	blx	r5
      printf ("iobuf chain: %d.%d '%s' filter_eof=%d start=%d len=%d\n",
    839c:	e594201c 	ldr	r2, [r4, #28]
    83a0:	e1a03006 	mov	r3, r6
    83a4:	e1a01007 	mov	r1, r7
    83a8:	e1a0000a 	mov	r0, sl
    83ac:	e58d2008 	str	r2, [sp, #8]
    83b0:	e5942018 	ldr	r2, [r4, #24]
    83b4:	e58d2004 	str	r2, [sp, #4]
    83b8:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    83bc:	e58d2000 	str	r2, [sp]
    83c0:	e1a02008 	mov	r2, r8
    83c4:	eb00240e 	bl	11404 <tfp_printf>
  for (; a; a = a->chain)
    83c8:	e594403c 	ldr	r4, [r4, #60]	; 0x3c
    83cc:	e3540000 	cmp	r4, #0
    83d0:	0a00000e 	beq	8410 <print_chain.part.0+0xac>
  if (! a || ! a->filter)
    83d4:	e594502c 	ldr	r5, [r4, #44]	; 0x2c
    a->filter (a->filter_ov, IOBUFCTRL_DESC, NULL, buf, &len);
    83d8:	e28dc014 	add	ip, sp, #20
      printf ("iobuf chain: %d.%d '%s' filter_eof=%d start=%d len=%d\n",
    83dc:	e5947040 	ldr	r7, [r4, #64]	; 0x40
    a->filter (a->filter_ov, IOBUFCTRL_DESC, NULL, buf, &len);
    83e0:	e1a03006 	mov	r3, r6
      printf ("iobuf chain: %d.%d '%s' filter_eof=%d start=%d len=%d\n",
    83e4:	e5948044 	ldr	r8, [r4, #68]	; 0x44
  if (! a || ! a->filter)
    83e8:	e3550000 	cmp	r5, #0
  size_t len = MAX_IOBUF_DESC;
    83ec:	e58d9014 	str	r9, [sp, #20]
    a->filter (a->filter_ov, IOBUFCTRL_DESC, NULL, buf, &len);
    83f0:	e3a02000 	mov	r2, #0
    83f4:	e3a01005 	mov	r1, #5
  if (! a || ! a->filter)
    83f8:	1affffe4 	bne	8390 <print_chain.part.0+0x2c>
    memcpy (buf, "?", 2);
    83fc:	e3a02002 	mov	r2, #2
    8400:	e1a0100b 	mov	r1, fp
    8404:	e1a00006 	mov	r0, r6
    8408:	eb001b31 	bl	f0d4 <memcpy>
    840c:	eaffffe2 	b	839c <print_chain.part.0+0x38>
}
    8410:	e28dd03c 	add	sp, sp, #60	; 0x3c
    8414:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8418:	0000dc70 	.word	0x0000dc70
    841c:	0000dc70 	.word	0x0000dc70

00008420 <fd_cache_open>:
{
    8420:	e92d4070 	push	{r4, r5, r6, lr}
    8424:	e1a04000 	mov	r4, r0
  printf ("fd_cache_open (%s) not cached\n", fname);
    8428:	e59f0090 	ldr	r0, [pc, #144]	; 84c0 <fd_cache_open+0xa0>
{
    842c:	e1a05001 	mov	r5, r1
  printf ("fd_cache_open (%s) not cached\n", fname);
    8430:	e1a01004 	mov	r1, r4
    8434:	e08f0000 	add	r0, pc, r0
    8438:	eb0023f1 	bl	11404 <tfp_printf>
  if (strchr (mode, '+'))
    843c:	e3a0102b 	mov	r1, #43	; 0x2b
    8440:	e1a00005 	mov	r0, r5
    8444:	eb001b83 	bl	f258 <strchr>
    8448:	e3500000 	cmp	r0, #0
    844c:	0a000010 	beq	8494 <fd_cache_open+0x74>
      if (fd_cache_invalidate (fname))
    8450:	e1a00004 	mov	r0, r4
    8454:	ebffff07 	bl	8078 <fd_cache_invalidate>
    8458:	e3500000 	cmp	r0, #0
      oflag = O_RDWR;
    845c:	03a06002 	moveq	r6, #2
      if (fd_cache_invalidate (fname))
    8460:	1a000009 	bne	848c <fd_cache_open+0x6c>
  if (strchr (mode, 'b'))
    8464:	e3a01062 	mov	r1, #98	; 0x62
    8468:	e1a00005 	mov	r0, r5
    846c:	eb001b79 	bl	f258 <strchr>
    8470:	e3500000 	cmp	r0, #0
  return open (fname, oflag, cflag);
    8474:	e30021b6 	movw	r2, #438	; 0x1b6
    oflag |= O_BINARY;
    8478:	13866801 	orrne	r6, r6, #65536	; 0x10000
  return open (fname, oflag, cflag);
    847c:	e1a00004 	mov	r0, r4
    8480:	e1a01006 	mov	r1, r6
}
    8484:	e8bd4070 	pop	{r4, r5, r6, lr}
  return open (fname, oflag, cflag);
    8488:	ea001b8e 	b	f2c8 <open>
}
    848c:	e3e00000 	mvn	r0, #0
    8490:	e8bd8070 	pop	{r4, r5, r6, pc}
  else if (strchr (mode, 'w'))
    8494:	e3a01077 	mov	r1, #119	; 0x77
    8498:	e1a00005 	mov	r0, r5
    849c:	eb001b6d 	bl	f258 <strchr>
    84a0:	e2506000 	subs	r6, r0, #0
    84a4:	0affffee 	beq	8464 <fd_cache_open+0x44>
      if (fd_cache_invalidate (fname))
    84a8:	e1a00004 	mov	r0, r4
    84ac:	ebfffef1 	bl	8078 <fd_cache_invalidate>
    84b0:	e3500000 	cmp	r0, #0
    84b4:	1afffff4 	bne	848c <fd_cache_open+0x6c>
      oflag = O_WRONLY | O_CREAT | O_TRUNC;
    84b8:	e3006601 	movw	r6, #1537	; 0x601
    84bc:	eaffffe8 	b	8464 <fd_cache_open+0x44>
    84c0:	0000dbfc 	.word	0x0000dbfc

000084c4 <iobuf_print_chain>:
{
    84c4:	e59f302c 	ldr	r3, [pc, #44]	; 84f8 <iobuf_print_chain+0x34>
  if (!DBG_IOBUF)
    84c8:	e59f202c 	ldr	r2, [pc, #44]	; 84fc <iobuf_print_chain+0x38>
{
    84cc:	e08f3003 	add	r3, pc, r3
  if (!DBG_IOBUF)
    84d0:	e7933002 	ldr	r3, [r3, r2]
    84d4:	e5933000 	ldr	r3, [r3]
    84d8:	e3530000 	cmp	r3, #0
    84dc:	0a000003 	beq	84f0 <iobuf_print_chain+0x2c>
{
    84e0:	e92d4010 	push	{r4, lr}
    84e4:	ebffff9e 	bl	8364 <print_chain.part.0>
}
    84e8:	e3a00000 	mov	r0, #0
    84ec:	e8bd8010 	pop	{r4, pc}
    84f0:	e3a00000 	mov	r0, #0
    84f4:	e12fff1e 	bx	lr
    84f8:	000334f0 	.word	0x000334f0
    84fc:	0000001c 	.word	0x0000001c

00008500 <iobuf_alloc>:
{
    8500:	e1a03000 	mov	r3, r0
    8504:	e92d4030 	push	{r4, r5, lr}
    8508:	e24dd00c 	sub	sp, sp, #12
  printf ("iobuf_alloc use:%d %d\n",use, use == IOBUF_INPUT || use == IOBUF_INPUT_TEMP || use == IOBUF_OUTPUT || use == IOBUF_OUTPUT_TEMP);
    850c:	e59f0098 	ldr	r0, [pc, #152]	; 85ac <iobuf_alloc+0xac>
    8510:	e3530003 	cmp	r3, #3
{
    8514:	e58d1004 	str	r1, [sp, #4]
  printf ("iobuf_alloc use:%d %d\n",use, use == IOBUF_INPUT || use == IOBUF_INPUT_TEMP || use == IOBUF_OUTPUT || use == IOBUF_OUTPUT_TEMP);
    8518:	83a02000 	movhi	r2, #0
    851c:	e08f0000 	add	r0, pc, r0
    8520:	e1a01003 	mov	r1, r3
    8524:	93a02001 	movls	r2, #1
{
    8528:	e1a05003 	mov	r5, r3
  printf ("iobuf_alloc use:%d %d\n",use, use == IOBUF_INPUT || use == IOBUF_INPUT_TEMP || use == IOBUF_OUTPUT || use == IOBUF_OUTPUT_TEMP);
    852c:	eb0023b4 	bl	11404 <tfp_printf>
  if (bufsize == 0)
    8530:	e59d3004 	ldr	r3, [sp, #4]
    8534:	e3530000 	cmp	r3, #0
    8538:	0a000015 	beq	8594 <iobuf_alloc+0x94>
  a = xcalloc (1, sizeof *a);
    853c:	e3a01048 	mov	r1, #72	; 0x48
    8540:	e3a00001 	mov	r0, #1
    8544:	eb001ad1 	bl	f090 <xcalloc>
    8548:	e1a04000 	mov	r4, r0
  a->d.buf = xmalloc (bufsize);
    854c:	e59d0004 	ldr	r0, [sp, #4]
  a->use = use;
    8550:	e5c45000 	strb	r5, [r4]
  a->d.buf = xmalloc (bufsize);
    8554:	eb001ab0 	bl	f01c <xmalloc>
  a->no = ++number;
    8558:	e59f2050 	ldr	r2, [pc, #80]	; 85b0 <iobuf_alloc+0xb0>
  a->subno = 0;
    855c:	e3a01000 	mov	r1, #0
  a->d.size = bufsize;
    8560:	e59d3004 	ldr	r3, [sp, #4]
  a->no = ++number;
    8564:	e08f2002 	add	r2, pc, r2
  a->d.size = bufsize;
    8568:	e5843014 	str	r3, [r4, #20]
  a->no = ++number;
    856c:	e5923000 	ldr	r3, [r2]
  a->d.buf = xmalloc (bufsize);
    8570:	e5840020 	str	r0, [r4, #32]
}
    8574:	e1a00004 	mov	r0, r4
  a->subno = 0;
    8578:	e5841044 	str	r1, [r4, #68]	; 0x44
  a->no = ++number;
    857c:	e2833001 	add	r3, r3, #1
  a->real_fname = NULL;
    8580:	e5841038 	str	r1, [r4, #56]	; 0x38
  a->no = ++number;
    8584:	e5823000 	str	r3, [r2]
    8588:	e5843040 	str	r3, [r4, #64]	; 0x40
}
    858c:	e28dd00c 	add	sp, sp, #12
    8590:	e8bd8030 	pop	{r4, r5, pc}
      printf ("iobuf_alloc() passed a bufsize of 0!\n");
    8594:	e59f0018 	ldr	r0, [pc, #24]	; 85b4 <iobuf_alloc+0xb4>
      bufsize = IOBUF_BUFFER_SIZE;
    8598:	e3a03a02 	mov	r3, #8192	; 0x2000
    859c:	e58d3004 	str	r3, [sp, #4]
      printf ("iobuf_alloc() passed a bufsize of 0!\n");
    85a0:	e08f0000 	add	r0, pc, r0
    85a4:	eb002396 	bl	11404 <tfp_printf>
      bufsize = IOBUF_BUFFER_SIZE;
    85a8:	eaffffe3 	b	853c <iobuf_alloc+0x3c>
    85ac:	0000db34 	.word	0x0000db34
    85b0:	00033a94 	.word	0x00033a94
    85b4:	0000dac8 	.word	0x0000dac8

000085b8 <do_open.constprop.0>:
do_open (const char *fname, int special_filenames,
    85b8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    85bc:	e1a04000 	mov	r4, r0
  printf("do_open %s %d %s", fname, use, opentype);
    85c0:	e59f0190 	ldr	r0, [pc, #400]	; 8758 <do_open.constprop.0+0x1a0>
do_open (const char *fname, int special_filenames,
    85c4:	e24dd030 	sub	sp, sp, #48	; 0x30
    85c8:	e59f818c 	ldr	r8, [pc, #396]	; 875c <do_open.constprop.0+0x1a4>
    85cc:	e1a06001 	mov	r6, r1
  printf("do_open %s %d %s", fname, use, opentype);
    85d0:	e08f0000 	add	r0, pc, r0
    85d4:	e1a01004 	mov	r1, r4
do_open (const char *fname, int special_filenames,
    85d8:	e08f8008 	add	r8, pc, r8
    85dc:	e1a05002 	mov	r5, r2
  printf("do_open %s %d %s", fname, use, opentype);
    85e0:	eb002387 	bl	11404 <tfp_printf>
  size_t len = 0;
    85e4:	e3a03000 	mov	r3, #0
  printf (use == IOBUF_INPUT || use == IOBUF_OUTPUT);
    85e8:	e3a00001 	mov	r0, #1
  size_t len = 0;
    85ec:	e58d3008 	str	r3, [sp, #8]
  printf (use == IOBUF_INPUT || use == IOBUF_OUTPUT);
    85f0:	eb002383 	bl	11404 <tfp_printf>
  if (special_filenames
    85f4:	e3560000 	cmp	r6, #0
    85f8:	0a00002c 	beq	86b0 <do_open.constprop.0+0xf8>
      && (!fname || (*fname == '-' && !fname[1])))
    85fc:	e3540000 	cmp	r4, #0
    8600:	0a000024 	beq	8698 <do_open.constprop.0+0xe0>
    8604:	e5d43000 	ldrb	r3, [r4]
    8608:	e353002d 	cmp	r3, #45	; 0x2d
    860c:	0a00001e 	beq	868c <do_open.constprop.0+0xd4>
      if (fp == GNUPG_INVALID_FD)
    8610:	e3a09000 	mov	r9, #0
  int print_only = 0;
    8614:	e1a06009 	mov	r6, r9
  a = iobuf_alloc (use, IOBUF_BUFFER_SIZE);
    8618:	e3a01a02 	mov	r1, #8192	; 0x2000
    861c:	e1a00005 	mov	r0, r5
    8620:	ebffffb6 	bl	8500 <iobuf_alloc>
    8624:	e1a05000 	mov	r5, r0
  fcx = xmalloc (sizeof *fcx + strlen (fname));
    8628:	e1a00004 	mov	r0, r4
    862c:	eb0028f9 	bl	12a18 <strlen>
    8630:	e2800038 	add	r0, r0, #56	; 0x38
    8634:	eb001a78 	bl	f01c <xmalloc>
  a->filter = file_filter;
    8638:	e59f3120 	ldr	r3, [pc, #288]	; 8760 <do_open.constprop.0+0x1a8>
  file_filter (fcx, IOBUFCTRL_INIT, NULL, NULL, &len);
    863c:	e28d2008 	add	r2, sp, #8
  fcx->fp = fp;
    8640:	e5809000 	str	r9, [r0]
  file_filter (fcx, IOBUFCTRL_INIT, NULL, NULL, &len);
    8644:	e3a01001 	mov	r1, #1
  fcx->print_only_name = print_only;
    8648:	e5806010 	str	r6, [r0, #16]
  fcx = xmalloc (sizeof *fcx + strlen (fname));
    864c:	e1a07000 	mov	r7, r0
  a->filter = file_filter;
    8650:	e7983003 	ldr	r3, [r8, r3]
  a->filter_ov = fcx;
    8654:	e5850030 	str	r0, [r5, #48]	; 0x30
  a->filter = file_filter;
    8658:	e585302c 	str	r3, [r5, #44]	; 0x2c
  file_filter (fcx, IOBUFCTRL_INIT, NULL, NULL, &len);
    865c:	e3a03000 	mov	r3, #0
    8660:	e58d2000 	str	r2, [sp]
    8664:	e1a02003 	mov	r2, r3
    8668:	ebfffe98 	bl	80d0 <file_filter>
  if (DBG_IOBUF)
    866c:	e59f30f0 	ldr	r3, [pc, #240]	; 8764 <do_open.constprop.0+0x1ac>
    8670:	e7983003 	ldr	r3, [r8, r3]
    8674:	e5933000 	ldr	r3, [r3]
    8678:	e3530000 	cmp	r3, #0
    867c:	1a00000f 	bne	86c0 <do_open.constprop.0+0x108>
}
    8680:	e1a00005 	mov	r0, r5
    8684:	e28dd030 	add	sp, sp, #48	; 0x30
    8688:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
      && (!fname || (*fname == '-' && !fname[1])))
    868c:	e5d43001 	ldrb	r3, [r4, #1]
    8690:	e3530000 	cmp	r3, #0
    8694:	1affffdd 	bne	8610 <do_open.constprop.0+0x58>
      if (use == IOBUF_INPUT)
    8698:	e3550000 	cmp	r5, #0
    869c:	1a000022 	bne	872c <do_open.constprop.0+0x174>
	  fname = "[stdin]";
    86a0:	e59f40c0 	ldr	r4, [pc, #192]	; 8768 <do_open.constprop.0+0x1b0>
	  fp = FD_FOR_STDIN;
    86a4:	e1a09005 	mov	r9, r5
	  fname = "[stdin]";
    86a8:	e08f4004 	add	r4, pc, r4
    86ac:	eaffffd9 	b	8618 <do_open.constprop.0+0x60>
  else if (!fname)
    86b0:	e3540000 	cmp	r4, #0
    return NULL;
    86b4:	01a05004 	moveq	r5, r4
  else if (!fname)
    86b8:	1affffd4 	bne	8610 <do_open.constprop.0+0x58>
    86bc:	eaffffef 	b	8680 <do_open.constprop.0+0xc8>
  if (! a || ! a->filter)
    86c0:	e595802c 	ldr	r8, [r5, #44]	; 0x2c
  size_t len = MAX_IOBUF_DESC;
    86c4:	e3a03020 	mov	r3, #32
    printf ("iobuf-%d.%d: open '%s' desc=%s fd=%d\n",
    86c8:	e5959040 	ldr	r9, [r5, #64]	; 0x40
    86cc:	e595a044 	ldr	sl, [r5, #68]	; 0x44
  if (! a || ! a->filter)
    86d0:	e3580000 	cmp	r8, #0
  size_t len = MAX_IOBUF_DESC;
    86d4:	e58d300c 	str	r3, [sp, #12]
  if (! a || ! a->filter)
    86d8:	0a000017 	beq	873c <do_open.constprop.0+0x184>
    a->filter (a->filter_ov, IOBUFCTRL_DESC, NULL, buf, &len);
    86dc:	e5950030 	ldr	r0, [r5, #48]	; 0x30
    86e0:	e28d300c 	add	r3, sp, #12
    86e4:	e58d3000 	str	r3, [sp]
    86e8:	e28d6010 	add	r6, sp, #16
    86ec:	e1a03006 	mov	r3, r6
    86f0:	e3a02000 	mov	r2, #0
    86f4:	e3a01005 	mov	r1, #5
    86f8:	e12fff38 	blx	r8
    printf ("iobuf-%d.%d: open '%s' desc=%s fd=%d\n",
    86fc:	e5973000 	ldr	r3, [r7]
    8700:	e1a0200a 	mov	r2, sl
    8704:	e59f0060 	ldr	r0, [pc, #96]	; 876c <do_open.constprop.0+0x1b4>
    8708:	e1a01009 	mov	r1, r9
    870c:	e58d3004 	str	r3, [sp, #4]
    8710:	e1a03004 	mov	r3, r4
    8714:	e08f0000 	add	r0, pc, r0
    8718:	e58d6000 	str	r6, [sp]
    871c:	eb002338 	bl	11404 <tfp_printf>
}
    8720:	e1a00005 	mov	r0, r5
    8724:	e28dd030 	add	sp, sp, #48	; 0x30
    8728:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
	  fname = "[stdout]";
    872c:	e59f403c 	ldr	r4, [pc, #60]	; 8770 <do_open.constprop.0+0x1b8>
	  fp = FD_FOR_STDOUT;
    8730:	e1a09006 	mov	r9, r6
	  fname = "[stdout]";
    8734:	e08f4004 	add	r4, pc, r4
    8738:	eaffffb6 	b	8618 <do_open.constprop.0+0x60>
    memcpy (buf, "?", 2);
    873c:	e59f1030 	ldr	r1, [pc, #48]	; 8774 <do_open.constprop.0+0x1bc>
    8740:	e28d6010 	add	r6, sp, #16
    8744:	e3a02002 	mov	r2, #2
    8748:	e1a00006 	mov	r0, r6
    874c:	e08f1001 	add	r1, pc, r1
    8750:	eb001a5f 	bl	f0d4 <memcpy>
    8754:	eaffffe8 	b	86fc <do_open.constprop.0+0x144>
    8758:	0000dad4 	.word	0x0000dad4
    875c:	000333e4 	.word	0x000333e4
    8760:	00000044 	.word	0x00000044
    8764:	0000001c 	.word	0x0000001c
    8768:	0000d9e8 	.word	0x0000d9e8
    876c:	0000d9a4 	.word	0x0000d9a4
    8770:	0000d964 	.word	0x0000d964
    8774:	0000d8a8 	.word	0x0000d8a8

00008778 <iobuf_close>:
{
    8778:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for (; a; a = a_chain)
    877c:	e2505000 	subs	r5, r0, #0
{
    8780:	e59f2138 	ldr	r2, [pc, #312]	; 88c0 <iobuf_close+0x148>
    8784:	e24dd03c 	sub	sp, sp, #60	; 0x3c
  size_t dummy_len = 0;
    8788:	e3a06000 	mov	r6, #0
{
    878c:	e08f2002 	add	r2, pc, r2
  size_t dummy_len = 0;
    8790:	e58d6010 	str	r6, [sp, #16]
  for (; a; a = a_chain)
    8794:	0a000045 	beq	88b0 <iobuf_close+0x138>
	printf ("iobuf-%d.%d: close '%s'\n",
    8798:	e59f1124 	ldr	r1, [pc, #292]	; 88c4 <iobuf_close+0x14c>
    879c:	e59f3124 	ldr	r3, [pc, #292]	; 88c8 <iobuf_close+0x150>
    87a0:	e08f1001 	add	r1, pc, r1
    87a4:	e58d1008 	str	r1, [sp, #8]
    87a8:	e7928003 	ldr	r8, [r2, r3]
    memcpy (buf, "?", 2);
    87ac:	e59f3118 	ldr	r3, [pc, #280]	; 88cc <iobuf_close+0x154>
    87b0:	e08f3003 	add	r3, pc, r3
    87b4:	e58d300c 	str	r3, [sp, #12]
    87b8:	ea00001d 	b	8834 <iobuf_close+0xbc>
      if (a->filter && (rc2 = a->filter (a->filter_ov, IOBUFCTRL_FREE,
    87bc:	e594702c 	ldr	r7, [r4, #44]	; 0x2c
    87c0:	e3a03000 	mov	r3, #0
    87c4:	e28dc010 	add	ip, sp, #16
    87c8:	e3a01002 	mov	r1, #2
    87cc:	e1570003 	cmp	r7, r3
    87d0:	0a000009 	beq	87fc <iobuf_close+0x84>
    87d4:	e594203c 	ldr	r2, [r4, #60]	; 0x3c
    87d8:	e5940030 	ldr	r0, [r4, #48]	; 0x30
    87dc:	e58dc000 	str	ip, [sp]
    87e0:	e12fff37 	blx	r7
      if (! rc && rc2)
    87e4:	e16f3f16 	clz	r3, r6
    87e8:	e3500000 	cmp	r0, #0
    87ec:	e1a032a3 	lsr	r3, r3, #5
    87f0:	03a03000 	moveq	r3, #0
    87f4:	e3530000 	cmp	r3, #0
    87f8:	11a06000 	movne	r6, r0
      xfree (a->real_fname);
    87fc:	e5940038 	ldr	r0, [r4, #56]	; 0x38
    8800:	eb0019f9 	bl	efec <xfree>
      if (a->d.buf)
    8804:	e5940020 	ldr	r0, [r4, #32]
	  memset (a->d.buf, 0, a->d.size);	/* erase the buffer */
    8808:	e3a01000 	mov	r1, #0
      if (a->d.buf)
    880c:	e1500001 	cmp	r0, r1
    8810:	0a000003 	beq	8824 <iobuf_close+0xac>
	  memset (a->d.buf, 0, a->d.size);	/* erase the buffer */
    8814:	e5942014 	ldr	r2, [r4, #20]
    8818:	eb0019f6 	bl	eff8 <memset>
	  xfree (a->d.buf);
    881c:	e5940020 	ldr	r0, [r4, #32]
    8820:	eb0019f1 	bl	efec <xfree>
      xfree (a);
    8824:	e1a00004 	mov	r0, r4
    8828:	eb0019ef 	bl	efec <xfree>
  for (; a; a = a_chain)
    882c:	e3550000 	cmp	r5, #0
    8830:	0a00001f 	beq	88b4 <iobuf_close+0x13c>
      if (DBG_IOBUF)
    8834:	e5983000 	ldr	r3, [r8]
    8838:	e1a04005 	mov	r4, r5
      a_chain = a->chain;
    883c:	e595503c 	ldr	r5, [r5, #60]	; 0x3c
      if (DBG_IOBUF)
    8840:	e3530000 	cmp	r3, #0
    8844:	0affffdc 	beq	87bc <iobuf_close+0x44>
  if (! a || ! a->filter)
    8848:	e594902c 	ldr	r9, [r4, #44]	; 0x2c
  size_t len = MAX_IOBUF_DESC;
    884c:	e3a03020 	mov	r3, #32
    8850:	e58d3014 	str	r3, [sp, #20]
    a->filter (a->filter_ov, IOBUFCTRL_DESC, NULL, buf, &len);
    8854:	e28d7018 	add	r7, sp, #24
	printf ("iobuf-%d.%d: close '%s'\n",
    8858:	e594a040 	ldr	sl, [r4, #64]	; 0x40
  if (! a || ! a->filter)
    885c:	e3590000 	cmp	r9, #0
	printf ("iobuf-%d.%d: close '%s'\n",
    8860:	e594b044 	ldr	fp, [r4, #68]	; 0x44
    a->filter (a->filter_ov, IOBUFCTRL_DESC, NULL, buf, &len);
    8864:	e28d2014 	add	r2, sp, #20
    8868:	e1a03007 	mov	r3, r7
  if (! a || ! a->filter)
    886c:	0a00000a 	beq	889c <iobuf_close+0x124>
    a->filter (a->filter_ov, IOBUFCTRL_DESC, NULL, buf, &len);
    8870:	e5940030 	ldr	r0, [r4, #48]	; 0x30
    8874:	e3a01005 	mov	r1, #5
    8878:	e58d2000 	str	r2, [sp]
    887c:	e3a02000 	mov	r2, #0
    8880:	e12fff39 	blx	r9
	printf ("iobuf-%d.%d: close '%s'\n",
    8884:	e59d0008 	ldr	r0, [sp, #8]
    8888:	e1a03007 	mov	r3, r7
    888c:	e1a0200b 	mov	r2, fp
    8890:	e1a0100a 	mov	r1, sl
    8894:	eb0022da 	bl	11404 <tfp_printf>
    8898:	eaffffc7 	b	87bc <iobuf_close+0x44>
    memcpy (buf, "?", 2);
    889c:	e59d100c 	ldr	r1, [sp, #12]
    88a0:	e3a02002 	mov	r2, #2
    88a4:	e1a00007 	mov	r0, r7
    88a8:	eb001a09 	bl	f0d4 <memcpy>
    88ac:	eafffff4 	b	8884 <iobuf_close+0x10c>
  int rc = 0;
    88b0:	e1a06005 	mov	r6, r5
}
    88b4:	e1a00006 	mov	r0, r6
    88b8:	e28dd03c 	add	sp, sp, #60	; 0x3c
    88bc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    88c0:	00033230 	.word	0x00033230
    88c4:	0000d940 	.word	0x0000d940
    88c8:	0000001c 	.word	0x0000001c
    88cc:	0000d844 	.word	0x0000d844

000088d0 <iobuf_temp>:
  return iobuf_alloc (IOBUF_OUTPUT_TEMP, IOBUF_BUFFER_SIZE);
    88d0:	e3a01a02 	mov	r1, #8192	; 0x2000
    88d4:	e3a00003 	mov	r0, #3
    88d8:	eaffff08 	b	8500 <iobuf_alloc>

000088dc <iobuf_temp_with_content>:
{
    88dc:	e92d4070 	push	{r4, r5, r6, lr}
    88e0:	e1a04000 	mov	r4, r0
  a = iobuf_alloc (IOBUF_INPUT_TEMP, length);
    88e4:	e3a00001 	mov	r0, #1
{
    88e8:	e1a06001 	mov	r6, r1
  a = iobuf_alloc (IOBUF_INPUT_TEMP, length);
    88ec:	ebffff03 	bl	8500 <iobuf_alloc>
    88f0:	e1a05000 	mov	r5, r0
  printf ("iobuf_temp_with_content: %d bytes\n", a->d.size);
    88f4:	e59f0044 	ldr	r0, [pc, #68]	; 8940 <iobuf_temp_with_content+0x64>
    88f8:	e5951014 	ldr	r1, [r5, #20]
    88fc:	e08f0000 	add	r0, pc, r0
    8900:	eb0022bf 	bl	11404 <tfp_printf>
  for (i=0; i < length; i++)
    8904:	e3560000 	cmp	r6, #0
    8908:	0a000009 	beq	8934 <iobuf_temp_with_content+0x58>
    890c:	e0841006 	add	r1, r4, r6
    8910:	e2443001 	sub	r3, r4, #1
    8914:	e2411001 	sub	r1, r1, #1
    8918:	e2644001 	rsb	r4, r4, #1
    a->d.buf[i] = buffer[i];
    891c:	e0842003 	add	r2, r4, r3
    8920:	e5f3e001 	ldrb	lr, [r3, #1]!
    8924:	e595c020 	ldr	ip, [r5, #32]
  for (i=0; i < length; i++)
    8928:	e1530001 	cmp	r3, r1
    a->d.buf[i] = buffer[i];
    892c:	e7cce002 	strb	lr, [ip, r2]
  for (i=0; i < length; i++)
    8930:	1afffff9 	bne	891c <iobuf_temp_with_content+0x40>
  a->d.len = length;
    8934:	e585601c 	str	r6, [r5, #28]
}
    8938:	e1a00005 	mov	r0, r5
    893c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8940:	0000d800 	.word	0x0000d800

00008944 <iobuf_is_pipe_filename>:
}
    8944:	e3a00001 	mov	r0, #1
    8948:	e12fff1e 	bx	lr

0000894c <iobuf_open>:
  return do_open (fname, 1, IOBUF_INPUT, "rb", 0);
    894c:	e59f300c 	ldr	r3, [pc, #12]	; 8960 <iobuf_open+0x14>
    8950:	e3a02000 	mov	r2, #0
    8954:	e3a01001 	mov	r1, #1
    8958:	e08f3003 	add	r3, pc, r3
    895c:	eaffff15 	b	85b8 <do_open.constprop.0>
    8960:	0000d7c8 	.word	0x0000d7c8

00008964 <iobuf_create>:
  return do_open (fname, 1, IOBUF_OUTPUT, "wb", mode700);
    8964:	e59f300c 	ldr	r3, [pc, #12]	; 8978 <iobuf_create+0x14>
    8968:	e3a02002 	mov	r2, #2
    896c:	e3a01001 	mov	r1, #1
    8970:	e08f3003 	add	r3, pc, r3
    8974:	eaffff0f 	b	85b8 <do_open.constprop.0>
    8978:	0000d7b4 	.word	0x0000d7b4

0000897c <iobuf_openrw>:
  return do_open (fname, 0, IOBUF_OUTPUT, "r+b", 0);
    897c:	e59f300c 	ldr	r3, [pc, #12]	; 8990 <iobuf_openrw+0x14>
    8980:	e3a02002 	mov	r2, #2
    8984:	e3a01000 	mov	r1, #0
    8988:	e08f3003 	add	r3, pc, r3
    898c:	eaffff09 	b	85b8 <do_open.constprop.0>
    8990:	0000d7a0 	.word	0x0000d7a0

00008994 <iobuf_ioctl>:
{
    8994:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8998:	e1a04000 	mov	r4, r0
  printf("iobuf_ioctl %d %d %d\n",cmd,intval, ptrval);
    899c:	e59f0418 	ldr	r0, [pc, #1048]	; 8dbc <iobuf_ioctl+0x428>
{
    89a0:	e1a05001 	mov	r5, r1
    89a4:	e59f8414 	ldr	r8, [pc, #1044]	; 8dc0 <iobuf_ioctl+0x42c>
    89a8:	e24dd034 	sub	sp, sp, #52	; 0x34
  printf("iobuf_ioctl %d %d %d\n",cmd,intval, ptrval);
    89ac:	e08f0000 	add	r0, pc, r0
{
    89b0:	e1a06002 	mov	r6, r2
    89b4:	e08f8008 	add	r8, pc, r8
    89b8:	e1a07003 	mov	r7, r3
  printf("iobuf_ioctl %d %d %d\n",cmd,intval, ptrval);
    89bc:	eb002290 	bl	11404 <tfp_printf>
  if (cmd == IOBUF_IOCTL_KEEP_OPEN)
    89c0:	e3550001 	cmp	r5, #1
    89c4:	0a000057 	beq	8b28 <iobuf_ioctl+0x194>
  else if (cmd == IOBUF_IOCTL_INVALIDATE_CACHE)
    89c8:	e3550002 	cmp	r5, #2
    89cc:	0a000039 	beq	8ab8 <iobuf_ioctl+0x124>
  else if (cmd == IOBUF_IOCTL_NO_CACHE)
    89d0:	e3550003 	cmp	r5, #3
    89d4:	0a000097 	beq	8c38 <iobuf_ioctl+0x2a4>
  else if (cmd == IOBUF_IOCTL_FSYNC)
    89d8:	e3550004 	cmp	r5, #4
    89dc:	0a00007f 	beq	8be0 <iobuf_ioctl+0x24c>
  else if (cmd == IOBUF_IOCTL_PEEK)
    89e0:	e3550005 	cmp	r5, #5
    89e4:	1a00004c 	bne	8b1c <iobuf_ioctl+0x188>
      if (DBG_IOBUF)
    89e8:	e59f33d4 	ldr	r3, [pc, #980]	; 8dc4 <iobuf_ioctl+0x430>
    89ec:	e7983003 	ldr	r3, [r8, r3]
    89f0:	e5933000 	ldr	r3, [r3]
    89f4:	e3530000 	cmp	r3, #0
    89f8:	0a000016 	beq	8a58 <iobuf_ioctl+0xc4>
	printf ("iobuf-%d.%d: ioctl '%s' peek\n",
    89fc:	e3540000 	cmp	r4, #0
    8a00:	0a0000d9 	beq	8d6c <iobuf_ioctl+0x3d8>
  if (! a || ! a->filter)
    8a04:	e594a02c 	ldr	sl, [r4, #44]	; 0x2c
  size_t len = MAX_IOBUF_DESC;
    8a08:	e3a03020 	mov	r3, #32
	printf ("iobuf-%d.%d: ioctl '%s' peek\n",
    8a0c:	e594b040 	ldr	fp, [r4, #64]	; 0x40
    8a10:	e5949044 	ldr	r9, [r4, #68]	; 0x44
  if (! a || ! a->filter)
    8a14:	e35a0000 	cmp	sl, #0
  size_t len = MAX_IOBUF_DESC;
    8a18:	e58d300c 	str	r3, [sp, #12]
  if (! a || ! a->filter)
    8a1c:	0a0000d6 	beq	8d7c <iobuf_ioctl+0x3e8>
    a->filter (a->filter_ov, IOBUFCTRL_DESC, NULL, buf, &len);
    8a20:	e5940030 	ldr	r0, [r4, #48]	; 0x30
    8a24:	e28d300c 	add	r3, sp, #12
    8a28:	e58d3000 	str	r3, [sp]
    8a2c:	e1a01005 	mov	r1, r5
    8a30:	e28d5010 	add	r5, sp, #16
    8a34:	e3a02000 	mov	r2, #0
    8a38:	e1a03005 	mov	r3, r5
    8a3c:	e12fff3a 	blx	sl
	printf ("iobuf-%d.%d: ioctl '%s' peek\n",
    8a40:	e59f0380 	ldr	r0, [pc, #896]	; 8dc8 <iobuf_ioctl+0x434>
    8a44:	e1a03005 	mov	r3, r5
    8a48:	e1a02009 	mov	r2, r9
    8a4c:	e1a0100b 	mov	r1, fp
    8a50:	e08f0000 	add	r0, pc, r0
    8a54:	eb00226a 	bl	11404 <tfp_printf>
      if (a->filter == file_filter && ptrval && intval)
    8a58:	e59f336c 	ldr	r3, [pc, #876]	; 8dcc <iobuf_ioctl+0x438>
    8a5c:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
    8a60:	e7983003 	ldr	r3, [r8, r3]
    8a64:	e1520003 	cmp	r2, r3
    8a68:	1a00002b 	bne	8b1c <iobuf_ioctl+0x188>
    8a6c:	e3570000 	cmp	r7, #0
    8a70:	13560000 	cmpne	r6, #0
    8a74:	0a000028 	beq	8b1c <iobuf_ioctl+0x188>
          printf("iobuf_ioctl file_filter\n");
    8a78:	e59f0350 	ldr	r0, [pc, #848]	; 8dd0 <iobuf_ioctl+0x43c>
    8a7c:	e08f0000 	add	r0, pc, r0
    8a80:	eb00225f 	bl	11404 <tfp_printf>
          file_filter_ctx_t *fcx = a->filter_ov;
    8a84:	e5940030 	ldr	r0, [r4, #48]	; 0x30
          if (!file_filter (fcx, IOBUFCTRL_PEEK, NULL, ptrval, &len))
    8a88:	e28d300c 	add	r3, sp, #12
    8a8c:	e58d3000 	str	r3, [sp]
    8a90:	e3a02000 	mov	r2, #0
          size_t len = intval;
    8a94:	e58d600c 	str	r6, [sp, #12]
          if (!file_filter (fcx, IOBUFCTRL_PEEK, NULL, ptrval, &len))
    8a98:	e1a03007 	mov	r3, r7
    8a9c:	e3a01007 	mov	r1, #7
    8aa0:	ebfffd8a 	bl	80d0 <file_filter>
    8aa4:	e3500000 	cmp	r0, #0
    8aa8:	1a00001b 	bne	8b1c <iobuf_ioctl+0x188>
            return (int)len;
    8aac:	e59d000c 	ldr	r0, [sp, #12]
}
    8ab0:	e28dd034 	add	sp, sp, #52	; 0x34
    8ab4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (DBG_IOBUF)
    8ab8:	e59f3304 	ldr	r3, [pc, #772]	; 8dc4 <iobuf_ioctl+0x430>
    8abc:	e7983003 	ldr	r3, [r8, r3]
    8ac0:	e5933000 	ldr	r3, [r3]
    8ac4:	e3530000 	cmp	r3, #0
    8ac8:	1a00003d 	bne	8bc4 <iobuf_ioctl+0x230>
      if (!a && !intval && ptrval)
    8acc:	e2573000 	subs	r3, r7, #0
    8ad0:	e1844006 	orr	r4, r4, r6
    8ad4:	13a03001 	movne	r3, #1
    8ad8:	e3540000 	cmp	r4, #0
    8adc:	13a03000 	movne	r3, #0
    8ae0:	e3530000 	cmp	r3, #0
    8ae4:	0a00000c 	beq	8b1c <iobuf_ioctl+0x188>
	  if (fd_cache_invalidate (ptrval))
    8ae8:	e1a00007 	mov	r0, r7
    8aec:	ebfffd61 	bl	8078 <fd_cache_invalidate>
    8af0:	e2500000 	subs	r0, r0, #0
    8af4:	13a00001 	movne	r0, #1
    8af8:	e2600000 	rsb	r0, r0, #0
}
    8afc:	e28dd034 	add	sp, sp, #52	; 0x34
    8b00:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!a->chain && a->filter == file_filter)
    8b04:	e594003c 	ldr	r0, [r4, #60]	; 0x3c
    8b08:	e3500000 	cmp	r0, #0
    8b0c:	0a000023 	beq	8ba0 <iobuf_ioctl+0x20c>
    8b10:	e1a04000 	mov	r4, r0
      for (; a; a = a->chain)
    8b14:	e3540000 	cmp	r4, #0
    8b18:	1afffff9 	bne	8b04 <iobuf_ioctl+0x170>
  return -1;
    8b1c:	e3e00000 	mvn	r0, #0
}
    8b20:	e28dd034 	add	sp, sp, #52	; 0x34
    8b24:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (DBG_IOBUF)
    8b28:	e59f3294 	ldr	r3, [pc, #660]	; 8dc4 <iobuf_ioctl+0x430>
    8b2c:	e7983003 	ldr	r3, [r8, r3]
    8b30:	e5933000 	ldr	r3, [r3]
    8b34:	e3530000 	cmp	r3, #0
    8b38:	0afffff5 	beq	8b14 <iobuf_ioctl+0x180>
	printf ("iobuf-%d.%d: ioctl '%s' keep_open=%d\n",
    8b3c:	e3540000 	cmp	r4, #0
    8b40:	0a00006b 	beq	8cf4 <iobuf_ioctl+0x360>
  if (! a || ! a->filter)
    8b44:	e594902c 	ldr	r9, [r4, #44]	; 0x2c
  size_t len = MAX_IOBUF_DESC;
    8b48:	e3a03020 	mov	r3, #32
	printf ("iobuf-%d.%d: ioctl '%s' keep_open=%d\n",
    8b4c:	e594a040 	ldr	sl, [r4, #64]	; 0x40
    8b50:	e5947044 	ldr	r7, [r4, #68]	; 0x44
  if (! a || ! a->filter)
    8b54:	e3590000 	cmp	r9, #0
  size_t len = MAX_IOBUF_DESC;
    8b58:	e58d300c 	str	r3, [sp, #12]
  if (! a || ! a->filter)
    8b5c:	0a000068 	beq	8d04 <iobuf_ioctl+0x370>
    a->filter (a->filter_ov, IOBUFCTRL_DESC, NULL, buf, &len);
    8b60:	e5940030 	ldr	r0, [r4, #48]	; 0x30
    8b64:	e28d300c 	add	r3, sp, #12
    8b68:	e58d3000 	str	r3, [sp]
    8b6c:	e28d5010 	add	r5, sp, #16
    8b70:	e1a03005 	mov	r3, r5
    8b74:	e3a02000 	mov	r2, #0
    8b78:	e3a01005 	mov	r1, #5
    8b7c:	e12fff39 	blx	r9
	printf ("iobuf-%d.%d: ioctl '%s' keep_open=%d\n",
    8b80:	e59f024c 	ldr	r0, [pc, #588]	; 8dd4 <iobuf_ioctl+0x440>
    8b84:	e1a03005 	mov	r3, r5
    8b88:	e58d6000 	str	r6, [sp]
    8b8c:	e1a02007 	mov	r2, r7
    8b90:	e08f0000 	add	r0, pc, r0
    8b94:	e1a0100a 	mov	r1, sl
    8b98:	eb002219 	bl	11404 <tfp_printf>
    8b9c:	eaffffdc 	b	8b14 <iobuf_ioctl+0x180>
	if (!a->chain && a->filter == file_filter)
    8ba0:	e59f3224 	ldr	r3, [pc, #548]	; 8dcc <iobuf_ioctl+0x438>
    8ba4:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
    8ba8:	e7983003 	ldr	r3, [r8, r3]
    8bac:	e1520003 	cmp	r2, r3
	    b->keep_open = intval;
    8bb0:	05943030 	ldreq	r3, [r4, #48]	; 0x30
    8bb4:	05836004 	streq	r6, [r3, #4]
	if (!a->chain && a->filter == file_filter)
    8bb8:	0affffcf 	beq	8afc <iobuf_ioctl+0x168>
  return -1;
    8bbc:	e3e00000 	mvn	r0, #0
    8bc0:	eaffffd6 	b	8b20 <iobuf_ioctl+0x18c>
	printf ("iobuf-*.*: ioctl '%s' invalidate\n",
    8bc4:	e3570000 	cmp	r7, #0
    8bc8:	11a01007 	movne	r1, r7
    8bcc:	0a000071 	beq	8d98 <iobuf_ioctl+0x404>
    8bd0:	e59f0200 	ldr	r0, [pc, #512]	; 8dd8 <iobuf_ioctl+0x444>
    8bd4:	e08f0000 	add	r0, pc, r0
    8bd8:	eb002209 	bl	11404 <tfp_printf>
    8bdc:	eaffffba 	b	8acc <iobuf_ioctl+0x138>
      if (DBG_IOBUF)
    8be0:	e59f31dc 	ldr	r3, [pc, #476]	; 8dc4 <iobuf_ioctl+0x430>
    8be4:	e7985003 	ldr	r5, [r8, r3]
    8be8:	e5950000 	ldr	r0, [r5]
    8bec:	e3500000 	cmp	r0, #0
    8bf0:	0a00004a 	beq	8d20 <iobuf_ioctl+0x38c>
        printf ("iobuf-*.*: ioctl '%s' fsync\n",
    8bf4:	e3570000 	cmp	r7, #0
    8bf8:	0a000069 	beq	8da4 <iobuf_ioctl+0x410>
    8bfc:	e59f01d8 	ldr	r0, [pc, #472]	; 8ddc <iobuf_ioctl+0x448>
    8c00:	e1a01007 	mov	r1, r7
    8c04:	e08f0000 	add	r0, pc, r0
    8c08:	eb0021fd 	bl	11404 <tfp_printf>
      if (!a && !intval && ptrval)
    8c0c:	e1943006 	orrs	r3, r4, r6
    8c10:	1affffc1 	bne	8b1c <iobuf_ioctl+0x188>
  if (DBG_IOBUF)
    8c14:	e5950000 	ldr	r0, [r5]
    8c18:	e3500000 	cmp	r0, #0
    8c1c:	0affffb6 	beq	8afc <iobuf_ioctl+0x168>
    printf ("fd_cache_synchronize (%s)\n", fname);
    8c20:	e59f01b8 	ldr	r0, [pc, #440]	; 8de0 <iobuf_ioctl+0x44c>
    8c24:	e1a01007 	mov	r1, r7
    8c28:	e08f0000 	add	r0, pc, r0
    8c2c:	eb0021f4 	bl	11404 <tfp_printf>
          return fd_cache_synchronize (ptrval);
    8c30:	e3a00000 	mov	r0, #0
    8c34:	eaffffb0 	b	8afc <iobuf_ioctl+0x168>
      if (DBG_IOBUF)
    8c38:	e59f3184 	ldr	r3, [pc, #388]	; 8dc4 <iobuf_ioctl+0x430>
    8c3c:	e7983003 	ldr	r3, [r8, r3]
    8c40:	e5933000 	ldr	r3, [r3]
    8c44:	e3530000 	cmp	r3, #0
    8c48:	0a00001c 	beq	8cc0 <iobuf_ioctl+0x32c>
	printf ("iobuf-%d.%d: ioctl '%s' no_cache=%d\n",
    8c4c:	e3540000 	cmp	r4, #0
    8c50:	0a00003a 	beq	8d40 <iobuf_ioctl+0x3ac>
  if (! a || ! a->filter)
    8c54:	e594902c 	ldr	r9, [r4, #44]	; 0x2c
  size_t len = MAX_IOBUF_DESC;
    8c58:	e3a03020 	mov	r3, #32
	printf ("iobuf-%d.%d: ioctl '%s' no_cache=%d\n",
    8c5c:	e594a040 	ldr	sl, [r4, #64]	; 0x40
    8c60:	e5947044 	ldr	r7, [r4, #68]	; 0x44
  if (! a || ! a->filter)
    8c64:	e3590000 	cmp	r9, #0
  size_t len = MAX_IOBUF_DESC;
    8c68:	e58d300c 	str	r3, [sp, #12]
  if (! a || ! a->filter)
    8c6c:	0a000037 	beq	8d50 <iobuf_ioctl+0x3bc>
    a->filter (a->filter_ov, IOBUFCTRL_DESC, NULL, buf, &len);
    8c70:	e5940030 	ldr	r0, [r4, #48]	; 0x30
    8c74:	e28d300c 	add	r3, sp, #12
    8c78:	e58d3000 	str	r3, [sp]
    8c7c:	e28d5010 	add	r5, sp, #16
    8c80:	e1a03005 	mov	r3, r5
    8c84:	e3a02000 	mov	r2, #0
    8c88:	e3a01005 	mov	r1, #5
    8c8c:	e12fff39 	blx	r9
	printf ("iobuf-%d.%d: ioctl '%s' no_cache=%d\n",
    8c90:	e59f014c 	ldr	r0, [pc, #332]	; 8de4 <iobuf_ioctl+0x450>
    8c94:	e1a03005 	mov	r3, r5
    8c98:	e58d6000 	str	r6, [sp]
    8c9c:	e1a02007 	mov	r2, r7
    8ca0:	e08f0000 	add	r0, pc, r0
    8ca4:	e1a0100a 	mov	r1, sl
    8ca8:	eb0021d5 	bl	11404 <tfp_printf>
    8cac:	ea000003 	b	8cc0 <iobuf_ioctl+0x32c>
	if (!a->chain && a->filter == file_filter)
    8cb0:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    8cb4:	e3530000 	cmp	r3, #0
    8cb8:	0a000003 	beq	8ccc <iobuf_ioctl+0x338>
    8cbc:	e1a04003 	mov	r4, r3
      for (; a; a = a->chain)
    8cc0:	e3540000 	cmp	r4, #0
    8cc4:	1afffff9 	bne	8cb0 <iobuf_ioctl+0x31c>
    8cc8:	eaffff93 	b	8b1c <iobuf_ioctl+0x188>
	if (!a->chain && a->filter == file_filter)
    8ccc:	e59f20f8 	ldr	r2, [pc, #248]	; 8dcc <iobuf_ioctl+0x438>
    8cd0:	e594102c 	ldr	r1, [r4, #44]	; 0x2c
    8cd4:	e7982002 	ldr	r2, [r8, r2]
    8cd8:	e1510002 	cmp	r1, r2
	    return 0;
    8cdc:	01a00003 	moveq	r0, r3
	    b->no_cache = intval;
    8ce0:	05942030 	ldreq	r2, [r4, #48]	; 0x30
    8ce4:	05826008 	streq	r6, [r2, #8]
	if (!a->chain && a->filter == file_filter)
    8ce8:	0affff83 	beq	8afc <iobuf_ioctl+0x168>
  return -1;
    8cec:	e3e00000 	mvn	r0, #0
    8cf0:	eaffff8a 	b	8b20 <iobuf_ioctl+0x18c>
	printf ("iobuf-%d.%d: ioctl '%s' keep_open=%d\n",
    8cf4:	e3e07000 	mvn	r7, #0
  size_t len = MAX_IOBUF_DESC;
    8cf8:	e3a03020 	mov	r3, #32
    8cfc:	e58d300c 	str	r3, [sp, #12]
	printf ("iobuf-%d.%d: ioctl '%s' keep_open=%d\n",
    8d00:	e1a0a007 	mov	sl, r7
    memcpy (buf, "?", 2);
    8d04:	e59f10dc 	ldr	r1, [pc, #220]	; 8de8 <iobuf_ioctl+0x454>
    8d08:	e28d5010 	add	r5, sp, #16
    8d0c:	e3a02002 	mov	r2, #2
    8d10:	e1a00005 	mov	r0, r5
    8d14:	e08f1001 	add	r1, pc, r1
    8d18:	eb0018ed 	bl	f0d4 <memcpy>
    8d1c:	eaffff97 	b	8b80 <iobuf_ioctl+0x1ec>
      if (!a && !intval && ptrval)
    8d20:	e2577000 	subs	r7, r7, #0
    8d24:	e1844006 	orr	r4, r4, r6
    8d28:	13a07001 	movne	r7, #1
    8d2c:	e3540000 	cmp	r4, #0
    8d30:	13a07000 	movne	r7, #0
    8d34:	e3570000 	cmp	r7, #0
    8d38:	1affff6f 	bne	8afc <iobuf_ioctl+0x168>
    8d3c:	eaffff76 	b	8b1c <iobuf_ioctl+0x188>
	printf ("iobuf-%d.%d: ioctl '%s' no_cache=%d\n",
    8d40:	e3e07000 	mvn	r7, #0
  size_t len = MAX_IOBUF_DESC;
    8d44:	e3a03020 	mov	r3, #32
    8d48:	e58d300c 	str	r3, [sp, #12]
	printf ("iobuf-%d.%d: ioctl '%s' no_cache=%d\n",
    8d4c:	e1a0a007 	mov	sl, r7
    memcpy (buf, "?", 2);
    8d50:	e59f1094 	ldr	r1, [pc, #148]	; 8dec <iobuf_ioctl+0x458>
    8d54:	e28d5010 	add	r5, sp, #16
    8d58:	e3a02002 	mov	r2, #2
    8d5c:	e1a00005 	mov	r0, r5
    8d60:	e08f1001 	add	r1, pc, r1
    8d64:	eb0018da 	bl	f0d4 <memcpy>
    8d68:	eaffffc8 	b	8c90 <iobuf_ioctl+0x2fc>
	printf ("iobuf-%d.%d: ioctl '%s' peek\n",
    8d6c:	e3e09000 	mvn	r9, #0
  size_t len = MAX_IOBUF_DESC;
    8d70:	e3a03020 	mov	r3, #32
    8d74:	e58d300c 	str	r3, [sp, #12]
	printf ("iobuf-%d.%d: ioctl '%s' peek\n",
    8d78:	e1a0b009 	mov	fp, r9
    memcpy (buf, "?", 2);
    8d7c:	e59f106c 	ldr	r1, [pc, #108]	; 8df0 <iobuf_ioctl+0x45c>
    8d80:	e28d5010 	add	r5, sp, #16
    8d84:	e3a02002 	mov	r2, #2
    8d88:	e1a00005 	mov	r0, r5
    8d8c:	e08f1001 	add	r1, pc, r1
    8d90:	eb0018cf 	bl	f0d4 <memcpy>
    8d94:	eaffff29 	b	8a40 <iobuf_ioctl+0xac>
	printf ("iobuf-*.*: ioctl '%s' invalidate\n",
    8d98:	e59f1054 	ldr	r1, [pc, #84]	; 8df4 <iobuf_ioctl+0x460>
    8d9c:	e08f1001 	add	r1, pc, r1
    8da0:	eaffff8a 	b	8bd0 <iobuf_ioctl+0x23c>
        printf ("iobuf-*.*: ioctl '%s' fsync\n",
    8da4:	e59f104c 	ldr	r1, [pc, #76]	; 8df8 <iobuf_ioctl+0x464>
    8da8:	e59f004c 	ldr	r0, [pc, #76]	; 8dfc <iobuf_ioctl+0x468>
    8dac:	e08f1001 	add	r1, pc, r1
    8db0:	e08f0000 	add	r0, pc, r0
    8db4:	eb002192 	bl	11404 <tfp_printf>
      if (!a && !intval && ptrval)
    8db8:	eaffff57 	b	8b1c <iobuf_ioctl+0x188>
    8dbc:	0000d780 	.word	0x0000d780
    8dc0:	00033008 	.word	0x00033008
    8dc4:	0000001c 	.word	0x0000001c
    8dc8:	0000d7a4 	.word	0x0000d7a4
    8dcc:	00000044 	.word	0x00000044
    8dd0:	0000d798 	.word	0x0000d798
    8dd4:	0000d5b4 	.word	0x0000d5b4
    8dd8:	0000d598 	.word	0x0000d598
    8ddc:	0000d5b4 	.word	0x0000d5b4
    8de0:	0000d5b0 	.word	0x0000d5b0
    8de4:	0000d4f0 	.word	0x0000d4f0
    8de8:	0000d2e0 	.word	0x0000d2e0
    8dec:	0000d294 	.word	0x0000d294
    8df0:	0000d268 	.word	0x0000d268
    8df4:	0000d258 	.word	0x0000d258
    8df8:	0000d484 	.word	0x0000d484
    8dfc:	0000d408 	.word	0x0000d408

00008e00 <iobuf_fdopen>:
{
    8e00:	e1a03001 	mov	r3, r1
  a = iobuf_alloc (strchr (mode, 'w') ? IOBUF_OUTPUT : IOBUF_INPUT,
    8e04:	e3a01077 	mov	r1, #119	; 0x77
{
    8e08:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    8e0c:	e1a07000 	mov	r7, r0
    8e10:	e59f60dc 	ldr	r6, [pc, #220]	; 8ef4 <iobuf_fdopen+0xf4>
    8e14:	e24dd014 	sub	sp, sp, #20
  a = iobuf_alloc (strchr (mode, 'w') ? IOBUF_OUTPUT : IOBUF_INPUT,
    8e18:	e1a00003 	mov	r0, r3
  fcx->keep_open = keep_open;
    8e1c:	e3a08000 	mov	r8, #0
{
    8e20:	e08f6006 	add	r6, pc, r6
  a = iobuf_alloc (strchr (mode, 'w') ? IOBUF_OUTPUT : IOBUF_INPUT,
    8e24:	eb00190b 	bl	f258 <strchr>
    8e28:	e3500000 	cmp	r0, #0
    8e2c:	e3a01a02 	mov	r1, #8192	; 0x2000
    8e30:	13a00002 	movne	r0, #2
    8e34:	01a00008 	moveq	r0, r8
  fcx->print_only_name = 1;
    8e38:	e3a09001 	mov	r9, #1
  a = iobuf_alloc (strchr (mode, 'w') ? IOBUF_OUTPUT : IOBUF_INPUT,
    8e3c:	ebfffdaf 	bl	8500 <iobuf_alloc>
    8e40:	e1a05000 	mov	r5, r0
  fcx = xmalloc (sizeof *fcx + 20);
    8e44:	e3a0004c 	mov	r0, #76	; 0x4c
    8e48:	eb001873 	bl	f01c <xmalloc>
  sprintf (fcx->fname, "[fd %d]", fd);
    8e4c:	e59f10a4 	ldr	r1, [pc, #164]	; 8ef8 <iobuf_fdopen+0xf8>
    8e50:	e1a02007 	mov	r2, r7
  fcx->fp = fp;
    8e54:	e5807000 	str	r7, [r0]
  sprintf (fcx->fname, "[fd %d]", fd);
    8e58:	e2807036 	add	r7, r0, #54	; 0x36
    8e5c:	e08f1001 	add	r1, pc, r1
  fcx = xmalloc (sizeof *fcx + 20);
    8e60:	e1a04000 	mov	r4, r0
  fcx->print_only_name = 1;
    8e64:	e5809010 	str	r9, [r0, #16]
  fcx->keep_open = keep_open;
    8e68:	e5808004 	str	r8, [r0, #4]
  sprintf (fcx->fname, "[fd %d]", fd);
    8e6c:	e1a00007 	mov	r0, r7
    8e70:	eb002173 	bl	11444 <tfp_sprintf>
  a->filter = file_filter;
    8e74:	e59f3080 	ldr	r3, [pc, #128]	; 8efc <iobuf_fdopen+0xfc>
  file_filter (fcx, IOBUFCTRL_INIT, NULL, NULL, &len);
    8e78:	e1a01009 	mov	r1, r9
    8e7c:	e1a00004 	mov	r0, r4
    8e80:	e1a02008 	mov	r2, r8
  a->filter = file_filter;
    8e84:	e7963003 	ldr	r3, [r6, r3]
  a->filter_ov = fcx;
    8e88:	e5854030 	str	r4, [r5, #48]	; 0x30
  a->filter = file_filter;
    8e8c:	e585302c 	str	r3, [r5, #44]	; 0x2c
  file_filter (fcx, IOBUFCTRL_INIT, NULL, NULL, &len);
    8e90:	e28d300c 	add	r3, sp, #12
    8e94:	e58d3000 	str	r3, [sp]
    8e98:	e1a03008 	mov	r3, r8
    8e9c:	ebfffc8b 	bl	80d0 <file_filter>
  if (DBG_IOBUF)
    8ea0:	e59f3058 	ldr	r3, [pc, #88]	; 8f00 <iobuf_fdopen+0x100>
    8ea4:	e7963003 	ldr	r3, [r6, r3]
    8ea8:	e5933000 	ldr	r3, [r3]
    8eac:	e1530008 	cmp	r3, r8
    8eb0:	0a000007 	beq	8ed4 <iobuf_fdopen+0xd4>
    printf ("iobuf-%d.%d: fdopen%s '%s'\n",
    8eb4:	e59f3048 	ldr	r3, [pc, #72]	; 8f04 <iobuf_fdopen+0x104>
    8eb8:	e59f0048 	ldr	r0, [pc, #72]	; 8f08 <iobuf_fdopen+0x108>
    8ebc:	e5952044 	ldr	r2, [r5, #68]	; 0x44
    8ec0:	e5951040 	ldr	r1, [r5, #64]	; 0x40
    8ec4:	e08f3003 	add	r3, pc, r3
    8ec8:	e08f0000 	add	r0, pc, r0
    8ecc:	e58d7000 	str	r7, [sp]
    8ed0:	eb00214b 	bl	11404 <tfp_printf>
  iobuf_ioctl (a, IOBUF_IOCTL_NO_CACHE, 1, NULL);
    8ed4:	e3a03000 	mov	r3, #0
    8ed8:	e3a02001 	mov	r2, #1
    8edc:	e3a01003 	mov	r1, #3
    8ee0:	e1a00005 	mov	r0, r5
    8ee4:	ebfffeaa 	bl	8994 <iobuf_ioctl>
}
    8ee8:	e1a00005 	mov	r0, r5
    8eec:	e28dd014 	add	sp, sp, #20
    8ef0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    8ef4:	00032b9c 	.word	0x00032b9c
    8ef8:	0000d3dc 	.word	0x0000d3dc
    8efc:	00000044 	.word	0x00000044
    8f00:	0000001c 	.word	0x0000001c
    8f04:	0000e35c 	.word	0x0000e35c
    8f08:	0000d378 	.word	0x0000d378

00008f0c <iobuf_push_filter2>:
{
    8f0c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    8f10:	e24dd034 	sub	sp, sp, #52	; 0x34
  if (a->use == IOBUF_OUTPUT && (rc = filter_flush (a)))
    8f14:	e5d0c000 	ldrb	ip, [r0]
{
    8f18:	e1a09003 	mov	r9, r3
    8f1c:	e59f81bc 	ldr	r8, [pc, #444]	; 90e0 <iobuf_push_filter2+0x1d4>
  size_t dummy_len = 0;
    8f20:	e3a03000 	mov	r3, #0
    8f24:	e58d3008 	str	r3, [sp, #8]
  if (a->use == IOBUF_OUTPUT && (rc = filter_flush (a)))
    8f28:	e35c0002 	cmp	ip, #2
{
    8f2c:	e08f8008 	add	r8, pc, r8
    8f30:	e1a04000 	mov	r4, r0
    8f34:	e1a05001 	mov	r5, r1
    8f38:	e1a07002 	mov	r7, r2
  if (a->use == IOBUF_OUTPUT && (rc = filter_flush (a)))
    8f3c:	0a00005c 	beq	90b4 <iobuf_push_filter2+0x1a8>
  if (a->subno >= MAX_NESTING_FILTER)
    8f40:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    8f44:	e353003f 	cmp	r3, #63	; 0x3f
    8f48:	ca000039 	bgt	9034 <iobuf_push_filter2+0x128>
  b = xmalloc (sizeof *b);
    8f4c:	e3a00048 	mov	r0, #72	; 0x48
    8f50:	eb001831 	bl	f01c <xmalloc>
  memcpy (b, a, sizeof *b);
    8f54:	e3a02048 	mov	r2, #72	; 0x48
    8f58:	e1a01004 	mov	r1, r4
  b = xmalloc (sizeof *b);
    8f5c:	e1a06000 	mov	r6, r0
  memcpy (b, a, sizeof *b);
    8f60:	eb00185b 	bl	f0d4 <memcpy>
  if (a->use == IOBUF_OUTPUT_TEMP)
    8f64:	e5d42000 	ldrb	r2, [r4]
  a->filter = NULL;
    8f68:	e3a03000 	mov	r3, #0
    8f6c:	e584302c 	str	r3, [r4, #44]	; 0x2c
  a->filter_ov = NULL;
    8f70:	e5843030 	str	r3, [r4, #48]	; 0x30
  if (a->use == IOBUF_OUTPUT_TEMP)
    8f74:	e3520003 	cmp	r2, #3
  a->filter_ov_owner = 0;
    8f78:	e5843034 	str	r3, [r4, #52]	; 0x34
  a->filter_eof = 0;
    8f7c:	e5843024 	str	r3, [r4, #36]	; 0x24
  if (a->use == IOBUF_OUTPUT_TEMP)
    8f80:	0a000026 	beq	9020 <iobuf_push_filter2+0x114>
  else if (a->use == IOBUF_INPUT_TEMP)
    8f84:	e3520001 	cmp	r2, #1
      a->use = IOBUF_INPUT;
    8f88:	05c43000 	strbeq	r3, [r4]
      a->d.size = IOBUF_BUFFER_SIZE;
    8f8c:	03a00a02 	moveq	r0, #8192	; 0x2000
  a->d.buf = xmalloc (a->d.size);
    8f90:	15940014 	ldrne	r0, [r4, #20]
      a->d.size = IOBUF_BUFFER_SIZE;
    8f94:	05840014 	streq	r0, [r4, #20]
  a->d.buf = xmalloc (a->d.size);
    8f98:	eb00181f 	bl	f01c <xmalloc>
  a->ntotal = b->ntotal + b->nbytes;
    8f9c:	e1c620d8 	ldrd	r2, [r6, #8]
  a->chain = b;
    8fa0:	e584603c 	str	r6, [r4, #60]	; 0x3c
  a->subno = b->subno + 1;
    8fa4:	e5966044 	ldr	r6, [r6, #68]	; 0x44
  a->ntotal = b->ntotal + b->nbytes;
    8fa8:	e0833002 	add	r3, r3, r2
  if (DBG_IOBUF)
    8fac:	e59f2130 	ldr	r2, [pc, #304]	; 90e4 <iobuf_push_filter2+0x1d8>
  a->subno = b->subno + 1;
    8fb0:	e2866001 	add	r6, r6, #1
  a->ntotal = b->ntotal + b->nbytes;
    8fb4:	e584300c 	str	r3, [r4, #12]
  a->d.len = 0;
    8fb8:	e3a03000 	mov	r3, #0
  a->d.buf = xmalloc (a->d.size);
    8fbc:	e5840020 	str	r0, [r4, #32]
  a->filter_ov_owner = rel_ov;
    8fc0:	e5849034 	str	r9, [r4, #52]	; 0x34
  a->filter = f;
    8fc4:	e584502c 	str	r5, [r4, #44]	; 0x2c
  a->filter_ov = ov;
    8fc8:	e5847030 	str	r7, [r4, #48]	; 0x30
  a->subno = b->subno + 1;
    8fcc:	e5846044 	str	r6, [r4, #68]	; 0x44
  a->d.len = 0;
    8fd0:	e584301c 	str	r3, [r4, #28]
  a->d.start = 0;
    8fd4:	e5843018 	str	r3, [r4, #24]
  a->nlimit = a->nbytes = 0;
    8fd8:	e5843008 	str	r3, [r4, #8]
    8fdc:	e5843004 	str	r3, [r4, #4]
  a->nofast = 0;
    8fe0:	e5843010 	str	r3, [r4, #16]
  if (DBG_IOBUF)
    8fe4:	e7988002 	ldr	r8, [r8, r2]
    8fe8:	e5982000 	ldr	r2, [r8]
    8fec:	e1520003 	cmp	r2, r3
    8ff0:	1a000015 	bne	904c <iobuf_push_filter2+0x140>
  if (a->filter && (rc = a->filter (a->filter_ov, IOBUFCTRL_INIT, a->chain,
    8ff4:	e3550000 	cmp	r5, #0
    8ff8:	0a000006 	beq	9018 <iobuf_push_filter2+0x10c>
    8ffc:	e594203c 	ldr	r2, [r4, #60]	; 0x3c
    9000:	e28d1008 	add	r1, sp, #8
    9004:	e5940030 	ldr	r0, [r4, #48]	; 0x30
    9008:	e3a03000 	mov	r3, #0
    900c:	e58d1000 	str	r1, [sp]
    9010:	e3a01001 	mov	r1, #1
    9014:	e12fff35 	blx	r5
}
    9018:	e28dd034 	add	sp, sp, #52	; 0x34
    901c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
      a->d.size = IOBUF_BUFFER_SIZE;
    9020:	e3a00a02 	mov	r0, #8192	; 0x2000
      a->use = IOBUF_OUTPUT;
    9024:	e3a03002 	mov	r3, #2
      a->d.size = IOBUF_BUFFER_SIZE;
    9028:	e5840014 	str	r0, [r4, #20]
      a->use = IOBUF_OUTPUT;
    902c:	e5c43000 	strb	r3, [r4]
      a->d.size = IOBUF_BUFFER_SIZE;
    9030:	eaffffd8 	b	8f98 <iobuf_push_filter2+0x8c>
      printf ("i/o filter too deeply nested - corrupted data?\n");
    9034:	e59f00ac 	ldr	r0, [pc, #172]	; 90e8 <iobuf_push_filter2+0x1dc>
    9038:	e08f0000 	add	r0, pc, r0
    903c:	eb0020f0 	bl	11404 <tfp_printf>
      return GPG_ERR_BAD_DATA;
    9040:	e3a00059 	mov	r0, #89	; 0x59
}
    9044:	e28dd034 	add	sp, sp, #52	; 0x34
    9048:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  if (! a || ! a->filter)
    904c:	e1550003 	cmp	r5, r3
  size_t len = MAX_IOBUF_DESC;
    9050:	e3a02020 	mov	r2, #32
      printf ("iobuf-%d.%d: push '%s'\n",
    9054:	e5949040 	ldr	r9, [r4, #64]	; 0x40
  size_t len = MAX_IOBUF_DESC;
    9058:	e58d200c 	str	r2, [sp, #12]
  if (! a || ! a->filter)
    905c:	0a000018 	beq	90c4 <iobuf_push_filter2+0x1b8>
    a->filter (a->filter_ov, IOBUFCTRL_DESC, NULL, buf, &len);
    9060:	e1a02003 	mov	r2, r3
    9064:	e1a00007 	mov	r0, r7
    9068:	e28d300c 	add	r3, sp, #12
    906c:	e28d7010 	add	r7, sp, #16
    9070:	e58d3000 	str	r3, [sp]
    9074:	e3a01005 	mov	r1, #5
    9078:	e1a03007 	mov	r3, r7
    907c:	e12fff35 	blx	r5
      printf ("iobuf-%d.%d: push '%s'\n",
    9080:	e59f0064 	ldr	r0, [pc, #100]	; 90ec <iobuf_push_filter2+0x1e0>
    9084:	e1a03007 	mov	r3, r7
    9088:	e1a02006 	mov	r2, r6
    908c:	e1a01009 	mov	r1, r9
    9090:	e08f0000 	add	r0, pc, r0
    9094:	eb0020da 	bl	11404 <tfp_printf>
  if (!DBG_IOBUF)
    9098:	e5983000 	ldr	r3, [r8]
    909c:	e3530000 	cmp	r3, #0
    90a0:	0a000001 	beq	90ac <iobuf_push_filter2+0x1a0>
    90a4:	e1a00004 	mov	r0, r4
    90a8:	ebfffcad 	bl	8364 <print_chain.part.0>
  if (a->filter && (rc = a->filter (a->filter_ov, IOBUFCTRL_INIT, a->chain,
    90ac:	e594502c 	ldr	r5, [r4, #44]	; 0x2c
    90b0:	eaffffcf 	b	8ff4 <iobuf_push_filter2+0xe8>
  if (a->use == IOBUF_OUTPUT && (rc = filter_flush (a)))
    90b4:	ebfffc61 	bl	8240 <filter_flush>
    90b8:	e3500000 	cmp	r0, #0
    90bc:	0affff9f 	beq	8f40 <iobuf_push_filter2+0x34>
    90c0:	eaffffd4 	b	9018 <iobuf_push_filter2+0x10c>
    memcpy (buf, "?", 2);
    90c4:	e59f1024 	ldr	r1, [pc, #36]	; 90f0 <iobuf_push_filter2+0x1e4>
    90c8:	e28d7010 	add	r7, sp, #16
    90cc:	e3a02002 	mov	r2, #2
    90d0:	e1a00007 	mov	r0, r7
    90d4:	e08f1001 	add	r1, pc, r1
    90d8:	eb0017fd 	bl	f0d4 <memcpy>
    90dc:	eaffffe7 	b	9080 <iobuf_push_filter2+0x174>
    90e0:	00032a90 	.word	0x00032a90
    90e4:	0000001c 	.word	0x0000001c
    90e8:	0000d224 	.word	0x0000d224
    90ec:	0000d1fc 	.word	0x0000d1fc
    90f0:	0000cf20 	.word	0x0000cf20

000090f4 <iobuf_push_filter>:
  return iobuf_push_filter2 (a, f, ov, 0);
    90f4:	e3a03000 	mov	r3, #0
    90f8:	eaffff83 	b	8f0c <iobuf_push_filter2>

000090fc <iobuf_pop_filter>:
{
    90fc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9100:	e1a06000 	mov	r6, r0
  printf("iobuf_pop_filter %d %d",a->nbytes);
    9104:	e59f02b4 	ldr	r0, [pc, #692]	; 93c0 <iobuf_pop_filter+0x2c4>
{
    9108:	e24dd034 	sub	sp, sp, #52	; 0x34
    910c:	e59f42b0 	ldr	r4, [pc, #688]	; 93c4 <iobuf_pop_filter+0x2c8>
    9110:	e1a08001 	mov	r8, r1
  printf("iobuf_pop_filter %d %d",a->nbytes);
    9114:	e08f0000 	add	r0, pc, r0
{
    9118:	e1a09002 	mov	r9, r2
  printf("iobuf_pop_filter %d %d",a->nbytes);
    911c:	e5961008 	ldr	r1, [r6, #8]
{
    9120:	e08f4004 	add	r4, pc, r4
  printf("iobuf_pop_filter %d %d",a->nbytes);
    9124:	eb0020b6 	bl	11404 <tfp_printf>
  if (DBG_IOBUF)
    9128:	e59f1298 	ldr	r1, [pc, #664]	; 93c8 <iobuf_pop_filter+0x2cc>
  size_t dummy_len = 0;
    912c:	e3a02000 	mov	r2, #0
    9130:	e58d2008 	str	r2, [sp, #8]
{
    9134:	e1a03004 	mov	r3, r4
  if (DBG_IOBUF)
    9138:	e7947001 	ldr	r7, [r4, r1]
    913c:	e5973000 	ldr	r3, [r7]
    9140:	e1530002 	cmp	r3, r2
    9144:	1a000039 	bne	9230 <iobuf_pop_filter+0x134>
  if (a->use == IOBUF_INPUT_TEMP || a->use == IOBUF_OUTPUT_TEMP)
    9148:	e5d62000 	ldrb	r2, [r6]
    914c:	e20230fd 	and	r3, r2, #253	; 0xfd
    9150:	e3530001 	cmp	r3, #1
    9154:	0a00002e 	beq	9214 <iobuf_pop_filter+0x118>
  if (!a->filter)
    9158:	e596502c 	ldr	r5, [r6, #44]	; 0x2c
    915c:	e3550000 	cmp	r5, #0
    9160:	11a04006 	movne	r4, r6
    9164:	1a000004 	bne	917c <iobuf_pop_filter+0x80>
    9168:	ea00007c 	b	9360 <iobuf_pop_filter+0x264>
  for (b = a; b; b = b->chain)
    916c:	e594403c 	ldr	r4, [r4, #60]	; 0x3c
    9170:	e3540000 	cmp	r4, #0
    9174:	0a00006d 	beq	9330 <iobuf_pop_filter+0x234>
    if (b->filter == f && (!ov || b->filter_ov == ov))
    9178:	e594502c 	ldr	r5, [r4, #44]	; 0x2c
    917c:	e1580005 	cmp	r8, r5
    9180:	1afffff9 	bne	916c <iobuf_pop_filter+0x70>
    9184:	e3590000 	cmp	r9, #0
    9188:	0a000002 	beq	9198 <iobuf_pop_filter+0x9c>
    918c:	e5943030 	ldr	r3, [r4, #48]	; 0x30
    9190:	e1530009 	cmp	r3, r9
    9194:	1afffff4 	bne	916c <iobuf_pop_filter+0x70>
  if (a->use == IOBUF_OUTPUT && (rc = filter_flush (b)))
    9198:	e3520002 	cmp	r2, #2
    919c:	0a000038 	beq	9284 <iobuf_pop_filter+0x188>
  if (b->filter && (rc = b->filter (b->filter_ov, IOBUFCTRL_FREE, b->chain,
    91a0:	e594502c 	ldr	r5, [r4, #44]	; 0x2c
    91a4:	e3550000 	cmp	r5, #0
    91a8:	0a000008 	beq	91d0 <iobuf_pop_filter+0xd4>
    91ac:	e594203c 	ldr	r2, [r4, #60]	; 0x3c
    91b0:	e28d3008 	add	r3, sp, #8
    91b4:	e5940030 	ldr	r0, [r4, #48]	; 0x30
    91b8:	e3a01002 	mov	r1, #2
    91bc:	e58d3000 	str	r3, [sp]
    91c0:	e3a03000 	mov	r3, #0
    91c4:	e12fff35 	blx	r5
    91c8:	e3500000 	cmp	r0, #0
    91cc:	1a00000e 	bne	920c <iobuf_pop_filter+0x110>
  if (b->filter_ov && b->filter_ov_owner)
    91d0:	e5940030 	ldr	r0, [r4, #48]	; 0x30
    91d4:	e3500000 	cmp	r0, #0
    91d8:	0a000002 	beq	91e8 <iobuf_pop_filter+0xec>
    91dc:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    91e0:	e3530000 	cmp	r3, #0
    91e4:	1a00002b 	bne	9298 <iobuf_pop_filter+0x19c>
  if (a == b && !b->chain)
    91e8:	e1560004 	cmp	r6, r4
    91ec:	0a000034 	beq	92c4 <iobuf_pop_filter+0x1c8>
  else if (!b->chain)
    91f0:	e594503c 	ldr	r5, [r4, #60]	; 0x3c
    91f4:	e3550000 	cmp	r5, #0
    91f8:	0a000053 	beq	934c <iobuf_pop_filter+0x250>
      printf ("Ohh jeee, trying to remove an intermediate filter\n");
    91fc:	e59f01c8 	ldr	r0, [pc, #456]	; 93cc <iobuf_pop_filter+0x2d0>
    9200:	e08f0000 	add	r0, pc, r0
    9204:	eb00207e 	bl	11404 <tfp_printf>
  return rc;
    9208:	e3a00000 	mov	r0, #0
}
    920c:	e28dd034 	add	sp, sp, #52	; 0x34
    9210:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
      printf (! a->chain);
    9214:	e596003c 	ldr	r0, [r6, #60]	; 0x3c
    9218:	e16f0f10 	clz	r0, r0
    921c:	e1a002a0 	lsr	r0, r0, #5
    9220:	eb002077 	bl	11404 <tfp_printf>
      return 0;
    9224:	e3a00000 	mov	r0, #0
}
    9228:	e28dd034 	add	sp, sp, #52	; 0x34
    922c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (! a || ! a->filter)
    9230:	e596402c 	ldr	r4, [r6, #44]	; 0x2c
  size_t len = MAX_IOBUF_DESC;
    9234:	e3a03020 	mov	r3, #32
    printf ("iobuf-%d.%d: pop '%s'\n",
    9238:	e5965040 	ldr	r5, [r6, #64]	; 0x40
  if (! a || ! a->filter)
    923c:	e1540002 	cmp	r4, r2
    printf ("iobuf-%d.%d: pop '%s'\n",
    9240:	e596a044 	ldr	sl, [r6, #68]	; 0x44
  size_t len = MAX_IOBUF_DESC;
    9244:	e58d300c 	str	r3, [sp, #12]
  if (! a || ! a->filter)
    9248:	0a000016 	beq	92a8 <iobuf_pop_filter+0x1ac>
    a->filter (a->filter_ov, IOBUFCTRL_DESC, NULL, buf, &len);
    924c:	e5960030 	ldr	r0, [r6, #48]	; 0x30
    9250:	e28d300c 	add	r3, sp, #12
    9254:	e58d3000 	str	r3, [sp]
    9258:	e28db010 	add	fp, sp, #16
    925c:	e1a0300b 	mov	r3, fp
    9260:	e3a01005 	mov	r1, #5
    9264:	e12fff34 	blx	r4
    printf ("iobuf-%d.%d: pop '%s'\n",
    9268:	e59f0160 	ldr	r0, [pc, #352]	; 93d0 <iobuf_pop_filter+0x2d4>
    926c:	e1a0300b 	mov	r3, fp
    9270:	e1a0200a 	mov	r2, sl
    9274:	e1a01005 	mov	r1, r5
    9278:	e08f0000 	add	r0, pc, r0
    927c:	eb002060 	bl	11404 <tfp_printf>
    9280:	eaffffb0 	b	9148 <iobuf_pop_filter+0x4c>
  if (a->use == IOBUF_OUTPUT && (rc = filter_flush (b)))
    9284:	e1a00004 	mov	r0, r4
    9288:	ebfffbec 	bl	8240 <filter_flush>
    928c:	e3500000 	cmp	r0, #0
    9290:	0affffc2 	beq	91a0 <iobuf_pop_filter+0xa4>
    9294:	eaffffdc 	b	920c <iobuf_pop_filter+0x110>
      xfree (b->filter_ov);
    9298:	eb001753 	bl	efec <xfree>
      b->filter_ov = NULL;
    929c:	e3a03000 	mov	r3, #0
    92a0:	e5843030 	str	r3, [r4, #48]	; 0x30
    92a4:	eaffffcf 	b	91e8 <iobuf_pop_filter+0xec>
    memcpy (buf, "?", 2);
    92a8:	e59f1124 	ldr	r1, [pc, #292]	; 93d4 <iobuf_pop_filter+0x2d8>
    92ac:	e28db010 	add	fp, sp, #16
    92b0:	e3a02002 	mov	r2, #2
    92b4:	e1a0000b 	mov	r0, fp
    92b8:	e08f1001 	add	r1, pc, r1
    92bc:	eb001784 	bl	f0d4 <memcpy>
    92c0:	eaffffe8 	b	9268 <iobuf_pop_filter+0x16c>
  if (a == b && !b->chain)
    92c4:	e596503c 	ldr	r5, [r6, #60]	; 0x3c
    92c8:	e3550000 	cmp	r5, #0
    92cc:	0a000036 	beq	93ac <iobuf_pop_filter+0x2b0>
      xfree (a->d.buf);
    92d0:	e5960020 	ldr	r0, [r6, #32]
    92d4:	eb001744 	bl	efec <xfree>
      xfree (a->real_fname);
    92d8:	e5960038 	ldr	r0, [r6, #56]	; 0x38
    92dc:	eb001742 	bl	efec <xfree>
      memcpy (a, b, sizeof *a);
    92e0:	e3a02048 	mov	r2, #72	; 0x48
    92e4:	e1a01005 	mov	r1, r5
    92e8:	e1a00006 	mov	r0, r6
    92ec:	eb001778 	bl	f0d4 <memcpy>
      xfree (b);
    92f0:	e1a00005 	mov	r0, r5
    92f4:	eb00173c 	bl	efec <xfree>
      printf ("iobuf_pop_filter: removed first filter %d\n",sizeof *a);
    92f8:	e59f00d8 	ldr	r0, [pc, #216]	; 93d8 <iobuf_pop_filter+0x2dc>
    92fc:	e3a01048 	mov	r1, #72	; 0x48
    9300:	e08f0000 	add	r0, pc, r0
    9304:	eb00203e 	bl	11404 <tfp_printf>
      if (DBG_IOBUF)
    9308:	e5970000 	ldr	r0, [r7]
    930c:	e3500000 	cmp	r0, #0
    9310:	0affffbd 	beq	920c <iobuf_pop_filter+0x110>
	printf ("iobuf-%d.%d: popped filter\n", a->no, a->subno);
    9314:	e59f00c0 	ldr	r0, [pc, #192]	; 93dc <iobuf_pop_filter+0x2e0>
    9318:	e5962044 	ldr	r2, [r6, #68]	; 0x44
    931c:	e08f0000 	add	r0, pc, r0
    9320:	e5961040 	ldr	r1, [r6, #64]	; 0x40
    9324:	eb002036 	bl	11404 <tfp_printf>
  return rc;
    9328:	e3a00000 	mov	r0, #0
    932c:	eaffffb6 	b	920c <iobuf_pop_filter+0x110>
    printf ("iobuf_pop_filter(): filter function not found\n");
    9330:	e59f00a8 	ldr	r0, [pc, #168]	; 93e0 <iobuf_pop_filter+0x2e4>
    9334:	e08f0000 	add	r0, pc, r0
    9338:	eb002031 	bl	11404 <tfp_printf>
  if (a->use == IOBUF_OUTPUT && (rc = filter_flush (b)))
    933c:	e5d62000 	ldrb	r2, [r6]
    9340:	e3520002 	cmp	r2, #2
    9344:	1affff95 	bne	91a0 <iobuf_pop_filter+0xa4>
    9348:	eaffffcd 	b	9284 <iobuf_pop_filter+0x188>
      printf ("Ohh jeee, trying to remove a head filter\n");
    934c:	e59f0090 	ldr	r0, [pc, #144]	; 93e4 <iobuf_pop_filter+0x2e8>
    9350:	e08f0000 	add	r0, pc, r0
    9354:	eb00202a 	bl	11404 <tfp_printf>
  return rc;
    9358:	e1a00005 	mov	r0, r5
    935c:	eaffffaa 	b	920c <iobuf_pop_filter+0x110>
      b = a->chain;
    9360:	e596403c 	ldr	r4, [r6, #60]	; 0x3c
      printf (b);
    9364:	e1a00004 	mov	r0, r4
    9368:	eb002025 	bl	11404 <tfp_printf>
      xfree (a->d.buf);
    936c:	e5960020 	ldr	r0, [r6, #32]
    9370:	eb00171d 	bl	efec <xfree>
      xfree (a->real_fname);
    9374:	e5960038 	ldr	r0, [r6, #56]	; 0x38
    9378:	eb00171b 	bl	efec <xfree>
      printf ("iobuf_pop_filter: no filter %d\n",sizeof *a);
    937c:	e59f0064 	ldr	r0, [pc, #100]	; 93e8 <iobuf_pop_filter+0x2ec>
    9380:	e3a01048 	mov	r1, #72	; 0x48
    9384:	e08f0000 	add	r0, pc, r0
    9388:	eb00201d 	bl	11404 <tfp_printf>
      memcpy (a, b, sizeof *a);
    938c:	e3a02048 	mov	r2, #72	; 0x48
    9390:	e1a01004 	mov	r1, r4
    9394:	e1a00006 	mov	r0, r6
    9398:	eb00174d 	bl	f0d4 <memcpy>
      xfree (b);
    939c:	e1a00004 	mov	r0, r4
    93a0:	eb001711 	bl	efec <xfree>
      return 0;
    93a4:	e1a00005 	mov	r0, r5
    93a8:	eaffff97 	b	920c <iobuf_pop_filter+0x110>
    printf ("can't remove the last filter from the chain\n");
    93ac:	e59f0038 	ldr	r0, [pc, #56]	; 93ec <iobuf_pop_filter+0x2f0>
    93b0:	e08f0000 	add	r0, pc, r0
    93b4:	eb002012 	bl	11404 <tfp_printf>
  return rc;
    93b8:	e1a00005 	mov	r0, r5
    printf ("can't remove the last filter from the chain\n");
    93bc:	eaffff92 	b	920c <iobuf_pop_filter+0x110>
    93c0:	0000d190 	.word	0x0000d190
    93c4:	0003289c 	.word	0x0003289c
    93c8:	0000001c 	.word	0x0000001c
    93cc:	0000d198 	.word	0x0000d198
    93d0:	0000d044 	.word	0x0000d044
    93d4:	0000cd3c 	.word	0x0000cd3c
    93d8:	0000d024 	.word	0x0000d024
    93dc:	0000d034 	.word	0x0000d034
    93e0:	0000d098 	.word	0x0000d098
    93e4:	0000d01c 	.word	0x0000d01c
    93e8:	0000cf50 	.word	0x0000cf50
    93ec:	0000cf44 	.word	0x0000cf44

000093f0 <iobuf_readbyte>:
{
    93f0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    93f4:	e24dd01c 	sub	sp, sp, #28
    93f8:	e59f62c4 	ldr	r6, [pc, #708]	; 96c4 <iobuf_readbyte+0x2d4>
    93fc:	e1a04000 	mov	r4, r0
    9400:	e58d000c 	str	r0, [sp, #12]
  if (a->use == IOBUF_OUTPUT || a->use == IOBUF_OUTPUT_TEMP)
    9404:	e5d00000 	ldrb	r0, [r0]
{
    9408:	e08f6006 	add	r6, pc, r6
  if (a->use == IOBUF_OUTPUT || a->use == IOBUF_OUTPUT_TEMP)
    940c:	e2403002 	sub	r3, r0, #2
    9410:	e3530001 	cmp	r3, #1
    9414:	9a00009e 	bls	9694 <iobuf_readbyte+0x2a4>
  if (a->nlimit && a->nbytes >= a->nlimit)
    9418:	e5943004 	ldr	r3, [r4, #4]
    941c:	e3530000 	cmp	r3, #0
    9420:	1a00000d 	bne	945c <iobuf_readbyte+0x6c>
  if (a->d.start < a->d.len)
    9424:	e5941018 	ldr	r1, [r4, #24]
    9428:	e594201c 	ldr	r2, [r4, #28]
    942c:	e1510002 	cmp	r1, r2
    9430:	2a00000e 	bcs	9470 <iobuf_readbyte+0x80>
      c = a->d.buf[a->d.start++];
    9434:	e5943020 	ldr	r3, [r4, #32]
    9438:	e2812001 	add	r2, r1, #1
    943c:	e5842018 	str	r2, [r4, #24]
    9440:	e7d35001 	ldrb	r5, [r3, r1]
  a->nbytes++;
    9444:	e5943008 	ldr	r3, [r4, #8]
    9448:	e2833001 	add	r3, r3, #1
    944c:	e5843008 	str	r3, [r4, #8]
}
    9450:	e1a00005 	mov	r0, r5
    9454:	e28dd01c 	add	sp, sp, #28
    9458:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  if (a->nlimit && a->nbytes >= a->nlimit)
    945c:	e5942008 	ldr	r2, [r4, #8]
    9460:	e1530002 	cmp	r3, r2
    9464:	caffffee 	bgt	9424 <iobuf_readbyte+0x34>
    return -1;			/* EOF */
    9468:	e3e05000 	mvn	r5, #0
    946c:	eafffff7 	b	9450 <iobuf_readbyte+0x60>
  if (a->use == IOBUF_INPUT_TEMP)
    9470:	e3500001 	cmp	r0, #1
    9474:	0afffffb 	beq	9468 <iobuf_readbyte+0x78>
  memmove (a->d.buf, &a->d.buf[a->d.start], a->d.len);
    9478:	e5940020 	ldr	r0, [r4, #32]
  a->d.len -= a->d.start;
    947c:	e0422001 	sub	r2, r2, r1
    9480:	e584201c 	str	r2, [r4, #28]
  memmove (a->d.buf, &a->d.buf[a->d.start], a->d.len);
    9484:	e0801001 	add	r1, r0, r1
    9488:	eb001737 	bl	f16c <memmove>
  if (a->d.len < target && a->filter_eof)
    948c:	e594301c 	ldr	r3, [r4, #28]
  a->d.start = 0;
    9490:	e3a02000 	mov	r2, #0
    9494:	e5842018 	str	r2, [r4, #24]
  if (a->d.len < target && a->filter_eof)
    9498:	e1530002 	cmp	r3, r2
    949c:	0a00000a 	beq	94cc <iobuf_readbyte+0xdc>
  if (a->filter && ! a->filter_eof && ! a->error)
    94a0:	e594502c 	ldr	r5, [r4, #44]	; 0x2c
    94a4:	e3550000 	cmp	r5, #0
    94a8:	0a000073 	beq	967c <iobuf_readbyte+0x28c>
    94ac:	e5941024 	ldr	r1, [r4, #36]	; 0x24
    94b0:	e3510000 	cmp	r1, #0
    94b4:	0a00007d 	beq	96b0 <iobuf_readbyte+0x2c0>
    return a->d.buf[a->d.start++];
    94b8:	e5943020 	ldr	r3, [r4, #32]
    94bc:	e2821001 	add	r1, r2, #1
    94c0:	e5841018 	str	r1, [r4, #24]
    94c4:	e7d35002 	ldrb	r5, [r3, r2]
    94c8:	eaffffdd 	b	9444 <iobuf_readbyte+0x54>
  if (a->d.len < target && a->filter_eof)
    94cc:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    94d0:	e3520000 	cmp	r2, #0
    94d4:	0a000015 	beq	9530 <iobuf_readbyte+0x140>
      if (a->chain)
    94d8:	e594503c 	ldr	r5, [r4, #60]	; 0x3c
    94dc:	e3550000 	cmp	r5, #0
    94e0:	0a000063 	beq	9674 <iobuf_readbyte+0x284>
	  xfree (a->d.buf);
    94e4:	e5940020 	ldr	r0, [r4, #32]
    94e8:	eb0016bf 	bl	efec <xfree>
	  xfree (a->real_fname);
    94ec:	e5940038 	ldr	r0, [r4, #56]	; 0x38
    94f0:	eb0016bd 	bl	efec <xfree>
	  memcpy (a, b, sizeof *a);
    94f4:	e3a02048 	mov	r2, #72	; 0x48
    94f8:	e1a01005 	mov	r1, r5
    94fc:	e1a00004 	mov	r0, r4
    9500:	eb0016f3 	bl	f0d4 <memcpy>
	  xfree (b);
    9504:	e1a00005 	mov	r0, r5
    9508:	eb0016b7 	bl	efec <xfree>
  if (!DBG_IOBUF)
    950c:	e59f31b4 	ldr	r3, [pc, #436]	; 96c8 <iobuf_readbyte+0x2d8>
    9510:	e7963003 	ldr	r3, [r6, r3]
    9514:	e5933000 	ldr	r3, [r3]
    9518:	e3530000 	cmp	r3, #0
    951c:	0affffd1 	beq	9468 <iobuf_readbyte+0x78>
    9520:	e1a00004 	mov	r0, r4
    return -1;			/* EOF */
    9524:	e3e05000 	mvn	r5, #0
    9528:	ebfffb8d 	bl	8364 <print_chain.part.0>
    952c:	eaffffc7 	b	9450 <iobuf_readbyte+0x60>
  if (a->d.len == 0 && a->error)
    9530:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    9534:	e3520000 	cmp	r2, #0
    9538:	1affffca 	bne	9468 <iobuf_readbyte+0x78>
  if (a->filter && ! a->filter_eof && ! a->error)
    953c:	e594502c 	ldr	r5, [r4, #44]	; 0x2c
    9540:	e3550000 	cmp	r5, #0
    9544:	0affffc7 	beq	9468 <iobuf_readbyte+0x78>
      len = a->d.size - a->d.len;
    9548:	e5942014 	ldr	r2, [r4, #20]
    954c:	e0422003 	sub	r2, r2, r3
    9550:	e58d2010 	str	r2, [sp, #16]
      if (len == 0)
    9554:	e3520000 	cmp	r2, #0
    9558:	0a000042 	beq	9668 <iobuf_readbyte+0x278>
	rc = a->filter (a->filter_ov, IOBUFCTRL_UNDERFLOW, a->chain,
    955c:	e5942020 	ldr	r2, [r4, #32]
    9560:	e28d1010 	add	r1, sp, #16
    9564:	e5940030 	ldr	r0, [r4, #48]	; 0x30
    9568:	e0823003 	add	r3, r2, r3
    956c:	e594203c 	ldr	r2, [r4, #60]	; 0x3c
    9570:	e58d1000 	str	r1, [sp]
    9574:	e3a01003 	mov	r1, #3
    9578:	e12fff35 	blx	r5
      a->d.len += len;
    957c:	e594201c 	ldr	r2, [r4, #28]
      if (rc == -1)
    9580:	e3700001 	cmn	r0, #1
      a->d.len += len;
    9584:	e59d3010 	ldr	r3, [sp, #16]
	rc = a->filter (a->filter_ov, IOBUFCTRL_UNDERFLOW, a->chain,
    9588:	e1a05000 	mov	r5, r0
      a->d.len += len;
    958c:	e0823003 	add	r3, r2, r3
    9590:	e584301c 	str	r3, [r4, #28]
      if (rc == -1)
    9594:	1a00002d 	bne	9650 <iobuf_readbyte+0x260>
	  if ((rc = a->filter (a->filter_ov, IOBUFCTRL_FREE, a->chain,
    9598:	e594702c 	ldr	r7, [r4, #44]	; 0x2c
	  size_t dummy_len = 0;
    959c:	e3a03000 	mov	r3, #0
	  if ((rc = a->filter (a->filter_ov, IOBUFCTRL_FREE, a->chain,
    95a0:	e594203c 	ldr	r2, [r4, #60]	; 0x3c
    95a4:	e28d1014 	add	r1, sp, #20
    95a8:	e58d1000 	str	r1, [sp]
    95ac:	e3a01002 	mov	r1, #2
    95b0:	e5940030 	ldr	r0, [r4, #48]	; 0x30
	  size_t dummy_len = 0;
    95b4:	e58d3014 	str	r3, [sp, #20]
	  if ((rc = a->filter (a->filter_ov, IOBUFCTRL_FREE, a->chain,
    95b8:	e12fff37 	blx	r7
    95bc:	e3500000 	cmp	r0, #0
    95c0:	1a00002f 	bne	9684 <iobuf_readbyte+0x294>
	  if (a->filter_ov && a->filter_ov_owner)
    95c4:	e5940030 	ldr	r0, [r4, #48]	; 0x30
    95c8:	e3500000 	cmp	r0, #0
    95cc:	0a000002 	beq	95dc <iobuf_readbyte+0x1ec>
    95d0:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    95d4:	e3530000 	cmp	r3, #0
    95d8:	1a000032 	bne	96a8 <iobuf_readbyte+0x2b8>
	  if (clear_pending_eof && a->d.len == 0 && a->chain)
    95dc:	e594301c 	ldr	r3, [r4, #28]
	  a->filter_ov = NULL;
    95e0:	e3a02000 	mov	r2, #0
    95e4:	e5842030 	str	r2, [r4, #48]	; 0x30
	  if (clear_pending_eof && a->d.len == 0 && a->chain)
    95e8:	e1530002 	cmp	r3, r2
	  a->filter = NULL;
    95ec:	e584202c 	str	r2, [r4, #44]	; 0x2c
	  a->filter_eof = 1;
    95f0:	e3a02001 	mov	r2, #1
    95f4:	e5842024 	str	r2, [r4, #36]	; 0x24
	  if (clear_pending_eof && a->d.len == 0 && a->chain)
    95f8:	1a000019 	bne	9664 <iobuf_readbyte+0x274>
    95fc:	e594703c 	ldr	r7, [r4, #60]	; 0x3c
    9600:	e3570000 	cmp	r7, #0
    9604:	0affff91 	beq	9450 <iobuf_readbyte+0x60>
	      xfree (a->d.buf);
    9608:	e5940020 	ldr	r0, [r4, #32]
    960c:	eb001676 	bl	efec <xfree>
	      xfree (a->real_fname);
    9610:	e5940038 	ldr	r0, [r4, #56]	; 0x38
    9614:	eb001674 	bl	efec <xfree>
	      memcpy (a, b, sizeof *a);
    9618:	e3a02048 	mov	r2, #72	; 0x48
    961c:	e1a01007 	mov	r1, r7
    9620:	e1a00004 	mov	r0, r4
    9624:	eb0016aa 	bl	f0d4 <memcpy>
	      xfree (b);
    9628:	e1a00007 	mov	r0, r7
    962c:	eb00166e 	bl	efec <xfree>
  if (!DBG_IOBUF)
    9630:	e59f3090 	ldr	r3, [pc, #144]	; 96c8 <iobuf_readbyte+0x2d8>
    9634:	e7963003 	ldr	r3, [r6, r3]
    9638:	e5933000 	ldr	r3, [r3]
    963c:	e3530000 	cmp	r3, #0
    9640:	0affff82 	beq	9450 <iobuf_readbyte+0x60>
    9644:	e1a00004 	mov	r0, r4
    9648:	ebfffb45 	bl	8364 <print_chain.part.0>
    964c:	eaffff7f 	b	9450 <iobuf_readbyte+0x60>
      else if (rc)
    9650:	e3500000 	cmp	r0, #0
    9654:	0a000002 	beq	9664 <iobuf_readbyte+0x274>
	  a->error = rc;
    9658:	e5840028 	str	r0, [r4, #40]	; 0x28
	  if (a->d.len == 0)
    965c:	e3530000 	cmp	r3, #0
    9660:	0affff80 	beq	9468 <iobuf_readbyte+0x78>
  if (a->d.start < a->d.len)
    9664:	e5942018 	ldr	r2, [r4, #24]
    9668:	e1520003 	cmp	r2, r3
    966c:	3affff91 	bcc	94b8 <iobuf_readbyte+0xc8>
    9670:	eaffff7c 	b	9468 <iobuf_readbyte+0x78>
	a->filter_eof = 0;	/* for the top level filter */
    9674:	e5845024 	str	r5, [r4, #36]	; 0x24
    9678:	eaffff7a 	b	9468 <iobuf_readbyte+0x78>
    967c:	e1a02005 	mov	r2, r5
    9680:	eaffff8c 	b	94b8 <iobuf_readbyte+0xc8>
	    printf ("IOBUFCTRL_FREE failed: %s\n");//, gpg_strerror (rc));
    9684:	e59f0040 	ldr	r0, [pc, #64]	; 96cc <iobuf_readbyte+0x2dc>
    9688:	e08f0000 	add	r0, pc, r0
    968c:	eb001f5c 	bl	11404 <tfp_printf>
    9690:	eaffffcb 	b	95c4 <iobuf_readbyte+0x1d4>
      printf ("iobuf_readbyte called on a non-INPUT pipeline!\n");
    9694:	e59f0034 	ldr	r0, [pc, #52]	; 96d0 <iobuf_readbyte+0x2e0>
      return -1;
    9698:	e3e05000 	mvn	r5, #0
      printf ("iobuf_readbyte called on a non-INPUT pipeline!\n");
    969c:	e08f0000 	add	r0, pc, r0
    96a0:	eb001f57 	bl	11404 <tfp_printf>
      return -1;
    96a4:	eaffff69 	b	9450 <iobuf_readbyte+0x60>
	    xfree (a->filter_ov);
    96a8:	eb00164f 	bl	efec <xfree>
    96ac:	eaffffca 	b	95dc <iobuf_readbyte+0x1ec>
  if (a->filter && ! a->filter_eof && ! a->error)
    96b0:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    96b4:	e3520000 	cmp	r2, #0
    96b8:	11a02001 	movne	r2, r1
    96bc:	1affff7d 	bne	94b8 <iobuf_readbyte+0xc8>
    96c0:	eaffffa0 	b	9548 <iobuf_readbyte+0x158>
    96c4:	000325b4 	.word	0x000325b4
    96c8:	0000001c 	.word	0x0000001c
    96cc:	0000cda4 	.word	0x0000cda4
    96d0:	0000cd60 	.word	0x0000cd60

000096d4 <iobuf_read>:
{
    96d4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    96d8:	e1a06000 	mov	r6, r0
  printf("iobuf_read %d a->nlimit %d\n",buflen,a->nlimit);
    96dc:	e59f0138 	ldr	r0, [pc, #312]	; 981c <iobuf_read+0x148>
{
    96e0:	e1a07002 	mov	r7, r2
  printf("iobuf_read %d a->nlimit %d\n",buflen,a->nlimit);
    96e4:	e5962004 	ldr	r2, [r6, #4]
{
    96e8:	e1a04001 	mov	r4, r1
  printf("iobuf_read %d a->nlimit %d\n",buflen,a->nlimit);
    96ec:	e08f0000 	add	r0, pc, r0
    96f0:	e1a01007 	mov	r1, r7
    96f4:	eb001f42 	bl	11404 <tfp_printf>
  if (a->use == IOBUF_OUTPUT || a->use == IOBUF_OUTPUT_TEMP)
    96f8:	e5d63000 	ldrb	r3, [r6]
    96fc:	e2433002 	sub	r3, r3, #2
    9700:	e3530001 	cmp	r3, #1
    9704:	9a00003f 	bls	9808 <iobuf_read+0x134>
  if (a->nlimit)
    9708:	e5965004 	ldr	r5, [r6, #4]
    970c:	e3550000 	cmp	r5, #0
    9710:	0a000011 	beq	975c <iobuf_read+0x88>
      for (n = 0; n < buflen; n++)
    9714:	e2575000 	subs	r5, r7, #0
    9718:	0a000014 	beq	9770 <iobuf_read+0x9c>
    971c:	e3a08000 	mov	r8, #0
    9720:	ea000004 	b	9738 <iobuf_read+0x64>
	  if (buf)
    9724:	e3540000 	cmp	r4, #0
      for (n = 0; n < buflen; n++)
    9728:	e2888001 	add	r8, r8, #1
	      *buf = c;
    972c:	14c40001 	strbne	r0, [r4], #1
      for (n = 0; n < buflen; n++)
    9730:	e1580007 	cmp	r8, r7
    9734:	0a00000d 	beq	9770 <iobuf_read+0x9c>
	  if ((c = iobuf_readbyte (a)) == -1)
    9738:	e1a00006 	mov	r0, r6
    973c:	ebffff2b 	bl	93f0 <iobuf_readbyte>
    9740:	e3700001 	cmn	r0, #1
    9744:	1afffff6 	bne	9724 <iobuf_read+0x50>
	      if (!n)
    9748:	e3580000 	cmp	r8, #0
    974c:	11a05008 	movne	r5, r8
    9750:	03e05000 	mvneq	r5, #0
}
    9754:	e1a00005 	mov	r0, r5
    9758:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
      if (n < buflen && a->d.start < a->d.len)
    975c:	e1550007 	cmp	r5, r7
    9760:	3a00001a 	bcc	97d0 <iobuf_read+0xfc>
  a->nbytes += n;
    9764:	e5963008 	ldr	r3, [r6, #8]
    9768:	e0833005 	add	r3, r3, r5
    976c:	e5863008 	str	r3, [r6, #8]
}
    9770:	e1a00005 	mov	r0, r5
    9774:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	  n += size;
    9778:	e1580001 	cmp	r8, r1
    977c:	21a08001 	movcs	r8, r1
	  if (buf)
    9780:	e3540000 	cmp	r4, #0
	  a->d.start += size;
    9784:	e0832008 	add	r2, r3, r8
	  if (buf)
    9788:	0a000019 	beq	97f4 <iobuf_read+0x120>
	    memcpy (buf, a->d.buf + a->d.start, size);
    978c:	e5961020 	ldr	r1, [r6, #32]
    9790:	e1a00004 	mov	r0, r4
	  n += size;
    9794:	e0855008 	add	r5, r5, r8
	    memcpy (buf, a->d.buf + a->d.start, size);
    9798:	e1a02008 	mov	r2, r8
    979c:	e0811003 	add	r1, r1, r3
	    buf += size;
    97a0:	e0844008 	add	r4, r4, r8
	    memcpy (buf, a->d.buf + a->d.start, size);
    97a4:	eb00164a 	bl	f0d4 <memcpy>
	  a->d.start += size;
    97a8:	e5963018 	ldr	r3, [r6, #24]
      if (n < buflen)
    97ac:	e1570005 	cmp	r7, r5
	  a->d.start += size;
    97b0:	e0833008 	add	r3, r3, r8
    97b4:	e5863018 	str	r3, [r6, #24]
      if (n < buflen)
    97b8:	9affffe9 	bls	9764 <iobuf_read+0x90>
	    *buf++ = c;
    97bc:	e3a03000 	mov	r3, #0
    97c0:	e4c43001 	strb	r3, [r4], #1
	  n++;
    97c4:	e2855001 	add	r5, r5, #1
  while (n < buflen);
    97c8:	e1550007 	cmp	r5, r7
    97cc:	2affffe4 	bcs	9764 <iobuf_read+0x90>
      if (n < buflen && a->d.start < a->d.len)
    97d0:	e5963018 	ldr	r3, [r6, #24]
    97d4:	e596201c 	ldr	r2, [r6, #28]
	  if (size > buflen - n)
    97d8:	e0478005 	sub	r8, r7, r5
      if (n < buflen && a->d.start < a->d.len)
    97dc:	e1530002 	cmp	r3, r2
	  unsigned size = a->d.len - a->d.start;
    97e0:	e0421003 	sub	r1, r2, r3
      if (n < buflen && a->d.start < a->d.len)
    97e4:	3affffe3 	bcc	9778 <iobuf_read+0xa4>
	  if (buf)
    97e8:	e3540000 	cmp	r4, #0
    97ec:	1afffff2 	bne	97bc <iobuf_read+0xe8>
    97f0:	eafffff3 	b	97c4 <iobuf_read+0xf0>
	  n += size;
    97f4:	e0855008 	add	r5, r5, r8
      if (n < buflen)
    97f8:	e1570005 	cmp	r7, r5
	  a->d.start += size;
    97fc:	e5862018 	str	r2, [r6, #24]
      if (n < buflen)
    9800:	8affffef 	bhi	97c4 <iobuf_read+0xf0>
    9804:	eaffffd6 	b	9764 <iobuf_read+0x90>
      printf ("iobuf_read called on a non-INPUT pipeline!\n");
    9808:	e59f0010 	ldr	r0, [pc, #16]	; 9820 <iobuf_read+0x14c>
      return -1;
    980c:	e3e05000 	mvn	r5, #0
      printf ("iobuf_read called on a non-INPUT pipeline!\n");
    9810:	e08f0000 	add	r0, pc, r0
    9814:	eb001efa 	bl	11404 <tfp_printf>
      return -1;
    9818:	eaffffd4 	b	9770 <iobuf_read+0x9c>
    981c:	0000cd5c 	.word	0x0000cd5c
    9820:	0000cc54 	.word	0x0000cc54

00009824 <iobuf_peek>:
  if (buflen > a->d.size)
    9824:	e590c014 	ldr	ip, [r0, #20]
{
    9828:	e1a03000 	mov	r3, r0
    982c:	e92d4010 	push	{r4, lr}
    9830:	e1a00001 	mov	r0, r1
    9834:	e152000c 	cmp	r2, ip
  while (buflen > a->d.len - a->d.start)
    9838:	e593401c 	ldr	r4, [r3, #28]
    983c:	21a0200c 	movcs	r2, ip
    9840:	e593c018 	ldr	ip, [r3, #24]
    9844:	e044100c 	sub	r1, r4, ip
    9848:	e1520001 	cmp	r2, r1
    984c:	9a00000d 	bls	9888 <iobuf_peek+0x64>
    9850:	e1520004 	cmp	r2, r4
    9854:	8afffffd 	bhi	9850 <iobuf_peek+0x2c>
    9858:	e3a0c000 	mov	ip, #0
    985c:	e583c018 	str	ip, [r3, #24]
  if (n > buflen)
    9860:	e1520004 	cmp	r2, r4
    9864:	31a04002 	movcc	r4, r2
  if (n == 0)
    9868:	e3540000 	cmp	r4, #0
    986c:	0a000007 	beq	9890 <iobuf_peek+0x6c>
  memcpy (buf, &a->d.buf[a->d.start], n);
    9870:	e5931020 	ldr	r1, [r3, #32]
    9874:	e1a02004 	mov	r2, r4
    9878:	e081100c 	add	r1, r1, ip
    987c:	eb001614 	bl	f0d4 <memcpy>
}
    9880:	e1a00004 	mov	r0, r4
    9884:	e8bd8010 	pop	{r4, pc}
  while (buflen > a->d.len - a->d.start)
    9888:	e1a04001 	mov	r4, r1
    988c:	eafffff3 	b	9860 <iobuf_peek+0x3c>
    return -1;
    9890:	e3e04000 	mvn	r4, #0
    9894:	eafffff9 	b	9880 <iobuf_peek+0x5c>

00009898 <iobuf_writebyte>:
{
    9898:	e92d4070 	push	{r4, r5, r6, lr}
    989c:	e1a04000 	mov	r4, r0
  printf("iobuf_writebyte %02X",c);
    98a0:	e59f0090 	ldr	r0, [pc, #144]	; 9938 <iobuf_writebyte+0xa0>
{
    98a4:	e1a06001 	mov	r6, r1
  printf("iobuf_writebyte %02X",c);
    98a8:	e08f0000 	add	r0, pc, r0
    98ac:	eb001ed4 	bl	11404 <tfp_printf>
  if (a->use == IOBUF_INPUT || a->use == IOBUF_INPUT_TEMP)
    98b0:	e5d43000 	ldrb	r3, [r4]
    98b4:	e3530001 	cmp	r3, #1
    98b8:	9a000019 	bls	9924 <iobuf_writebyte+0x8c>
  if (a->d.len == a->d.size)
    98bc:	e594001c 	ldr	r0, [r4, #28]
    98c0:	e5943014 	ldr	r3, [r4, #20]
    98c4:	e1500003 	cmp	r0, r3
    98c8:	0a00000b 	beq	98fc <iobuf_writebyte+0x64>
  printf (a->d.len < a->d.size);
    98cc:	e1500003 	cmp	r0, r3
  return 0;
    98d0:	e3a05000 	mov	r5, #0
  printf (a->d.len < a->d.size);
    98d4:	23a00000 	movcs	r0, #0
    98d8:	33a00001 	movcc	r0, #1
    98dc:	eb001ec8 	bl	11404 <tfp_printf>
  a->d.buf[a->d.len++] = c;
    98e0:	e594301c 	ldr	r3, [r4, #28]
    98e4:	e5942020 	ldr	r2, [r4, #32]
    98e8:	e2831001 	add	r1, r3, #1
    98ec:	e584101c 	str	r1, [r4, #28]
    98f0:	e7c26003 	strb	r6, [r2, r3]
}
    98f4:	e1a00005 	mov	r0, r5
    98f8:	e8bd8070 	pop	{r4, r5, r6, pc}
    if ((rc=filter_flush (a))){
    98fc:	e1a00004 	mov	r0, r4
    9900:	ebfffa4e 	bl	8240 <filter_flush>
    9904:	e2505000 	subs	r5, r0, #0
  printf (a->d.len < a->d.size);
    9908:	0594001c 	ldreq	r0, [r4, #28]
    990c:	05943014 	ldreq	r3, [r4, #20]
    9910:	0affffed 	beq	98cc <iobuf_writebyte+0x34>
      printf("filter_flush\n");
    9914:	e59f0020 	ldr	r0, [pc, #32]	; 993c <iobuf_writebyte+0xa4>
    9918:	e08f0000 	add	r0, pc, r0
    991c:	eb001eb8 	bl	11404 <tfp_printf>
      return rc;
    9920:	eafffff3 	b	98f4 <iobuf_writebyte+0x5c>
      printf ("iobuf_writebyte called on an input pipeline!\n");
    9924:	e59f0014 	ldr	r0, [pc, #20]	; 9940 <iobuf_writebyte+0xa8>
      return -1;
    9928:	e3e05000 	mvn	r5, #0
      printf ("iobuf_writebyte called on an input pipeline!\n");
    992c:	e08f0000 	add	r0, pc, r0
    9930:	eb001eb3 	bl	11404 <tfp_printf>
      return -1;
    9934:	eaffffee 	b	98f4 <iobuf_writebyte+0x5c>
    9938:	0000cbe8 	.word	0x0000cbe8
    993c:	0000cbc0 	.word	0x0000cbc0
    9940:	0000cb7c 	.word	0x0000cb7c

00009944 <iobuf_write>:
{
    9944:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9948:	e1a06000 	mov	r6, r0
  printf("iobuf_write %d",buflen);
    994c:	e59f00bc 	ldr	r0, [pc, #188]	; 9a10 <iobuf_write+0xcc>
{
    9950:	e1a07001 	mov	r7, r1
  printf("iobuf_write %d",buflen);
    9954:	e1a01002 	mov	r1, r2
{
    9958:	e1a05002 	mov	r5, r2
  printf("iobuf_write %d",buflen);
    995c:	e08f0000 	add	r0, pc, r0
    9960:	eb001ea7 	bl	11404 <tfp_printf>
  if (a->use == IOBUF_INPUT || a->use == IOBUF_INPUT_TEMP)
    9964:	e5d63000 	ldrb	r3, [r6]
    9968:	e3530001 	cmp	r3, #1
    996c:	9a000022 	bls	99fc <iobuf_write+0xb8>
  printf("iobuf_WROTE: %d bytes\n", size);
    9970:	e59f809c 	ldr	r8, [pc, #156]	; 9a14 <iobuf_write+0xd0>
      if (buflen && a->d.len < a->d.size)
    9974:	e3550000 	cmp	r5, #0
  printf("iobuf_WROTE: %d bytes\n", size);
    9978:	e08f8008 	add	r8, pc, r8
      if (buflen && a->d.len < a->d.size)
    997c:	0a000009 	beq	99a8 <iobuf_write+0x64>
    9980:	e596201c 	ldr	r2, [r6, #28]
    9984:	e5963014 	ldr	r3, [r6, #20]
    9988:	e1520003 	cmp	r2, r3
    998c:	3a000007 	bcc	99b0 <iobuf_write+0x6c>
	  rc = filter_flush (a);
    9990:	e1a00006 	mov	r0, r6
    9994:	ebfffa29 	bl	8240 <filter_flush>
          if (rc)
    9998:	e3500000 	cmp	r0, #0
    999c:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
      if (buflen && a->d.len < a->d.size)
    99a0:	e3550000 	cmp	r5, #0
    99a4:	1afffff5 	bne	9980 <iobuf_write+0x3c>
  return 0;
    99a8:	e3a00000 	mov	r0, #0
}
    99ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	  unsigned size = a->d.size - a->d.len;
    99b0:	e0433002 	sub	r3, r3, r2
	  memcpy (a->d.buf + a->d.len, buf, size);
    99b4:	e1a01007 	mov	r1, r7
    99b8:	e1550003 	cmp	r5, r3
    99bc:	e5960020 	ldr	r0, [r6, #32]
    99c0:	21a04003 	movcs	r4, r3
    99c4:	31a04005 	movcc	r4, r5
    99c8:	e0800002 	add	r0, r0, r2
    99cc:	e1a02004 	mov	r2, r4
    99d0:	eb0015bf 	bl	f0d4 <memcpy>
  printf("iobuf_WROTE: %d bytes\n", size);
    99d4:	e1a01004 	mov	r1, r4
    99d8:	e1a00008 	mov	r0, r8
    99dc:	eb001e88 	bl	11404 <tfp_printf>
	  a->d.len += size;
    99e0:	e596301c 	ldr	r3, [r6, #28]
      if (buflen)
    99e4:	e0555004 	subs	r5, r5, r4
	  a->d.len += size;
    99e8:	e0833004 	add	r3, r3, r4
    99ec:	e586301c 	str	r3, [r6, #28]
      if (buflen)
    99f0:	0affffec 	beq	99a8 <iobuf_write+0x64>
	  buf += size;
    99f4:	e0877004 	add	r7, r7, r4
    99f8:	eaffffe4 	b	9990 <iobuf_write+0x4c>
      printf ("iobuf_write called on an input pipeline!\n");
    99fc:	e59f0014 	ldr	r0, [pc, #20]	; 9a18 <iobuf_write+0xd4>
    9a00:	e08f0000 	add	r0, pc, r0
    9a04:	eb001e7e 	bl	11404 <tfp_printf>
      return -1;
    9a08:	e3e00000 	mvn	r0, #0
    9a0c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9a10:	0000cb8c 	.word	0x0000cb8c
    9a14:	0000cbac 	.word	0x0000cbac
    9a18:	0000caf8 	.word	0x0000caf8

00009a1c <block_filter>:
{
    9a1c:	e59fc7ec 	ldr	ip, [pc, #2028]	; a210 <block_filter+0x7f4>
    9a20:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a24:	e1a06001 	mov	r6, r1
    9a28:	e08fc00c 	add	ip, pc, ip
    9a2c:	e1a05000 	mov	r5, r0
printf("block_filter %s\n", control_mode_str[control]);
    9a30:	e59fe7dc 	ldr	lr, [pc, #2012]	; a214 <block_filter+0x7f8>
    9a34:	e1a0100c 	mov	r1, ip
{
    9a38:	e59d8028 	ldr	r8, [sp, #40]	; 0x28
    9a3c:	e1a07002 	mov	r7, r2
printf("block_filter %s\n", control_mode_str[control]);
    9a40:	e79c000e 	ldr	r0, [ip, lr]
{
    9a44:	e1a0a003 	mov	sl, r3
printf("block_filter %s\n", control_mode_str[control]);
    9a48:	e7901106 	ldr	r1, [r0, r6, lsl #2]
    9a4c:	e59f07c4 	ldr	r0, [pc, #1988]	; a218 <block_filter+0x7fc>
    9a50:	e08f0000 	add	r0, pc, r0
    9a54:	eb001e6a 	bl	11404 <tfp_printf>
  size_t size = *ret_len;
    9a58:	e5984000 	ldr	r4, [r8]
  if (control == IOBUFCTRL_UNDERFLOW)
    9a5c:	e3560003 	cmp	r6, #3
    9a60:	0a000019 	beq	9acc <block_filter+0xb0>
  else if (control == IOBUFCTRL_FLUSH)
    9a64:	e3560004 	cmp	r6, #4
    9a68:	0a0000ac 	beq	9d20 <block_filter+0x304>
  else if (control == IOBUFCTRL_INIT)
    9a6c:	e3560001 	cmp	r6, #1
    9a70:	0a000004 	beq	9a88 <block_filter+0x6c>
  else if (control == IOBUFCTRL_FREE)
    9a74:	e3560002 	cmp	r6, #2
    9a78:	0a0000fe 	beq	9e78 <block_filter+0x45c>
  int c, needed, rc = 0;
    9a7c:	e3a09000 	mov	r9, #0
}
    9a80:	e1a00009 	mov	r0, r9
    9a84:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (a->partial)
    9a88:	e595300c 	ldr	r3, [r5, #12]
    9a8c:	e3530000 	cmp	r3, #0
	a->count = 0;
    9a90:	13a03000 	movne	r3, #0
    9a94:	15853008 	strne	r3, [r5, #8]
      if (a->partial)
    9a98:	1a000004 	bne	9ab0 <block_filter+0x94>
      else if (a->use == IOBUF_INPUT)
    9a9c:	e5953000 	ldr	r3, [r5]
    9aa0:	e3530000 	cmp	r3, #0
	a->count = a->size = 0;
    9aa4:	05853004 	streq	r3, [r5, #4]
	a->count = a->size;	/* force first length bytes */
    9aa8:	15953004 	ldrne	r3, [r5, #4]
    9aac:	e5853008 	str	r3, [r5, #8]
      a->eof = 0;
    9ab0:	e3a03000 	mov	r3, #0
    9ab4:	e585301c 	str	r3, [r5, #28]
  int c, needed, rc = 0;
    9ab8:	e1a09003 	mov	r9, r3
      a->buffer = NULL;
    9abc:	e5853010 	str	r3, [r5, #16]
}
    9ac0:	e1a00009 	mov	r0, r9
      a->buflen = 0;
    9ac4:	e5853014 	str	r3, [r5, #20]
}
    9ac8:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      printf ("IOBUFCTRL_UNDERFLOW %d\n", size);
    9acc:	e59f0748 	ldr	r0, [pc, #1864]	; a21c <block_filter+0x800>
    9ad0:	e1a01004 	mov	r1, r4
    9ad4:	e08f0000 	add	r0, pc, r0
    9ad8:	eb001e49 	bl	11404 <tfp_printf>
      printf (size);	/* need a buffer */
    9adc:	e1a00004 	mov	r0, r4
    9ae0:	eb001e47 	bl	11404 <tfp_printf>
      if (a->eof)		/* don't read any further */
    9ae4:	e595901c 	ldr	r9, [r5, #28]
    9ae8:	e3590000 	cmp	r9, #0
    9aec:	13a06000 	movne	r6, #0
	rc = -1;
    9af0:	13e09000 	mvnne	r9, #0
      if (a->eof)		/* don't read any further */
    9af4:	1a00001f 	bne	9b78 <block_filter+0x15c>
      while (!rc && size)
    9af8:	e3540000 	cmp	r4, #0
    9afc:	0a0001bc 	beq	a1f4 <block_filter+0x7d8>
	  if (!a->size)
    9b00:	e5953004 	ldr	r3, [r5, #4]
    9b04:	e3530000 	cmp	r3, #0
    9b08:	e1a06003 	mov	r6, r3
    9b0c:	11a06009 	movne	r6, r9
    9b10:	0a00001b 	beq	9b84 <block_filter+0x168>
	  while (!rc && size && a->size)
    9b14:	e1a02003 	mov	r2, r3
    9b18:	e3520000 	cmp	r2, #0
	      c = iobuf_read (chain, p, needed);
    9b1c:	e1a0100a 	mov	r1, sl
    9b20:	e1a00007 	mov	r0, r7
	  while (!rc && size && a->size)
    9b24:	0a000016 	beq	9b84 <block_filter+0x168>
	      needed = size < a->size ? size : a->size;
    9b28:	e1520004 	cmp	r2, r4
    9b2c:	31a0b002 	movcc	fp, r2
    9b30:	21a0b004 	movcs	fp, r4
	      c = iobuf_read (chain, p, needed);
    9b34:	e1a0200b 	mov	r2, fp
    9b38:	ebfffee5 	bl	96d4 <iobuf_read>
	      if (c < needed)
    9b3c:	e15b0000 	cmp	fp, r0
		  p += c;
    9b40:	e08aa000 	add	sl, sl, r0
	      if (c < needed)
    9b44:	da000021 	ble	9bd0 <block_filter+0x1b4>
		  printf
    9b48:	e595c004 	ldr	ip, [r5, #4]
		  if (c == -1)
    9b4c:	e3700001 	cmn	r0, #1
		  printf
    9b50:	11a03000 	movne	r3, r0
    9b54:	03a03000 	moveq	r3, #0
    9b58:	e59f06c0 	ldr	r0, [pc, #1728]	; a220 <block_filter+0x804>
    9b5c:	e1a01005 	mov	r1, r5
    9b60:	10844003 	addne	r4, r4, r3
		  rc = GPG_ERR_BAD_DATA;
    9b64:	e3a09059 	mov	r9, #89	; 0x59
		  printf
    9b68:	e08f0000 	add	r0, pc, r0
    9b6c:	e1a02004 	mov	r2, r4
    9b70:	e083300c 	add	r3, r3, ip
    9b74:	eb001e22 	bl	11404 <tfp_printf>
      *ret_len = n;
    9b78:	e5886000 	str	r6, [r8]
}
    9b7c:	e1a00009 	mov	r0, r9
    9b80:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	      if (a->partial == 2)
    9b84:	e595200c 	ldr	r2, [r5, #12]
    9b88:	e3520002 	cmp	r2, #2
    9b8c:	0a00004c 	beq	9cc4 <block_filter+0x2a8>
	      else if (a->partial)
    9b90:	e3520000 	cmp	r2, #0
    9b94:	0affffde 	beq	9b14 <block_filter+0xf8>
      printf("These OpenPGP introduced huffman like encoded length bytes are really a mess :-(\n" );
    9b98:	e59f0684 	ldr	r0, [pc, #1668]	; a224 <block_filter+0x808>
    9b9c:	e08f0000 	add	r0, pc, r0
    9ba0:	eb001e17 	bl	11404 <tfp_printf>
		  if (a->first_c)
    9ba4:	e5953018 	ldr	r3, [r5, #24]
    9ba8:	e3530000 	cmp	r3, #0
    9bac:	0a00000f 	beq	9bf0 <block_filter+0x1d4>
		  if (c < 192)
    9bb0:	e35300bf 	cmp	r3, #191	; 0xbf
		      a->first_c = 0;
    9bb4:	e3a02000 	mov	r2, #0
    9bb8:	e5852018 	str	r2, [r5, #24]
		  if (c < 192)
    9bbc:	ca00001b 	bgt	9c30 <block_filter+0x214>
		      a->size = c;
    9bc0:	e5853004 	str	r3, [r5, #4]
		      a->partial = 2;
    9bc4:	e3a02002 	mov	r2, #2
    9bc8:	e585200c 	str	r2, [r5, #12]
		      if (!a->size)
    9bcc:	eaffffd0 	b	9b14 <block_filter+0xf8>
		  a->size -= c;
    9bd0:	e5953004 	ldr	r3, [r5, #4]
	  while (!rc && size && a->size)
    9bd4:	e0544000 	subs	r4, r4, r0
		  a->size -= c;
    9bd8:	e0432000 	sub	r2, r3, r0
		  n += c;
    9bdc:	e0866000 	add	r6, r6, r0
		  a->size -= c;
    9be0:	e1a03002 	mov	r3, r2
    9be4:	e5852004 	str	r2, [r5, #4]
	  while (!rc && size && a->size)
    9be8:	1affffca 	bne	9b18 <block_filter+0xfc>
    9bec:	eaffffe1 	b	9b78 <block_filter+0x15c>
		  else if ((c = iobuf_get (chain)) == -1)
    9bf0:	e5973010 	ldr	r3, [r7, #16]
    9bf4:	e3530000 	cmp	r3, #0
    9bf8:	1a000037 	bne	9cdc <block_filter+0x2c0>
    9bfc:	e5973018 	ldr	r3, [r7, #24]
    9c00:	e597201c 	ldr	r2, [r7, #28]
    9c04:	e1530002 	cmp	r3, r2
    9c08:	2a000033 	bcs	9cdc <block_filter+0x2c0>
    9c0c:	e5972008 	ldr	r2, [r7, #8]
    9c10:	e5971020 	ldr	r1, [r7, #32]
    9c14:	e2822001 	add	r2, r2, #1
    9c18:	e5872008 	str	r2, [r7, #8]
    9c1c:	e2832001 	add	r2, r3, #1
    9c20:	e5872018 	str	r2, [r7, #24]
    9c24:	e7d13003 	ldrb	r3, [r1, r3]
		  if (c < 192)
    9c28:	e35300bf 	cmp	r3, #191	; 0xbf
    9c2c:	da00001f 	ble	9cb0 <block_filter+0x294>
		  else if (c < 224)
    9c30:	e35300df 	cmp	r3, #223	; 0xdf
    9c34:	ca000032 	bgt	9d04 <block_filter+0x2e8>
		      if ((c = iobuf_get (chain)) == -1)
    9c38:	e5972010 	ldr	r2, [r7, #16]
		      a->size = (c - 192) * 256;
    9c3c:	e24330c0 	sub	r3, r3, #192	; 0xc0
    9c40:	e1a03403 	lsl	r3, r3, #8
		      if ((c = iobuf_get (chain)) == -1)
    9c44:	e3520000 	cmp	r2, #0
		      a->size = (c - 192) * 256;
    9c48:	e5853004 	str	r3, [r5, #4]
		      if ((c = iobuf_get (chain)) == -1)
    9c4c:	1a000010 	bne	9c94 <block_filter+0x278>
    9c50:	e5972018 	ldr	r2, [r7, #24]
    9c54:	e597101c 	ldr	r1, [r7, #28]
    9c58:	e1520001 	cmp	r2, r1
    9c5c:	2a00000c 	bcs	9c94 <block_filter+0x278>
    9c60:	e5971008 	ldr	r1, [r7, #8]
		      a->size += c + 192;
    9c64:	e28330c0 	add	r3, r3, #192	; 0xc0
		      if ((c = iobuf_get (chain)) == -1)
    9c68:	e5970020 	ldr	r0, [r7, #32]
    9c6c:	e2811001 	add	r1, r1, #1
    9c70:	e5871008 	str	r1, [r7, #8]
    9c74:	e2821001 	add	r1, r2, #1
    9c78:	e5871018 	str	r1, [r7, #24]
		      a->size += c + 192;
    9c7c:	e7d02002 	ldrb	r2, [r0, r2]
    9c80:	e0823003 	add	r3, r2, r3
		      a->partial = 2;
    9c84:	e3a02002 	mov	r2, #2
		      a->size += c + 192;
    9c88:	e5853004 	str	r3, [r5, #4]
		      a->partial = 2;
    9c8c:	e585200c 	str	r2, [r5, #12]
		      if (!a->size)
    9c90:	eaffff9f 	b	9b14 <block_filter+0xf8>
		      if ((c = iobuf_get (chain)) == -1)
    9c94:	e1a00007 	mov	r0, r7
    9c98:	ebfffdd4 	bl	93f0 <iobuf_readbyte>
    9c9c:	e3700001 	cmn	r0, #1
		      a->size += c + 192;
    9ca0:	15953004 	ldrne	r3, [r5, #4]
    9ca4:	128330c0 	addne	r3, r3, #192	; 0xc0
    9ca8:	10833000 	addne	r3, r3, r0
		      if ((c = iobuf_get (chain)) == -1)
    9cac:	0a0000e7 	beq	a050 <block_filter+0x634>
		      a->size |= c;
    9cb0:	e5853004 	str	r3, [r5, #4]
                      if (!a->size)
    9cb4:	e3530000 	cmp	r3, #0
                      a->partial = 2;
    9cb8:	e3a02002 	mov	r2, #2
    9cbc:	e585200c 	str	r2, [r5, #12]
                      if (!a->size)
    9cc0:	1affff93 	bne	9b14 <block_filter+0xf8>
                          if (!n)
    9cc4:	e16f9f16 	clz	r9, r6
                          a->eof = 1;
    9cc8:	e3a03001 	mov	r3, #1
    9ccc:	e585301c 	str	r3, [r5, #28]
                          if (!n)
    9cd0:	e1a092a9 	lsr	r9, r9, #5
    9cd4:	e2699000 	rsb	r9, r9, #0
    9cd8:	eaffffa6 	b	9b78 <block_filter+0x15c>
		  else if ((c = iobuf_get (chain)) == -1)
    9cdc:	e1a00007 	mov	r0, r7
    9ce0:	ebfffdc2 	bl	93f0 <iobuf_readbyte>
    9ce4:	e3700001 	cmn	r0, #1
    9ce8:	e1a03000 	mov	r3, r0
    9cec:	1affffcd 	bne	9c28 <block_filter+0x20c>
		      printf ("block_filter: 1st length byte missing\n");
    9cf0:	e59f0530 	ldr	r0, [pc, #1328]	; a228 <block_filter+0x80c>
		      rc = GPG_ERR_BAD_DATA;
    9cf4:	e3a09059 	mov	r9, #89	; 0x59
		      printf ("block_filter: 1st length byte missing\n");
    9cf8:	e08f0000 	add	r0, pc, r0
    9cfc:	eb001dc0 	bl	11404 <tfp_printf>
		      break;
    9d00:	eaffff9c 	b	9b78 <block_filter+0x15c>
		  else if (c == 255)
    9d04:	e35300ff 	cmp	r3, #255	; 0xff
    9d08:	0a000063 	beq	9e9c <block_filter+0x480>
		      a->size = 1 << (c & 0x1f);
    9d0c:	e203301f 	and	r3, r3, #31
    9d10:	e3a02001 	mov	r2, #1
    9d14:	e1a03312 	lsl	r3, r2, r3
    9d18:	e5853004 	str	r3, [r5, #4]
    9d1c:	eaffff7c 	b	9b14 <block_filter+0xf8>
            printf ("IOBUFCTRL_FLUSH %d\n", a->partial);
    9d20:	e59f0504 	ldr	r0, [pc, #1284]	; a22c <block_filter+0x810>
    9d24:	e595100c 	ldr	r1, [r5, #12]
    9d28:	e08f0000 	add	r0, pc, r0
    9d2c:	eb001db4 	bl	11404 <tfp_printf>
      if (a->partial)
    9d30:	e595300c 	ldr	r3, [r5, #12]
    9d34:	e3530000 	cmp	r3, #0
    9d38:	0affff4f 	beq	9a7c <block_filter+0x60>
	  size_t blen, n, nbytes = size + a->buflen;
    9d3c:	e5950014 	ldr	r0, [r5, #20]
    9d40:	e0806004 	add	r6, r0, r4
	  if (nbytes < OP_MIN_PARTIAL_CHUNK)
    9d44:	e3560c02 	cmp	r6, #512	; 0x200
    9d48:	3a000089 	bcc	9f74 <block_filter+0x558>
		  for (blen = OP_MIN_PARTIAL_CHUNK * 2,
    9d4c:	e3560b01 	cmp	r6, #1024	; 0x400
    9d50:	3a0000c3 	bcc	a064 <block_filter+0x648>
    9d54:	e3a03b01 	mov	r3, #1024	; 0x400
		       c = OP_MIN_PARTIAL_CHUNK_2POW + 1; blen <= nbytes;
    9d58:	e3a0200a 	mov	r2, #10
		       blen *= 2, c++)
    9d5c:	e1a03083 	lsl	r3, r3, #1
    9d60:	e1a00002 	mov	r0, r2
		  for (blen = OP_MIN_PARTIAL_CHUNK * 2,
    9d64:	e1560003 	cmp	r6, r3
		       blen *= 2, c++)
    9d68:	e2822001 	add	r2, r2, #1
		  for (blen = OP_MIN_PARTIAL_CHUNK * 2,
    9d6c:	2afffffa 	bcs	9d5c <block_filter+0x340>
		  printf (c <= 0x1f);	/*;-) */
    9d70:	e350001f 	cmp	r0, #31
		  c |= 0xe0;
    9d74:	e38080e0 	orr	r8, r0, #224	; 0xe0
		  blen /= 2;
    9d78:	e1a040a3 	lsr	r4, r3, #1
		  printf (c <= 0x1f);	/*;-) */
    9d7c:	c3a00000 	movgt	r0, #0
    9d80:	d3a00001 	movle	r0, #1
    9d84:	eb001d9e 	bl	11404 <tfp_printf>
		  iobuf_put (chain, c);
    9d88:	e1a01008 	mov	r1, r8
    9d8c:	e1a00007 	mov	r0, r7
    9d90:	ebfffec0 	bl	9898 <iobuf_writebyte>
		  if ((n = a->buflen))
    9d94:	e5959014 	ldr	r9, [r5, #20]
    9d98:	e3590000 	cmp	r9, #0
    9d9c:	1a000009 	bne	9dc8 <block_filter+0x3ac>
		  if ((n = nbytes) > blen)
    9da0:	e1540006 	cmp	r4, r6
    9da4:	21a04006 	movcs	r4, r6
		  if (n && iobuf_write (chain, p, n))
    9da8:	e1a02004 	mov	r2, r4
    9dac:	e1a0100a 	mov	r1, sl
    9db0:	e1a00007 	mov	r0, r7
    9db4:	ebfffee2 	bl	9944 <iobuf_write>
    9db8:	e3500000 	cmp	r0, #0
    9dbc:	0a000013 	beq	9e10 <block_filter+0x3f4>
		    rc = gpg_error_from_syserror ();
    9dc0:	e3e09000 	mvn	r9, #0
  return rc;
    9dc4:	eaffff2d 	b	9a80 <block_filter+0x64>
		      nbytes -= n;
    9dc8:	e0466009 	sub	r6, r6, r9
		      printf (n == OP_MIN_PARTIAL_CHUNK);
    9dcc:	e2490c02 	sub	r0, r9, #512	; 0x200
    9dd0:	e16f0f10 	clz	r0, r0
    9dd4:	e1a002a0 	lsr	r0, r0, #5
    9dd8:	eb001d89 	bl	11404 <tfp_printf>
		      if (iobuf_write (chain, a->buffer, n))
    9ddc:	e5951010 	ldr	r1, [r5, #16]
    9de0:	e1a02009 	mov	r2, r9
    9de4:	e1a00007 	mov	r0, r7
    9de8:	ebfffed5 	bl	9944 <iobuf_write>
    9dec:	e2509000 	subs	r9, r0, #0
		      a->buflen = 0;
    9df0:	e3a03000 	mov	r3, #0
    9df4:	e5853014 	str	r3, [r5, #20]
		      if (iobuf_write (chain, a->buffer, n))
    9df8:	13a09001 	movne	r9, #1
    9dfc:	e1540006 	cmp	r4, r6
    9e00:	e2699000 	rsb	r9, r9, #0
		  if ((n = nbytes) > blen)
    9e04:	21a04006 	movcs	r4, r6
		  if (n && iobuf_write (chain, p, n))
    9e08:	e3540000 	cmp	r4, #0
    9e0c:	1affffe5 	bne	9da8 <block_filter+0x38c>
	      while (!rc && nbytes >= OP_MIN_PARTIAL_CHUNK);
    9e10:	e16f3f19 	clz	r3, r9
		  nbytes -= n;
    9e14:	e0466004 	sub	r6, r6, r4
	      while (!rc && nbytes >= OP_MIN_PARTIAL_CHUNK);
    9e18:	e1a032a3 	lsr	r3, r3, #5
		  p += n;
    9e1c:	e08aa004 	add	sl, sl, r4
	      while (!rc && nbytes >= OP_MIN_PARTIAL_CHUNK);
    9e20:	e3560c02 	cmp	r6, #512	; 0x200
    9e24:	33a02000 	movcc	r2, #0
    9e28:	22032001 	andcs	r2, r3, #1
    9e2c:	e3520000 	cmp	r2, #0
    9e30:	1affffc5 	bne	9d4c <block_filter+0x330>
	      if (!rc && nbytes)
    9e34:	e3560000 	cmp	r6, #0
    9e38:	03a03000 	moveq	r3, #0
    9e3c:	12033001 	andne	r3, r3, #1
    9e40:	e3530000 	cmp	r3, #0
    9e44:	0affff0d 	beq	9a80 <block_filter+0x64>
      	      printf("store the rest in the buffer" );
    9e48:	e59f03e0 	ldr	r0, [pc, #992]	; a230 <block_filter+0x814>
    9e4c:	e08f0000 	add	r0, pc, r0
    9e50:	eb001d6b 	bl	11404 <tfp_printf>
		  if (!a->buffer)
    9e54:	e5950010 	ldr	r0, [r5, #16]
    9e58:	e3500000 	cmp	r0, #0
    9e5c:	0a0000e0 	beq	a1e4 <block_filter+0x7c8>
		  memcpy (a->buffer, p, nbytes);
    9e60:	e1a02006 	mov	r2, r6
    9e64:	e1a0100a 	mov	r1, sl
		  a->buflen = nbytes;
    9e68:	e3a09000 	mov	r9, #0
		  memcpy (a->buffer, p, nbytes);
    9e6c:	eb001498 	bl	f0d4 <memcpy>
		  a->buflen = nbytes;
    9e70:	e5856014 	str	r6, [r5, #20]
    9e74:	eaffff01 	b	9a80 <block_filter+0x64>
      if (a->use == IOBUF_OUTPUT)
    9e78:	e5953000 	ldr	r3, [r5]
    9e7c:	e3530002 	cmp	r3, #2
    9e80:	0a00007b 	beq	a074 <block_filter+0x658>
      else if (a->size)
    9e84:	e5959004 	ldr	r9, [r5, #4]
    9e88:	e3590000 	cmp	r9, #0
    9e8c:	1a00006a 	bne	a03c <block_filter+0x620>
      xfree (a);		/* we can free our context now */
    9e90:	e1a00005 	mov	r0, r5
    9e94:	eb001454 	bl	efec <xfree>
    9e98:	eafffef8 	b	9a80 <block_filter+0x64>
		      a->size = iobuf_get_noeof (chain) << 24;
    9e9c:	e5973010 	ldr	r3, [r7, #16]
    9ea0:	e3530000 	cmp	r3, #0
    9ea4:	1a000003 	bne	9eb8 <block_filter+0x49c>
    9ea8:	e5973018 	ldr	r3, [r7, #24]
    9eac:	e597201c 	ldr	r2, [r7, #28]
    9eb0:	e1530002 	cmp	r3, r2
    9eb4:	3a000056 	bcc	a014 <block_filter+0x5f8>
    9eb8:	e1a00007 	mov	r0, r7
    9ebc:	ebfffd4b 	bl	93f0 <iobuf_readbyte>
		      a->size |= iobuf_get_noeof (chain) << 16;
    9ec0:	e5972010 	ldr	r2, [r7, #16]
		      a->size = iobuf_get_noeof (chain) << 24;
    9ec4:	e1a03c00 	lsl	r3, r0, #24
    9ec8:	e5853004 	str	r3, [r5, #4]
		      a->size |= iobuf_get_noeof (chain) << 16;
    9ecc:	e3520000 	cmp	r2, #0
    9ed0:	0597201c 	ldreq	r2, [r7, #28]
    9ed4:	1a000002 	bne	9ee4 <block_filter+0x4c8>
    9ed8:	e5971018 	ldr	r1, [r7, #24]
    9edc:	e1510002 	cmp	r1, r2
    9ee0:	3a00002f 	bcc	9fa4 <block_filter+0x588>
    9ee4:	e1a00007 	mov	r0, r7
    9ee8:	ebfffd40 	bl	93f0 <iobuf_readbyte>
		      a->size |= iobuf_get_noeof (chain) << 8;
    9eec:	e5971010 	ldr	r1, [r7, #16]
		      a->size |= iobuf_get_noeof (chain) << 16;
    9ef0:	e5952004 	ldr	r2, [r5, #4]
    9ef4:	e1a03800 	lsl	r3, r0, #16
		      a->size |= iobuf_get_noeof (chain) << 8;
    9ef8:	e3510000 	cmp	r1, #0
		      a->size |= iobuf_get_noeof (chain) << 16;
    9efc:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
    9f00:	e1833002 	orr	r3, r3, r2
    9f04:	e5853004 	str	r3, [r5, #4]
		      a->size |= iobuf_get_noeof (chain) << 8;
    9f08:	0597201c 	ldreq	r2, [r7, #28]
    9f0c:	1a000002 	bne	9f1c <block_filter+0x500>
    9f10:	e5971018 	ldr	r1, [r7, #24]
    9f14:	e1510002 	cmp	r1, r2
    9f18:	3a00002b 	bcc	9fcc <block_filter+0x5b0>
    9f1c:	e1a00007 	mov	r0, r7
    9f20:	ebfffd32 	bl	93f0 <iobuf_readbyte>
		      if ((c = iobuf_get (chain)) == -1)
    9f24:	e5971010 	ldr	r1, [r7, #16]
		      a->size |= iobuf_get_noeof (chain) << 8;
    9f28:	e5952004 	ldr	r2, [r5, #4]
    9f2c:	e1a03400 	lsl	r3, r0, #8
		      if ((c = iobuf_get (chain)) == -1)
    9f30:	e3510000 	cmp	r1, #0
		      a->size |= iobuf_get_noeof (chain) << 8;
    9f34:	e6ff3073 	uxth	r3, r3
    9f38:	e1833002 	orr	r3, r3, r2
    9f3c:	e5853004 	str	r3, [r5, #4]
		      if ((c = iobuf_get (chain)) == -1)
    9f40:	0597201c 	ldreq	r2, [r7, #28]
    9f44:	1a000002 	bne	9f54 <block_filter+0x538>
    9f48:	e5971018 	ldr	r1, [r7, #24]
    9f4c:	e1510002 	cmp	r1, r2
    9f50:	3a000027 	bcc	9ff4 <block_filter+0x5d8>
    9f54:	e1a00007 	mov	r0, r7
    9f58:	ebfffd24 	bl	93f0 <iobuf_readbyte>
    9f5c:	e3700001 	cmn	r0, #1
    9f60:	e1a02000 	mov	r2, r0
		      a->size |= c;
    9f64:	15953004 	ldrne	r3, [r5, #4]
		      if ((c = iobuf_get (chain)) == -1)
    9f68:	0a000098 	beq	a1d0 <block_filter+0x7b4>
		      a->size |= c;
    9f6c:	e1823003 	orr	r3, r2, r3
    9f70:	eaffff4e 	b	9cb0 <block_filter+0x294>
	      if (!a->buffer)
    9f74:	e5953010 	ldr	r3, [r5, #16]
    9f78:	e3530000 	cmp	r3, #0
    9f7c:	0a000058 	beq	a0e4 <block_filter+0x6c8>
	      memcpy (a->buffer + a->buflen, buf, size);
    9f80:	e0830000 	add	r0, r3, r0
    9f84:	e1a02004 	mov	r2, r4
    9f88:	e1a0100a 	mov	r1, sl
  int c, needed, rc = 0;
    9f8c:	e3a09000 	mov	r9, #0
	      memcpy (a->buffer + a->buflen, buf, size);
    9f90:	eb00144f 	bl	f0d4 <memcpy>
	      a->buflen += size;
    9f94:	e5953014 	ldr	r3, [r5, #20]
    9f98:	e0834004 	add	r4, r3, r4
    9f9c:	e5854014 	str	r4, [r5, #20]
    9fa0:	eafffeb6 	b	9a80 <block_filter+0x64>
		      a->size |= iobuf_get_noeof (chain) << 16;
    9fa4:	e5970008 	ldr	r0, [r7, #8]
    9fa8:	e597c020 	ldr	ip, [r7, #32]
    9fac:	e2800001 	add	r0, r0, #1
    9fb0:	e5870008 	str	r0, [r7, #8]
    9fb4:	e2810001 	add	r0, r1, #1
    9fb8:	e5870018 	str	r0, [r7, #24]
    9fbc:	e7dc1001 	ldrb	r1, [ip, r1]
    9fc0:	e1833801 	orr	r3, r3, r1, lsl #16
    9fc4:	e5853004 	str	r3, [r5, #4]
		      a->size |= iobuf_get_noeof (chain) << 8;
    9fc8:	eaffffd0 	b	9f10 <block_filter+0x4f4>
    9fcc:	e5970008 	ldr	r0, [r7, #8]
    9fd0:	e597c020 	ldr	ip, [r7, #32]
    9fd4:	e2800001 	add	r0, r0, #1
    9fd8:	e5870008 	str	r0, [r7, #8]
    9fdc:	e2810001 	add	r0, r1, #1
    9fe0:	e5870018 	str	r0, [r7, #24]
    9fe4:	e7dc1001 	ldrb	r1, [ip, r1]
    9fe8:	e1833401 	orr	r3, r3, r1, lsl #8
    9fec:	e5853004 	str	r3, [r5, #4]
		      if ((c = iobuf_get (chain)) == -1)
    9ff0:	eaffffd4 	b	9f48 <block_filter+0x52c>
    9ff4:	e5972008 	ldr	r2, [r7, #8]
    9ff8:	e5970020 	ldr	r0, [r7, #32]
    9ffc:	e2822001 	add	r2, r2, #1
    a000:	e5872008 	str	r2, [r7, #8]
    a004:	e2812001 	add	r2, r1, #1
    a008:	e5872018 	str	r2, [r7, #24]
    a00c:	e7d02001 	ldrb	r2, [r0, r1]
    a010:	eaffffd5 	b	9f6c <block_filter+0x550>
		      a->size = iobuf_get_noeof (chain) << 24;
    a014:	e5971008 	ldr	r1, [r7, #8]
    a018:	e5970020 	ldr	r0, [r7, #32]
    a01c:	e2811001 	add	r1, r1, #1
    a020:	e5871008 	str	r1, [r7, #8]
    a024:	e2831001 	add	r1, r3, #1
    a028:	e5871018 	str	r1, [r7, #24]
    a02c:	e7d03003 	ldrb	r3, [r0, r3]
    a030:	e1a03c03 	lsl	r3, r3, #24
    a034:	e5853004 	str	r3, [r5, #4]
		      a->size |= iobuf_get_noeof (chain) << 16;
    a038:	eaffffa6 	b	9ed8 <block_filter+0x4bc>
	  printf ("block_filter: pending bytes!\n");
    a03c:	e59f01f0 	ldr	r0, [pc, #496]	; a234 <block_filter+0x818>
  int c, needed, rc = 0;
    a040:	e3a09000 	mov	r9, #0
	  printf ("block_filter: pending bytes!\n");
    a044:	e08f0000 	add	r0, pc, r0
    a048:	eb001ced 	bl	11404 <tfp_printf>
    a04c:	eaffff8f 	b	9e90 <block_filter+0x474>
			  printf
    a050:	e59f01e0 	ldr	r0, [pc, #480]	; a238 <block_filter+0x81c>
			  rc = GPG_ERR_BAD_DATA;
    a054:	e3a09059 	mov	r9, #89	; 0x59
			  printf
    a058:	e08f0000 	add	r0, pc, r0
    a05c:	eb001ce8 	bl	11404 <tfp_printf>
			  break;
    a060:	eafffec4 	b	9b78 <block_filter+0x15c>
		  for (blen = OP_MIN_PARTIAL_CHUNK * 2,
    a064:	e3a00001 	mov	r0, #1
    a068:	e3a04c02 	mov	r4, #512	; 0x200
    a06c:	e3a080e9 	mov	r8, #233	; 0xe9
    a070:	eaffff43 	b	9d84 <block_filter+0x368>
	  if (a->partial)
    a074:	e595900c 	ldr	r9, [r5, #12]
    a078:	e3590000 	cmp	r9, #0
    a07c:	0affff83 	beq	9e90 <block_filter+0x474>
	      len = a->buflen;
    a080:	e5956014 	ldr	r6, [r5, #20]
	      if (len < 192){
    a084:	e35600bf 	cmp	r6, #191	; 0xbf
    a088:	9a000047 	bls	a1ac <block_filter+0x790>
	      else if (len < 8384)
    a08c:	e3560d83 	cmp	r6, #8384	; 0x20c0
    a090:	2a000019 	bcs	a0fc <block_filter+0x6e0>
      printf("2 byte header partial: remaining length=%u\n", len );
    a094:	e59f01a0 	ldr	r0, [pc, #416]	; a23c <block_filter+0x820>
		  if (!(rc = iobuf_put (chain, ((len - 192) / 256) + 192)))
    a098:	e24680c0 	sub	r8, r6, #192	; 0xc0
      printf("2 byte header partial: remaining length=%u\n", len );
    a09c:	e1a01006 	mov	r1, r6
    a0a0:	e08f0000 	add	r0, pc, r0
    a0a4:	eb001cd6 	bl	11404 <tfp_printf>
		  if (!(rc = iobuf_put (chain, ((len - 192) / 256) + 192)))
    a0a8:	e1a01428 	lsr	r1, r8, #8
    a0ac:	e1a00007 	mov	r0, r7
    a0b0:	e28110c0 	add	r1, r1, #192	; 0xc0
    a0b4:	ebfffdf7 	bl	9898 <iobuf_writebyte>
    a0b8:	e2504000 	subs	r4, r0, #0
    a0bc:	0a00004e 	beq	a1fc <block_filter+0x7e0>
	      if (rc)
    a0c0:	e2544000 	subs	r4, r4, #0
	      xfree (a->buffer);
    a0c4:	e5950010 	ldr	r0, [r5, #16]
	      if (rc)
    a0c8:	13a04001 	movne	r4, #1
    a0cc:	e2649000 	rsb	r9, r4, #0
	      xfree (a->buffer);
    a0d0:	eb0013c5 	bl	efec <xfree>
	      a->buffer = NULL;
    a0d4:	e3a03000 	mov	r3, #0
    a0d8:	e5853010 	str	r3, [r5, #16]
	      a->buflen = 0;
    a0dc:	e5853014 	str	r3, [r5, #20]
    a0e0:	eaffff6a 	b	9e90 <block_filter+0x474>
		a->buffer = xmalloc (OP_MIN_PARTIAL_CHUNK);
    a0e4:	e3a00c02 	mov	r0, #512	; 0x200
    a0e8:	eb0013cb 	bl	f01c <xmalloc>
    a0ec:	e1a03000 	mov	r3, r0
    a0f0:	e5853010 	str	r3, [r5, #16]
	      memcpy (a->buffer + a->buflen, buf, size);
    a0f4:	e5950014 	ldr	r0, [r5, #20]
    a0f8:	eaffffa0 	b	9f80 <block_filter+0x564>
      printf("4 byte header partial: remaining length=%u\n", len );
    a0fc:	e59f013c 	ldr	r0, [pc, #316]	; a240 <block_filter+0x824>
    a100:	e1a01006 	mov	r1, r6
    a104:	e08f0000 	add	r0, pc, r0
    a108:	eb001cbd 	bl	11404 <tfp_printf>
		  if (!(rc = iobuf_put (chain, 0xff)))
    a10c:	e3a010ff 	mov	r1, #255	; 0xff
    a110:	e1a00007 	mov	r0, r7
    a114:	ebfffddf 	bl	9898 <iobuf_writebyte>
    a118:	e2504000 	subs	r4, r0, #0
    a11c:	1affffe7 	bne	a0c0 <block_filter+0x6a4>
		    if (!(rc = iobuf_put (chain, (len >> 24) & 0xff)))
    a120:	e1a01c26 	lsr	r1, r6, #24
    a124:	e1a00007 	mov	r0, r7
    a128:	ebfffdda 	bl	9898 <iobuf_writebyte>
    a12c:	e2504000 	subs	r4, r0, #0
    a130:	1affffe2 	bne	a0c0 <block_filter+0x6a4>
		      if (!(rc = iobuf_put (chain, (len >> 16) & 0xff)))
    a134:	e7e71856 	ubfx	r1, r6, #16, #8
    a138:	e1a00007 	mov	r0, r7
    a13c:	ebfffdd5 	bl	9898 <iobuf_writebyte>
    a140:	e2504000 	subs	r4, r0, #0
    a144:	1affffdd 	bne	a0c0 <block_filter+0x6a4>
			if (!(rc = iobuf_put (chain, (len >> 8) & 0xff)))
    a148:	e7e71456 	ubfx	r1, r6, #8, #8
    a14c:	e1a00007 	mov	r0, r7
    a150:	ebfffdd0 	bl	9898 <iobuf_writebyte>
    a154:	e2504000 	subs	r4, r0, #0
    a158:	1affffd8 	bne	a0c0 <block_filter+0x6a4>
			  rc = iobuf_put (chain, len & 0xff);
    a15c:	e6ef1076 	uxtb	r1, r6
    a160:	e1a00007 	mov	r0, r7
    a164:	ebfffdcb 	bl	9898 <iobuf_writebyte>
    a168:	e1a04000 	mov	r4, r0
	      if (!rc && len){
    a16c:	e16f3f14 	clz	r3, r4
    a170:	e3560000 	cmp	r6, #0
    a174:	e1a032a3 	lsr	r3, r3, #5
    a178:	03a03000 	moveq	r3, #0
    a17c:	e3530000 	cmp	r3, #0
    a180:	0affffce 	beq	a0c0 <block_filter+0x6a4>
    printf("1 byte header partial: remaining length=%u\n", len );
    a184:	e59f00b8 	ldr	r0, [pc, #184]	; a244 <block_filter+0x828>
    a188:	e1a01006 	mov	r1, r6
    a18c:	e08f0000 	add	r0, pc, r0
    a190:	eb001c9b 	bl	11404 <tfp_printf>
		rc = iobuf_write (chain, a->buffer, len);
    a194:	e5951010 	ldr	r1, [r5, #16]
    a198:	e1a02006 	mov	r2, r6
    a19c:	e1a00007 	mov	r0, r7
    a1a0:	ebfffde7 	bl	9944 <iobuf_write>
    a1a4:	e1a04000 	mov	r4, r0
    a1a8:	eaffffc4 	b	a0c0 <block_filter+0x6a4>
		      rc = iobuf_put (chain, len);
    a1ac:	e1a01006 	mov	r1, r6
    a1b0:	e1a00007 	mov	r0, r7
    a1b4:	ebfffdb7 	bl	9898 <iobuf_writebyte>
    a1b8:	e1a04000 	mov	r4, r0
          printf("1 byte <192 partial: remaining length=%u\n", len );
    a1bc:	e1a01006 	mov	r1, r6
    a1c0:	e59f0080 	ldr	r0, [pc, #128]	; a248 <block_filter+0x82c>
    a1c4:	e08f0000 	add	r0, pc, r0
    a1c8:	eb001c8d 	bl	11404 <tfp_printf>
    a1cc:	eaffffe6 	b	a16c <block_filter+0x750>
			  printf ("block_filter: invalid 4 byte length\n");
    a1d0:	e59f0074 	ldr	r0, [pc, #116]	; a24c <block_filter+0x830>
			  rc = GPG_ERR_BAD_DATA;
    a1d4:	e3a09059 	mov	r9, #89	; 0x59
			  printf ("block_filter: invalid 4 byte length\n");
    a1d8:	e08f0000 	add	r0, pc, r0
    a1dc:	eb001c88 	bl	11404 <tfp_printf>
			  break;
    a1e0:	eafffe64 	b	9b78 <block_filter+0x15c>
		    a->buffer = xmalloc (OP_MIN_PARTIAL_CHUNK);
    a1e4:	e3a00c02 	mov	r0, #512	; 0x200
    a1e8:	eb00138b 	bl	f01c <xmalloc>
    a1ec:	e5850010 	str	r0, [r5, #16]
    a1f0:	eaffff1a 	b	9e60 <block_filter+0x444>
      while (!rc && size)
    a1f4:	e1a06009 	mov	r6, r9
    a1f8:	eafffe5e 	b	9b78 <block_filter+0x15c>
		    rc = iobuf_put (chain, ((len - 192) % 256));
    a1fc:	e6ef1078 	uxtb	r1, r8
    a200:	e1a00007 	mov	r0, r7
    a204:	ebfffda3 	bl	9898 <iobuf_writebyte>
    a208:	e1a04000 	mov	r4, r0
    a20c:	eaffffd6 	b	a16c <block_filter+0x750>
    a210:	00031f94 	.word	0x00031f94
    a214:	00000004 	.word	0x00000004
    a218:	0000caec 	.word	0x0000caec
    a21c:	0000ca7c 	.word	0x0000ca7c
    a220:	0000cacc 	.word	0x0000cacc
    a224:	0000c9cc 	.word	0x0000c9cc
    a228:	0000c8c4 	.word	0x0000c8c4
    a22c:	0000c940 	.word	0x0000c940
    a230:	0000c830 	.word	0x0000c830
    a234:	0000c708 	.word	0x0000c708
    a238:	0000c58c 	.word	0x0000c58c
    a23c:	0000c628 	.word	0x0000c628
    a240:	0000c5f0 	.word	0x0000c5f0
    a244:	0000c594 	.word	0x0000c594
    a248:	0000c4d8 	.word	0x0000c4d8
    a24c:	0000c434 	.word	0x0000c434

0000a250 <iobuf_writestr>:
{
    a250:	e92d4070 	push	{r4, r5, r6, lr}
  if (a->use == IOBUF_INPUT || a->use == IOBUF_INPUT_TEMP)
    a254:	e5d03000 	ldrb	r3, [r0]
    a258:	e3530001 	cmp	r3, #1
    a25c:	9a000008 	bls	a284 <iobuf_writestr+0x34>
  return iobuf_write (a, buf, strlen (buf));
    a260:	e1a04000 	mov	r4, r0
    a264:	e1a00001 	mov	r0, r1
    a268:	e1a05001 	mov	r5, r1
    a26c:	eb0021e9 	bl	12a18 <strlen>
    a270:	e1a02000 	mov	r2, r0
    a274:	e1a01005 	mov	r1, r5
    a278:	e1a00004 	mov	r0, r4
}
    a27c:	e8bd4070 	pop	{r4, r5, r6, lr}
  return iobuf_write (a, buf, strlen (buf));
    a280:	eafffdaf 	b	9944 <iobuf_write>
      printf ("iobuf_writestr called on an input pipeline!\n");
    a284:	e59f000c 	ldr	r0, [pc, #12]	; a298 <iobuf_writestr+0x48>
    a288:	e08f0000 	add	r0, pc, r0
    a28c:	eb001c5c 	bl	11404 <tfp_printf>
}
    a290:	e3e00000 	mvn	r0, #0
    a294:	e8bd8070 	pop	{r4, r5, r6, pc}
    a298:	0000c4e4 	.word	0x0000c4e4

0000a29c <iobuf_temp_to_buffer>:
{
    a29c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a2a0:	e24dd03c 	sub	sp, sp, #60	; 0x3c
	printf ("Flushing iobuf %d.%d (%s) from iobuf_temp_to_buffer failed.  Ignoring.\n",
    a2a4:	e59fa0d8 	ldr	sl, [pc, #216]	; a384 <iobuf_temp_to_buffer+0xe8>
{
    a2a8:	e1a04000 	mov	r4, r0
    memcpy (buf, "?", 2);
    a2ac:	e59fb0d4 	ldr	fp, [pc, #212]	; a388 <iobuf_temp_to_buffer+0xec>
  size_t len = MAX_IOBUF_DESC;
    a2b0:	e3a09020 	mov	r9, #32
	printf ("Flushing iobuf %d.%d (%s) from iobuf_temp_to_buffer failed.  Ignoring.\n",
    a2b4:	e08fa00a 	add	sl, pc, sl
    memcpy (buf, "?", 2);
    a2b8:	e08fb00b 	add	fp, pc, fp
{
    a2bc:	e58d1008 	str	r1, [sp, #8]
    a2c0:	e58d200c 	str	r2, [sp, #12]
    a2c4:	ea000003 	b	a2d8 <iobuf_temp_to_buffer+0x3c>
      if (! a->chain)
    a2c8:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    a2cc:	e3530000 	cmp	r3, #0
    a2d0:	0a00001a 	beq	a340 <iobuf_temp_to_buffer+0xa4>
    a2d4:	e1a04003 	mov	r4, r3
      int rc = filter_flush (a);
    a2d8:	e1a00004 	mov	r0, r4
    a2dc:	ebfff7d7 	bl	8240 <filter_flush>
      if (rc)
    a2e0:	e3500000 	cmp	r0, #0
    a2e4:	0afffff7 	beq	a2c8 <iobuf_temp_to_buffer+0x2c>
  if (! a || ! a->filter)
    a2e8:	e594602c 	ldr	r6, [r4, #44]	; 0x2c
    a->filter (a->filter_ov, IOBUFCTRL_DESC, NULL, buf, &len);
    a2ec:	e28d5018 	add	r5, sp, #24
	printf ("Flushing iobuf %d.%d (%s) from iobuf_temp_to_buffer failed.  Ignoring.\n",
    a2f0:	e5947040 	ldr	r7, [r4, #64]	; 0x40
    a->filter (a->filter_ov, IOBUFCTRL_DESC, NULL, buf, &len);
    a2f4:	e28dc014 	add	ip, sp, #20
	printf ("Flushing iobuf %d.%d (%s) from iobuf_temp_to_buffer failed.  Ignoring.\n",
    a2f8:	e5948044 	ldr	r8, [r4, #68]	; 0x44
  if (! a || ! a->filter)
    a2fc:	e3560000 	cmp	r6, #0
  size_t len = MAX_IOBUF_DESC;
    a300:	e58d9014 	str	r9, [sp, #20]
    a->filter (a->filter_ov, IOBUFCTRL_DESC, NULL, buf, &len);
    a304:	e1a03005 	mov	r3, r5
    a308:	e3a02000 	mov	r2, #0
    a30c:	e3a01005 	mov	r1, #5
  if (! a || ! a->filter)
    a310:	0a000016 	beq	a370 <iobuf_temp_to_buffer+0xd4>
    a->filter (a->filter_ov, IOBUFCTRL_DESC, NULL, buf, &len);
    a314:	e5940030 	ldr	r0, [r4, #48]	; 0x30
    a318:	e58dc000 	str	ip, [sp]
    a31c:	e12fff36 	blx	r6
	printf ("Flushing iobuf %d.%d (%s) from iobuf_temp_to_buffer failed.  Ignoring.\n",
    a320:	e1a03005 	mov	r3, r5
    a324:	e1a02008 	mov	r2, r8
    a328:	e1a01007 	mov	r1, r7
    a32c:	e1a0000a 	mov	r0, sl
    a330:	eb001c33 	bl	11404 <tfp_printf>
      if (! a->chain)
    a334:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    a338:	e3530000 	cmp	r3, #0
    a33c:	1affffe4 	bne	a2d4 <iobuf_temp_to_buffer+0x38>
  n = a->d.len;
    a340:	e594201c 	ldr	r2, [r4, #28]
  if (n > buflen)
    a344:	e59d300c 	ldr	r3, [sp, #12]
  memcpy (buffer, a->d.buf, n);
    a348:	e5941020 	ldr	r1, [r4, #32]
    a34c:	e1520003 	cmp	r2, r3
    a350:	e59d0008 	ldr	r0, [sp, #8]
    a354:	31a04002 	movcc	r4, r2
    a358:	21a04003 	movcs	r4, r3
    a35c:	e1a02004 	mov	r2, r4
    a360:	eb00135b 	bl	f0d4 <memcpy>
}
    a364:	e1a00004 	mov	r0, r4
    a368:	e28dd03c 	add	sp, sp, #60	; 0x3c
    a36c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy (buf, "?", 2);
    a370:	e3a02002 	mov	r2, #2
    a374:	e1a0100b 	mov	r1, fp
    a378:	e1a00005 	mov	r0, r5
    a37c:	eb001354 	bl	f0d4 <memcpy>
    a380:	eaffffe6 	b	a320 <iobuf_temp_to_buffer+0x84>
    a384:	0000c4e8 	.word	0x0000c4e8
    a388:	0000bd3c 	.word	0x0000bd3c

0000a38c <iobuf_copy>:
{
    a38c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a390:	e1a08000 	mov	r8, r0
  printf("iobuf_copy\n");
    a394:	e59f0094 	ldr	r0, [pc, #148]	; a430 <iobuf_copy+0xa4>
{
    a398:	e1a09001 	mov	r9, r1
  printf("iobuf_copy\n");
    a39c:	e08f0000 	add	r0, pc, r0
    a3a0:	eb001c17 	bl	11404 <tfp_printf>
  if (iobuf_error (dest))
    a3a4:	e5985028 	ldr	r5, [r8, #40]	; 0x28
    a3a8:	e3550000 	cmp	r5, #0
    return (size_t)(-1);
    a3ac:	13e07000 	mvnne	r7, #0
  if (iobuf_error (dest))
    a3b0:	1a000018 	bne	a418 <iobuf_copy+0x8c>
  temp = xmalloc (temp_size);
    a3b4:	e3a00902 	mov	r0, #32768	; 0x8000
  size_t nwrote = 0;
    a3b8:	e1a07005 	mov	r7, r5
  temp = xmalloc (temp_size);
    a3bc:	eb001316 	bl	f01c <xmalloc>
    a3c0:	e1a06000 	mov	r6, r0
    a3c4:	ea000005 	b	a3e0 <iobuf_copy+0x54>
    a3c8:	e1550004 	cmp	r5, r4
    a3cc:	31a05004 	movcc	r5, r4
      err = iobuf_write (dest, temp, nread);
    a3d0:	ebfffd5b 	bl	9944 <iobuf_write>
      if (err)
    a3d4:	e3500000 	cmp	r0, #0
    a3d8:	1a00000a 	bne	a408 <iobuf_copy+0x7c>
      nwrote += nread;
    a3dc:	e0877004 	add	r7, r7, r4
      nread = iobuf_read (source, temp, temp_size);
    a3e0:	e1a01006 	mov	r1, r6
    a3e4:	e3a02902 	mov	r2, #32768	; 0x8000
    a3e8:	e1a00009 	mov	r0, r9
    a3ec:	ebfffcb8 	bl	96d4 <iobuf_read>
    a3f0:	e1a04000 	mov	r4, r0
      err = iobuf_write (dest, temp, nread);
    a3f4:	e1a01006 	mov	r1, r6
      if (nread == -1)
    a3f8:	e3740001 	cmn	r4, #1
      err = iobuf_write (dest, temp, nread);
    a3fc:	e1a00008 	mov	r0, r8
    a400:	e1a02004 	mov	r2, r4
      if (nread == -1)
    a404:	1affffef 	bne	a3c8 <iobuf_copy+0x3c>
  if (max_read)
    a408:	e3550000 	cmp	r5, #0
    a40c:	1a000003 	bne	a420 <iobuf_copy+0x94>
  xfree (temp);
    a410:	e1a00006 	mov	r0, r6
    a414:	eb0012f4 	bl	efec <xfree>
}
    a418:	e1a00007 	mov	r0, r7
    a41c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    wipememory (temp, max_read);
    a420:	e1a01005 	mov	r1, r5
    a424:	e1a00006 	mov	r0, r6
    a428:	eb001366 	bl	f1c8 <wipememory>
    a42c:	eafffff7 	b	a410 <iobuf_copy+0x84>
    a430:	0000c448 	.word	0x0000c448

0000a434 <iobuf_flush_temp>:
{
    a434:	e92d4010 	push	{r4, lr}
    a438:	e1a04000 	mov	r4, r0
  if (temp->use == IOBUF_INPUT || temp->use == IOBUF_INPUT_TEMP)
    a43c:	e5d03000 	ldrb	r3, [r0]
    a440:	e3530001 	cmp	r3, #1
    a444:	9a00000a 	bls	a474 <iobuf_flush_temp+0x40>
  while (temp->chain)
    a448:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    a44c:	e3530000 	cmp	r3, #0
    a450:	08bd8010 	popeq	{r4, pc}
    iobuf_pop_filter (temp, temp->filter, NULL);
    a454:	e594102c 	ldr	r1, [r4, #44]	; 0x2c
    a458:	e3a02000 	mov	r2, #0
    a45c:	e1a00004 	mov	r0, r4
    a460:	ebfffb25 	bl	90fc <iobuf_pop_filter>
  while (temp->chain)
    a464:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    a468:	e3530000 	cmp	r3, #0
    a46c:	1afffff8 	bne	a454 <iobuf_flush_temp+0x20>
    a470:	e8bd8010 	pop	{r4, pc}
    printf ("iobuf_flush_temp called on an input pipeline!\n");
    a474:	e59f0008 	ldr	r0, [pc, #8]	; a484 <iobuf_flush_temp+0x50>
    a478:	e08f0000 	add	r0, pc, r0
    a47c:	eb001be0 	bl	11404 <tfp_printf>
    a480:	eafffff0 	b	a448 <iobuf_flush_temp+0x14>
    a484:	0000c378 	.word	0x0000c378

0000a488 <iobuf_write_temp>:
{
    a488:	e92d4070 	push	{r4, r5, r6, lr}
    a48c:	e1a04001 	mov	r4, r1
    a490:	e1a05000 	mov	r5, r0
  iobuf_flush_temp (source);
    a494:	e1a00001 	mov	r0, r1
    a498:	ebffffe5 	bl	a434 <iobuf_flush_temp>
  return iobuf_write (dest, source->d.buf, source->d.len);
    a49c:	e594201c 	ldr	r2, [r4, #28]
    a4a0:	e1a00005 	mov	r0, r5
    a4a4:	e5941020 	ldr	r1, [r4, #32]
}
    a4a8:	e8bd4070 	pop	{r4, r5, r6, lr}
  return iobuf_write (dest, source->d.buf, source->d.len);
    a4ac:	eafffd24 	b	9944 <iobuf_write>

0000a4b0 <iobuf_set_limit>:
  a->ntotal += a->nbytes;
    a4b0:	e590300c 	ldr	r3, [r0, #12]
  a->nbytes = 0;
    a4b4:	e3a0c000 	mov	ip, #0
  if (nlimit)
    a4b8:	e051200c 	subs	r2, r1, ip
  a->nlimit = nlimit;
    a4bc:	e5801004 	str	r1, [r0, #4]
  if (nlimit)
    a4c0:	13a02001 	movne	r2, #1
    a4c4:	e5802010 	str	r2, [r0, #16]
  a->ntotal += a->nbytes;
    a4c8:	e5902008 	ldr	r2, [r0, #8]
  a->nbytes = 0;
    a4cc:	e580c008 	str	ip, [r0, #8]
  a->ntotal += a->nbytes;
    a4d0:	e0833002 	add	r3, r3, r2
    a4d4:	e580300c 	str	r3, [r0, #12]
}
    a4d8:	e12fff1e 	bx	lr

0000a4dc <iobuf_get_filelength>:
{
    a4dc:	e59f104c 	ldr	r1, [pc, #76]	; a530 <iobuf_get_filelength+0x54>
    a4e0:	e08f1001 	add	r1, pc, r1
  for ( ; a->chain; a = a->chain )
    a4e4:	e1a03000 	mov	r3, r0
    a4e8:	e590003c 	ldr	r0, [r0, #60]	; 0x3c
    a4ec:	e3500000 	cmp	r0, #0
    a4f0:	1afffffb 	bne	a4e4 <iobuf_get_filelength+0x8>
  if (a->filter != file_filter)
    a4f4:	e59f2038 	ldr	r2, [pc, #56]	; a534 <iobuf_get_filelength+0x58>
    a4f8:	e593002c 	ldr	r0, [r3, #44]	; 0x2c
    a4fc:	e7913002 	ldr	r3, [r1, r2]
    a500:	e1500003 	cmp	r0, r3
    a504:	0a000002 	beq	a514 <iobuf_get_filelength+0x38>
}
    a508:	e3a00000 	mov	r0, #0
    a50c:	e3a01000 	mov	r1, #0
    a510:	e12fff1e 	bx	lr
    printf("fstat() failed: %s\n");//, strerror(errno) );
    a514:	e59f001c 	ldr	r0, [pc, #28]	; a538 <iobuf_get_filelength+0x5c>
{
    a518:	e92d4010 	push	{r4, lr}
    printf("fstat() failed: %s\n");//, strerror(errno) );
    a51c:	e08f0000 	add	r0, pc, r0
    a520:	eb001bb7 	bl	11404 <tfp_printf>
}
    a524:	e3a00000 	mov	r0, #0
    a528:	e3a01000 	mov	r1, #0
    a52c:	e8bd8010 	pop	{r4, pc}
    a530:	000314dc 	.word	0x000314dc
    a534:	00000044 	.word	0x00000044
    a538:	0000c304 	.word	0x0000c304

0000a53c <iobuf_get_fd>:
{
    a53c:	e92d4030 	push	{r4, r5, lr}
    a540:	e24dd00c 	sub	sp, sp, #12
    a544:	e59f5048 	ldr	r5, [pc, #72]	; a594 <iobuf_get_fd+0x58>
    a548:	e58d0004 	str	r0, [sp, #4]
  printf("iobuf_get_fd\n");
    a54c:	e59f0044 	ldr	r0, [pc, #68]	; a598 <iobuf_get_fd+0x5c>
{
    a550:	e59d4004 	ldr	r4, [sp, #4]
  printf("iobuf_get_fd\n");
    a554:	e08f0000 	add	r0, pc, r0
{
    a558:	e08f5005 	add	r5, pc, r5
  printf("iobuf_get_fd\n");
    a55c:	eb001ba8 	bl	11404 <tfp_printf>
  for (; a->chain; a = a->chain)
    a560:	e1a03004 	mov	r3, r4
    a564:	e594403c 	ldr	r4, [r4, #60]	; 0x3c
    a568:	e3540000 	cmp	r4, #0
    a56c:	1afffffb 	bne	a560 <iobuf_get_fd+0x24>
  if (a->filter != file_filter)
    a570:	e59f2024 	ldr	r2, [pc, #36]	; a59c <iobuf_get_fd+0x60>
    a574:	e593102c 	ldr	r1, [r3, #44]	; 0x2c
    a578:	e7952002 	ldr	r2, [r5, r2]
    a57c:	e1510002 	cmp	r1, r2
    return -1;
    a580:	13e00000 	mvnne	r0, #0
    gnupg_fd_t fp = b->fp;
    a584:	05933030 	ldreq	r3, [r3, #48]	; 0x30
    a588:	05930000 	ldreq	r0, [r3]
}
    a58c:	e28dd00c 	add	sp, sp, #12
    a590:	e8bd8030 	pop	{r4, r5, pc}
    a594:	00031464 	.word	0x00031464
    a598:	0000c2e0 	.word	0x0000c2e0
    a59c:	00000044 	.word	0x00000044

0000a5a0 <iobuf_tell>:
  return a->ntotal + a->nbytes;
    a5a0:	e590200c 	ldr	r2, [r0, #12]
    a5a4:	e5900008 	ldr	r0, [r0, #8]
}
    a5a8:	e0820000 	add	r0, r2, r0
    a5ac:	e12fff1e 	bx	lr

0000a5b0 <iobuf_seek>:
{
    a5b0:	e92d4010 	push	{r4, lr}
    a5b4:	e1a04000 	mov	r4, r0
  if (a->use == IOBUF_OUTPUT || a->use == IOBUF_INPUT)
    a5b8:	e5d03000 	ldrb	r3, [r0]
{
    a5bc:	e59f20bc 	ldr	r2, [pc, #188]	; a680 <iobuf_seek+0xd0>
  if (a->use == IOBUF_OUTPUT || a->use == IOBUF_INPUT)
    a5c0:	e31300fd 	tst	r3, #253	; 0xfd
{
    a5c4:	e08f2002 	add	r2, pc, r2
  if (a->use == IOBUF_OUTPUT || a->use == IOBUF_INPUT)
    a5c8:	0a000018 	beq	a630 <iobuf_seek+0x80>
  if (a->chain)
    a5cc:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
  a->d.start = 0;
    a5d0:	e3a03000 	mov	r3, #0
    a5d4:	e5803018 	str	r3, [r0, #24]
  if (a->chain)
    a5d8:	e1520003 	cmp	r2, r3
  a->nbytes = 0;
    a5dc:	e5803008 	str	r3, [r0, #8]
  a->nlimit = 0;
    a5e0:	e5803004 	str	r3, [r0, #4]
  a->nofast = 0;
    a5e4:	e5803010 	str	r3, [r0, #16]
  a->ntotal = newpos;
    a5e8:	e580100c 	str	r1, [r0, #12]
  a->error = 0;
    a5ec:	e5803028 	str	r3, [r0, #40]	; 0x28
  if (a->chain)
    a5f0:	0a00000c 	beq	a628 <iobuf_seek+0x78>
    printf ("iobuf_pop_filter called in iobuf_seek - please report\n");
    a5f4:	e59f0088 	ldr	r0, [pc, #136]	; a684 <iobuf_seek+0xd4>
    a5f8:	e08f0000 	add	r0, pc, r0
    a5fc:	eb001b80 	bl	11404 <tfp_printf>
  while (a->chain)
    a600:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    a604:	e3530000 	cmp	r3, #0
    a608:	0a000006 	beq	a628 <iobuf_seek+0x78>
    iobuf_pop_filter (a, a->filter, NULL);
    a60c:	e594102c 	ldr	r1, [r4, #44]	; 0x2c
    a610:	e3a02000 	mov	r2, #0
    a614:	e1a00004 	mov	r0, r4
    a618:	ebfffab7 	bl	90fc <iobuf_pop_filter>
  while (a->chain)
    a61c:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    a620:	e3530000 	cmp	r3, #0
    a624:	1afffff8 	bne	a60c <iobuf_seek+0x5c>
  return 0;
    a628:	e3a00000 	mov	r0, #0
}
    a62c:	e8bd8010 	pop	{r4, pc}
      for (; a->chain; a = a->chain)
    a630:	e1a03004 	mov	r3, r4
    a634:	e594403c 	ldr	r4, [r4, #60]	; 0x3c
    a638:	e3540000 	cmp	r4, #0
    a63c:	1afffffb 	bne	a630 <iobuf_seek+0x80>
      if (a->filter != file_filter)
    a640:	e59f0040 	ldr	r0, [pc, #64]	; a688 <iobuf_seek+0xd8>
    a644:	e7922000 	ldr	r2, [r2, r0]
    a648:	e593002c 	ldr	r0, [r3, #44]	; 0x2c
    a64c:	e1500002 	cmp	r0, r2
    a650:	1a000008 	bne	a678 <iobuf_seek+0xc8>
      a->d.len = 0;
    a654:	e583401c 	str	r4, [r3, #28]
  return 0;
    a658:	e3a00000 	mov	r0, #0
  a->d.start = 0;
    a65c:	e5834018 	str	r4, [r3, #24]
  a->nbytes = 0;
    a660:	e5834008 	str	r4, [r3, #8]
  a->nlimit = 0;
    a664:	e5834004 	str	r4, [r3, #4]
  a->nofast = 0;
    a668:	e5834010 	str	r4, [r3, #16]
  a->ntotal = newpos;
    a66c:	e583100c 	str	r1, [r3, #12]
  a->error = 0;
    a670:	e5834028 	str	r4, [r3, #40]	; 0x28
}
    a674:	e8bd8010 	pop	{r4, pc}
	return -1;
    a678:	e3e00000 	mvn	r0, #0
    a67c:	e8bd8010 	pop	{r4, pc}
    a680:	000313f8 	.word	0x000313f8
    a684:	0000c24c 	.word	0x0000c24c
    a688:	00000044 	.word	0x00000044

0000a68c <iobuf_get_real_fname>:
{
    a68c:	e59f2058 	ldr	r2, [pc, #88]	; a6ec <iobuf_get_real_fname+0x60>
    a690:	e1a03000 	mov	r3, r0
  if (a->real_fname)
    a694:	e5900038 	ldr	r0, [r0, #56]	; 0x38
{
    a698:	e08f2002 	add	r2, pc, r2
  if (a->real_fname)
    a69c:	e3500000 	cmp	r0, #0
    a6a0:	112fff1e 	bxne	lr
  for (; a; a = a->chain)
    a6a4:	e2530000 	subs	r0, r3, #0
    a6a8:	012fff1e 	bxeq	lr
    if (!a->chain && a->filter == file_filter)
    a6ac:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
    a6b0:	e3530000 	cmp	r3, #0
    a6b4:	1afffffa 	bne	a6a4 <iobuf_get_real_fname+0x18>
    a6b8:	e59f1030 	ldr	r1, [pc, #48]	; a6f0 <iobuf_get_real_fname+0x64>
    a6bc:	e590c02c 	ldr	ip, [r0, #44]	; 0x2c
    a6c0:	e7921001 	ldr	r1, [r2, r1]
    a6c4:	e15c0001 	cmp	ip, r1
    a6c8:	1afffff5 	bne	a6a4 <iobuf_get_real_fname+0x18>
	file_filter_ctx_t *b = a->filter_ov;
    a6cc:	e5900030 	ldr	r0, [r0, #48]	; 0x30
	return b->print_only_name ? NULL : b->fname;
    a6d0:	e5902010 	ldr	r2, [r0, #16]
    a6d4:	e3520000 	cmp	r2, #0
    a6d8:	1a000001 	bne	a6e4 <iobuf_get_real_fname+0x58>
    a6dc:	e2800036 	add	r0, r0, #54	; 0x36
    a6e0:	e12fff1e 	bx	lr
    a6e4:	e1a00003 	mov	r0, r3
}
    a6e8:	e12fff1e 	bx	lr
    a6ec:	00031324 	.word	0x00031324
    a6f0:	00000044 	.word	0x00000044

0000a6f4 <iobuf_cancel>:
{
    a6f4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  if (a && a->use == IOBUF_OUTPUT)
    a6f8:	e2506000 	subs	r6, r0, #0
{
    a6fc:	e24dd014 	sub	sp, sp, #20
  if (a && a->use == IOBUF_OUTPUT)
    a700:	0a000010 	beq	a748 <iobuf_cancel+0x54>
    a704:	e5d63000 	ldrb	r3, [r6]
    a708:	e3530002 	cmp	r3, #2
    a70c:	0a000011 	beq	a758 <iobuf_cancel+0x64>
{
    a710:	e1a04006 	mov	r4, r6
	a2->filter (a2->filter_ov, IOBUFCTRL_CANCEL, a2->chain, NULL, &dummy);
    a714:	e28d700c 	add	r7, sp, #12
      if (a2->filter)
    a718:	e594502c 	ldr	r5, [r4, #44]	; 0x2c
	a2->filter (a2->filter_ov, IOBUFCTRL_CANCEL, a2->chain, NULL, &dummy);
    a71c:	e3a03000 	mov	r3, #0
    a720:	e3a01006 	mov	r1, #6
      if (a2->filter)
    a724:	e1550003 	cmp	r5, r3
    a728:	0a000003 	beq	a73c <iobuf_cancel+0x48>
	a2->filter (a2->filter_ov, IOBUFCTRL_CANCEL, a2->chain, NULL, &dummy);
    a72c:	e594203c 	ldr	r2, [r4, #60]	; 0x3c
    a730:	e5940030 	ldr	r0, [r4, #48]	; 0x30
    a734:	e58d7000 	str	r7, [sp]
    a738:	e12fff35 	blx	r5
  for (a2 = a; a2; a2 = a2->chain)
    a73c:	e594403c 	ldr	r4, [r4, #60]	; 0x3c
    a740:	e3540000 	cmp	r4, #0
    a744:	1afffff3 	bne	a718 <iobuf_cancel+0x24>
  rc = iobuf_close (a);
    a748:	e1a00006 	mov	r0, r6
}
    a74c:	e28dd014 	add	sp, sp, #20
    a750:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  rc = iobuf_close (a);
    a754:	eafff807 	b	8778 <iobuf_close>
      s = iobuf_get_real_fname (a);
    a758:	ebffffcb 	bl	a68c <iobuf_get_real_fname>
      if (s && *s)
    a75c:	eaffffeb 	b	a710 <iobuf_cancel+0x1c>

0000a760 <iobuf_get_fname>:
{
    a760:	e59f103c 	ldr	r1, [pc, #60]	; a7a4 <iobuf_get_fname+0x44>
    a764:	e08f1001 	add	r1, pc, r1
  for (; a; a = a->chain)
    a768:	ea000000 	b	a770 <iobuf_get_fname+0x10>
    a76c:	e1a00003 	mov	r0, r3
    a770:	e3500000 	cmp	r0, #0
    a774:	012fff1e 	bxeq	lr
    if (!a->chain && a->filter == file_filter)
    a778:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    a77c:	e3530000 	cmp	r3, #0
    a780:	1afffff9 	bne	a76c <iobuf_get_fname+0xc>
    a784:	e59f201c 	ldr	r2, [pc, #28]	; a7a8 <iobuf_get_fname+0x48>
    a788:	e590c02c 	ldr	ip, [r0, #44]	; 0x2c
    a78c:	e7912002 	ldr	r2, [r1, r2]
    a790:	e15c0002 	cmp	ip, r2
	return b->fname;
    a794:	05900030 	ldreq	r0, [r0, #48]	; 0x30
    a798:	02800036 	addeq	r0, r0, #54	; 0x36
  for (; a; a = a->chain)
    a79c:	11a00003 	movne	r0, r3
    a7a0:	e12fff1e 	bx	lr
    a7a4:	00031258 	.word	0x00031258
    a7a8:	00000044 	.word	0x00000044

0000a7ac <iobuf_get_fname_nonnull>:
{
    a7ac:	e92d4010 	push	{r4, lr}
  fname = iobuf_get_fname (a);
    a7b0:	ebffffea 	bl	a760 <iobuf_get_fname>
  return fname? fname : "[?]";
    a7b4:	e3500000 	cmp	r0, #0
    a7b8:	18bd8010 	popne	{r4, pc}
    a7bc:	e59f0004 	ldr	r0, [pc, #4]	; a7c8 <iobuf_get_fname_nonnull+0x1c>
    a7c0:	e08f0000 	add	r0, pc, r0
}
    a7c4:	e8bd8010 	pop	{r4, pc}
    a7c8:	0000c0bc 	.word	0x0000c0bc

0000a7cc <iobuf_set_partial_body_length_mode>:
{
    a7cc:	e92d4070 	push	{r4, r5, r6, lr}
    a7d0:	e1a04000 	mov	r4, r0
  printf ("iobuf_set_partial_body_length_mode %d\n", len);
    a7d4:	e59f00b8 	ldr	r0, [pc, #184]	; a894 <iobuf_set_partial_body_length_mode+0xc8>
{
    a7d8:	e1a05001 	mov	r5, r1
  printf ("iobuf_set_partial_body_length_mode %d\n", len);
    a7dc:	e08f0000 	add	r0, pc, r0
    a7e0:	eb001b07 	bl	11404 <tfp_printf>
  if (!len)
    a7e4:	e3550000 	cmp	r5, #0
    a7e8:	1a000015 	bne	a844 <iobuf_set_partial_body_length_mode+0x78>
      if (a->use == IOBUF_INPUT)
    a7ec:	e5d43000 	ldrb	r3, [r4]
    a7f0:	e3530000 	cmp	r3, #0
    a7f4:	0a00000e 	beq	a834 <iobuf_set_partial_body_length_mode+0x68>
      printf ("iobuf_pop_filter called in set_partial_block_mode");
    a7f8:	e59f0098 	ldr	r0, [pc, #152]	; a898 <iobuf_set_partial_body_length_mode+0xcc>
      printf (a->filter == block_filter);
    a7fc:	e59f5098 	ldr	r5, [pc, #152]	; a89c <iobuf_set_partial_body_length_mode+0xd0>
      printf ("iobuf_pop_filter called in set_partial_block_mode");
    a800:	e08f0000 	add	r0, pc, r0
      printf (a->filter == block_filter);
    a804:	e08f5005 	add	r5, pc, r5
      printf ("iobuf_pop_filter called in set_partial_block_mode");
    a808:	eb001afd 	bl	11404 <tfp_printf>
      printf (a->filter == block_filter);
    a80c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a810:	e0400005 	sub	r0, r0, r5
    a814:	e16f0f10 	clz	r0, r0
    a818:	e1a002a0 	lsr	r0, r0, #5
    a81c:	eb001af8 	bl	11404 <tfp_printf>
      iobuf_pop_filter (a, block_filter, NULL);
    a820:	e1a01005 	mov	r1, r5
    a824:	e1a00004 	mov	r0, r4
    a828:	e3a02000 	mov	r2, #0
}
    a82c:	e8bd4070 	pop	{r4, r5, r6, lr}
      iobuf_pop_filter (a, block_filter, NULL);
    a830:	eafffa31 	b	90fc <iobuf_pop_filter>
	printf ("iobuf_pop_filter called in set_partial_block_mode"
    a834:	e59f0064 	ldr	r0, [pc, #100]	; a8a0 <iobuf_set_partial_body_length_mode+0xd4>
    a838:	e08f0000 	add	r0, pc, r0
    a83c:	eb001af0 	bl	11404 <tfp_printf>
    a840:	eaffffec 	b	a7f8 <iobuf_set_partial_body_length_mode+0x2c>
      block_filter_ctx_t *ctx = xcalloc (1, sizeof *ctx);
    a844:	e3a01020 	mov	r1, #32
    a848:	e3a00001 	mov	r0, #1
    a84c:	eb00120f 	bl	f090 <xcalloc>
      ctx->use = a->use;
    a850:	e5d41000 	ldrb	r1, [r4]
      ctx->partial = 1;
    a854:	e3a03001 	mov	r3, #1
    a858:	e580300c 	str	r3, [r0, #12]
      ctx->size = 0;
    a85c:	e3a03000 	mov	r3, #0
      ctx->use = a->use;
    a860:	e5801000 	str	r1, [r0]
      block_filter_ctx_t *ctx = xcalloc (1, sizeof *ctx);
    a864:	e1a06000 	mov	r6, r0
      ctx->size = 0;
    a868:	e5803004 	str	r3, [r0, #4]
      printf ("pushing partial block filter %d\n", ctx->use);
    a86c:	e59f0030 	ldr	r0, [pc, #48]	; a8a4 <iobuf_set_partial_body_length_mode+0xd8>
      ctx->first_c = len;
    a870:	e5865018 	str	r5, [r6, #24]
      printf ("pushing partial block filter %d\n", ctx->use);
    a874:	e08f0000 	add	r0, pc, r0
    a878:	eb001ae1 	bl	11404 <tfp_printf>
      iobuf_push_filter (a, block_filter, ctx);
    a87c:	e59f1024 	ldr	r1, [pc, #36]	; a8a8 <iobuf_set_partial_body_length_mode+0xdc>
    a880:	e1a02006 	mov	r2, r6
    a884:	e1a00004 	mov	r0, r4
    a888:	e08f1001 	add	r1, pc, r1
}
    a88c:	e8bd4070 	pop	{r4, r5, r6, lr}
      iobuf_push_filter (a, block_filter, ctx);
    a890:	eafffa17 	b	90f4 <iobuf_push_filter>
    a894:	0000c0a4 	.word	0x0000c0a4
    a898:	0000c0ec 	.word	0x0000c0ec
    a89c:	fffff210 	.word	0xfffff210
    a8a0:	0000c070 	.word	0x0000c070
    a8a4:	0000c0ac 	.word	0x0000c0ac
    a8a8:	fffff18c 	.word	0xfffff18c

0000a8ac <iobuf_read_line>:
{
    a8ac:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a8b0:	e24dd00c 	sub	sp, sp, #12
  char *buffer = (char *)*addr_of_buffer;
    a8b4:	e591b000 	ldr	fp, [r1]
{
    a8b8:	e1a07001 	mov	r7, r1
  unsigned length = *length_of_buffer;
    a8bc:	e592a000 	ldr	sl, [r2]
{
    a8c0:	e1a08002 	mov	r8, r2
  unsigned maxlen = *max_length;
    a8c4:	e5936000 	ldr	r6, [r3]
{
    a8c8:	e1a04000 	mov	r4, r0
  if (!buffer || length <= 1)
    a8cc:	e35b0000 	cmp	fp, #0
    a8d0:	135a0001 	cmpne	sl, #1
{
    a8d4:	e58d3004 	str	r3, [sp, #4]
  if (!buffer || length <= 1)
    a8d8:	9a00004c 	bls	aa10 <iobuf_read_line+0x164>
  p = buffer;
    a8dc:	e1a0900b 	mov	r9, fp
  unsigned nbytes = 0;
    a8e0:	e3a05000 	mov	r5, #0
  while ((c = iobuf_get (a)) != -1)
    a8e4:	ea00000f 	b	a928 <iobuf_read_line+0x7c>
    a8e8:	e5941008 	ldr	r1, [r4, #8]
    a8ec:	e5940020 	ldr	r0, [r4, #32]
    a8f0:	e584c018 	str	ip, [r4, #24]
    a8f4:	e2811001 	add	r1, r1, #1
    a8f8:	e5841008 	str	r1, [r4, #8]
    a8fc:	e7d01002 	ldrb	r1, [r0, r2]
    a900:	e1a00001 	mov	r0, r1
      *p++ = c;
    a904:	e1a02009 	mov	r2, r9
      if (c == '\n')
    a908:	e350000a 	cmp	r0, #10
      if (nbytes == length - 1)
    a90c:	e24ac001 	sub	ip, sl, #1
      nbytes++;
    a910:	e2855001 	add	r5, r5, #1
      *p++ = c;
    a914:	e4c21001 	strb	r1, [r2], #1
      if (c == '\n')
    a918:	0a000010 	beq	a960 <iobuf_read_line+0xb4>
      if (nbytes == length - 1)
    a91c:	e15c0005 	cmp	ip, r5
    a920:	0a000013 	beq	a974 <iobuf_read_line+0xc8>
	  length += length < 1024 ? 256 : 1024;
    a924:	e1a09002 	mov	r9, r2
  while ((c = iobuf_get (a)) != -1)
    a928:	e5942010 	ldr	r2, [r4, #16]
    a92c:	e1a00004 	mov	r0, r4
    a930:	e3520000 	cmp	r2, #0
    a934:	1a000004 	bne	a94c <iobuf_read_line+0xa0>
    a938:	e5942018 	ldr	r2, [r4, #24]
    a93c:	e594101c 	ldr	r1, [r4, #28]
    a940:	e282c001 	add	ip, r2, #1
    a944:	e1520001 	cmp	r2, r1
    a948:	3affffe6 	bcc	a8e8 <iobuf_read_line+0x3c>
    a94c:	ebfffaa7 	bl	93f0 <iobuf_readbyte>
    a950:	e3700001 	cmn	r0, #1
      *p++ = c;
    a954:	e6ef1070 	uxtb	r1, r0
  while ((c = iobuf_get (a)) != -1)
    a958:	1affffe9 	bne	a904 <iobuf_read_line+0x58>
    a95c:	e1a02009 	mov	r2, r9
  *p = 0;
    a960:	e3a03000 	mov	r3, #0
}
    a964:	e1a00005 	mov	r0, r5
  *p = 0;
    a968:	e5c23000 	strb	r3, [r2]
}
    a96c:	e28dd00c 	add	sp, sp, #12
    a970:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  if (length == maxlen)
    a974:	e15a0006 	cmp	sl, r6
	  buffer = xrealloc (buffer, length);
    a978:	e1a0000b 	mov	r0, fp
	  if (length == maxlen)
    a97c:	0a000013 	beq	a9d0 <iobuf_read_line+0x124>
	  length += length < 1024 ? 256 : 1024;
    a980:	e35a0b01 	cmp	sl, #1024	; 0x400
    a984:	33a01c01 	movcc	r1, #256	; 0x100
    a988:	23a01b01 	movcs	r1, #1024	; 0x400
    a98c:	e08aa001 	add	sl, sl, r1
	  if (length > maxlen)
    a990:	e156000a 	cmp	r6, sl
    a994:	31a0a006 	movcc	sl, r6
	  buffer = xrealloc (buffer, length);
    a998:	e1a0100a 	mov	r1, sl
    a99c:	eb0011d5 	bl	f0f8 <xrealloc>
	  *addr_of_buffer = (unsigned char *)buffer;
    a9a0:	e5870000 	str	r0, [r7]
	  buffer = xrealloc (buffer, length);
    a9a4:	e1a0b000 	mov	fp, r0
	  p = buffer + nbytes;
    a9a8:	e0802005 	add	r2, r0, r5
	  *length_of_buffer = length;
    a9ac:	e588a000 	str	sl, [r8]
	  p = buffer + nbytes;
    a9b0:	eaffffdb 	b	a924 <iobuf_read_line+0x78>
    a9b4:	e58d2000 	str	r2, [sp]
	      while (c != '\n' && (c = iobuf_get (a)) != -1)
    a9b8:	ebfffa8c 	bl	93f0 <iobuf_readbyte>
    a9bc:	e59d2000 	ldr	r2, [sp]
    a9c0:	e3700001 	cmn	r0, #1
    a9c4:	0a00001b 	beq	aa38 <iobuf_read_line+0x18c>
    a9c8:	e350000a 	cmp	r0, #10
    a9cc:	0a000019 	beq	aa38 <iobuf_read_line+0x18c>
    a9d0:	e5941010 	ldr	r1, [r4, #16]
    a9d4:	e1a00004 	mov	r0, r4
    a9d8:	e3510000 	cmp	r1, #0
    a9dc:	1afffff4 	bne	a9b4 <iobuf_read_line+0x108>
    a9e0:	e5941018 	ldr	r1, [r4, #24]
    a9e4:	e594c01c 	ldr	ip, [r4, #28]
    a9e8:	e151000c 	cmp	r1, ip
    a9ec:	e281c001 	add	ip, r1, #1
    a9f0:	2affffef 	bcs	a9b4 <iobuf_read_line+0x108>
    a9f4:	e5940008 	ldr	r0, [r4, #8]
    a9f8:	e594e020 	ldr	lr, [r4, #32]
    a9fc:	e584c018 	str	ip, [r4, #24]
    aa00:	e2800001 	add	r0, r0, #1
    aa04:	e5840008 	str	r0, [r4, #8]
    aa08:	e7de0001 	ldrb	r0, [lr, r1]
    aa0c:	eaffffed 	b	a9c8 <iobuf_read_line+0x11c>
      length = 256 <= maxlen ? 256 : maxlen;
    aa10:	e3560c01 	cmp	r6, #256	; 0x100
      buffer = xrealloc (buffer, length);
    aa14:	e1a0000b 	mov	r0, fp
      length = 256 <= maxlen ? 256 : maxlen;
    aa18:	31a0a006 	movcc	sl, r6
    aa1c:	23a0ac01 	movcs	sl, #256	; 0x100
      buffer = xrealloc (buffer, length);
    aa20:	e1a0100a 	mov	r1, sl
    aa24:	eb0011b3 	bl	f0f8 <xrealloc>
      *addr_of_buffer = (unsigned char *)buffer;
    aa28:	e5870000 	str	r0, [r7]
      buffer = xrealloc (buffer, length);
    aa2c:	e1a0b000 	mov	fp, r0
      *length_of_buffer = length;
    aa30:	e588a000 	str	sl, [r8]
    aa34:	eaffffa8 	b	a8dc <iobuf_read_line+0x30>
	      p[-1] = '\n';
    aa38:	e3a0100a 	mov	r1, #10
	      *max_length = 0;
    aa3c:	e3a03000 	mov	r3, #0
	      p[-1] = '\n';
    aa40:	e5c91000 	strb	r1, [r9]
	      *max_length = 0;
    aa44:	e59d1004 	ldr	r1, [sp, #4]
    aa48:	e5813000 	str	r3, [r1]
	      break;
    aa4c:	eaffffc3 	b	a960 <iobuf_read_line+0xb4>

0000aa50 <translate_file_handle>:
}
    aa50:	e12fff1e 	bx	lr

0000aa54 <iobuf_skip_rest>:
  if ( partial )
    aa54:	e3520000 	cmp	r2, #0
{
    aa58:	e92d4070 	push	{r4, r5, r6, lr}
    aa5c:	e1a04000 	mov	r4, r0
  if ( partial )
    aa60:	1a000031 	bne	ab2c <iobuf_skip_rest+0xd8>
      while (remaining > 0)
    aa64:	e3510000 	cmp	r1, #0
    aa68:	e1a05001 	mov	r5, r1
    aa6c:	08bd8070 	popeq	{r4, r5, r6, pc}
          if (a->nofast || a->d.start >= a->d.len)
    aa70:	e5943010 	ldr	r3, [r4, #16]
              if (iobuf_readbyte (a) == -1)
    aa74:	e1a00004 	mov	r0, r4
          if (a->nofast || a->d.start >= a->d.len)
    aa78:	e3530000 	cmp	r3, #0
    aa7c:	0a000014 	beq	aad4 <iobuf_skip_rest+0x80>
              --remaining;
    aa80:	e2455001 	sub	r5, r5, #1
              if (iobuf_readbyte (a) == -1)
    aa84:	ebfffa59 	bl	93f0 <iobuf_readbyte>
    aa88:	e3700001 	cmn	r0, #1
    aa8c:	08bd8070 	popeq	{r4, r5, r6, pc}
      while (remaining > 0)
    aa90:	e3550000 	cmp	r5, #0
    aa94:	1a00000a 	bne	aac4 <iobuf_skip_rest+0x70>
    aa98:	e8bd8070 	pop	{r4, r5, r6, pc}
    aa9c:	e1530005 	cmp	r3, r5
              a->nbytes += count;
    aaa0:	e5941008 	ldr	r1, [r4, #8]
    aaa4:	21a03005 	movcs	r3, r5
              remaining -= count;
    aaa8:	e0455003 	sub	r5, r5, r3
              a->nbytes += count;
    aaac:	e0811003 	add	r1, r1, r3
      while (remaining > 0)
    aab0:	e3550000 	cmp	r5, #0
              a->d.start += count;
    aab4:	e0833002 	add	r3, r3, r2
              a->nbytes += count;
    aab8:	e5841008 	str	r1, [r4, #8]
              a->d.start += count;
    aabc:	e5843018 	str	r3, [r4, #24]
      while (remaining > 0)
    aac0:	08bd8070 	popeq	{r4, r5, r6, pc}
          if (a->nofast || a->d.start >= a->d.len)
    aac4:	e5943010 	ldr	r3, [r4, #16]
              if (iobuf_readbyte (a) == -1)
    aac8:	e1a00004 	mov	r0, r4
          if (a->nofast || a->d.start >= a->d.len)
    aacc:	e3530000 	cmp	r3, #0
    aad0:	1affffea 	bne	aa80 <iobuf_skip_rest+0x2c>
    aad4:	e5942018 	ldr	r2, [r4, #24]
    aad8:	e594101c 	ldr	r1, [r4, #28]
    aadc:	e1520001 	cmp	r2, r1
              unsigned long count = a->d.len - a->d.start;
    aae0:	e0413002 	sub	r3, r1, r2
          if (a->nofast || a->d.start >= a->d.len)
    aae4:	3affffec 	bcc	aa9c <iobuf_skip_rest+0x48>
    aae8:	eaffffe4 	b	aa80 <iobuf_skip_rest+0x2c>
    aaec:	e594101c 	ldr	r1, [r4, #28]
          if (a->nofast || a->d.start >= a->d.len)
    aaf0:	e5942018 	ldr	r2, [r4, #24]
    aaf4:	e1520001 	cmp	r2, r1
    aaf8:	2a000007 	bcs	ab1c <iobuf_skip_rest+0xc8>
              a->nbytes += count;
    aafc:	e5943008 	ldr	r3, [r4, #8]
              a->d.start = a->d.len;
    ab00:	e5841018 	str	r1, [r4, #24]
              a->nbytes += count;
    ab04:	e0433002 	sub	r3, r3, r2
          if (a->nofast || a->d.start >= a->d.len)
    ab08:	e5942018 	ldr	r2, [r4, #24]
              a->nbytes += count;
    ab0c:	e0833001 	add	r3, r3, r1
          if (a->nofast || a->d.start >= a->d.len)
    ab10:	e1520001 	cmp	r2, r1
              a->nbytes += count;
    ab14:	e5843008 	str	r3, [r4, #8]
          if (a->nofast || a->d.start >= a->d.len)
    ab18:	3afffff7 	bcc	aafc <iobuf_skip_rest+0xa8>
              if (iobuf_readbyte (a) == -1)
    ab1c:	e1a00004 	mov	r0, r4
    ab20:	ebfffa32 	bl	93f0 <iobuf_readbyte>
    ab24:	e3700001 	cmn	r0, #1
    ab28:	08bd8070 	popeq	{r4, r5, r6, pc}
          if (a->nofast || a->d.start >= a->d.len)
    ab2c:	e5943010 	ldr	r3, [r4, #16]
    ab30:	e3530000 	cmp	r3, #0
    ab34:	1afffff8 	bne	ab1c <iobuf_skip_rest+0xc8>
    ab38:	eaffffeb 	b	aaec <iobuf_skip_rest+0x98>

0000ab3c <get_status_string>:

/* Return the status string for code NO. */
const char *
get_status_string ( int no )
{
  int idx = statusstr_msgidxof (no);
    ab3c:	e3500065 	cmp	r0, #101	; 0x65
    ab40:	8a000005 	bhi	ab5c <get_status_string+0x20>
  if (idx == -1)
    return "?";
  else
    return statusstr_msgstr + statusstr_msgidx[idx];
    ab44:	e59f301c 	ldr	r3, [pc, #28]	; ab68 <get_status_string+0x2c>
    ab48:	e08f3003 	add	r3, pc, r3
    ab4c:	e0830100 	add	r0, r3, r0, lsl #2
    ab50:	e59004ec 	ldr	r0, [r0, #1260]	; 0x4ec
    ab54:	e0830000 	add	r0, r3, r0
    ab58:	e12fff1e 	bx	lr
    return "?";
    ab5c:	e59f0008 	ldr	r0, [pc, #8]	; ab6c <get_status_string+0x30>
    ab60:	e08f0000 	add	r0, pc, r0
}
    ab64:	e12fff1e 	bx	lr
    ab68:	00008cb0 	.word	0x00008cb0
    ab6c:	0000b494 	.word	0x0000b494

0000ab70 <get_inv_recpsgnr_code>:

/* Retrieve the error code from an error value.  */
static GPG_ERR_INLINE gpg_err_code_t
gpg_err_code (gpg_error_t err)
{
  return (gpg_err_code_t) (err & GPG_ERR_CODE_MASK);
    ab70:	e6ff0070 	uxth	r0, r0
const char *
get_inv_recpsgnr_code (gpg_error_t err)
{
  const char *errstr;

  switch (gpg_err_code (err))
    ab74:	e350007d 	cmp	r0, #125	; 0x7d
    ab78:	8a000057 	bhi	acdc <get_inv_recpsgnr_code+0x16c>
    ab7c:	e3500035 	cmp	r0, #53	; 0x35
    ab80:	9a00004e 	bls	acc0 <get_inv_recpsgnr_code+0x150>
    ab84:	e2400036 	sub	r0, r0, #54	; 0x36
    ab88:	e3500047 	cmp	r0, #71	; 0x47
    ab8c:	908ff100 	addls	pc, pc, r0, lsl #2
    ab90:	ea000047 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ab94:	ea000073 	b	ad68 <get_inv_recpsgnr_code+0x1f8>
    ab98:	ea000045 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ab9c:	ea000044 	b	acb4 <get_inv_recpsgnr_code+0x144>
    aba0:	ea00005b 	b	ad14 <get_inv_recpsgnr_code+0x1a4>
    aba4:	ea000042 	b	acb4 <get_inv_recpsgnr_code+0x144>
    aba8:	ea000041 	b	acb4 <get_inv_recpsgnr_code+0x144>
    abac:	ea000040 	b	acb4 <get_inv_recpsgnr_code+0x144>
    abb0:	ea00003f 	b	acb4 <get_inv_recpsgnr_code+0x144>
    abb4:	ea00003e 	b	acb4 <get_inv_recpsgnr_code+0x144>
    abb8:	ea00003d 	b	acb4 <get_inv_recpsgnr_code+0x144>
    abbc:	ea00003c 	b	acb4 <get_inv_recpsgnr_code+0x144>
    abc0:	ea00003b 	b	acb4 <get_inv_recpsgnr_code+0x144>
    abc4:	ea00003a 	b	acb4 <get_inv_recpsgnr_code+0x144>
    abc8:	ea000039 	b	acb4 <get_inv_recpsgnr_code+0x144>
    abcc:	ea000038 	b	acb4 <get_inv_recpsgnr_code+0x144>
    abd0:	ea000037 	b	acb4 <get_inv_recpsgnr_code+0x144>
    abd4:	ea000036 	b	acb4 <get_inv_recpsgnr_code+0x144>
    abd8:	ea000035 	b	acb4 <get_inv_recpsgnr_code+0x144>
    abdc:	ea000034 	b	acb4 <get_inv_recpsgnr_code+0x144>
    abe0:	ea000033 	b	acb4 <get_inv_recpsgnr_code+0x144>
    abe4:	ea000032 	b	acb4 <get_inv_recpsgnr_code+0x144>
    abe8:	ea000031 	b	acb4 <get_inv_recpsgnr_code+0x144>
    abec:	ea000030 	b	acb4 <get_inv_recpsgnr_code+0x144>
    abf0:	ea00002f 	b	acb4 <get_inv_recpsgnr_code+0x144>
    abf4:	ea00002e 	b	acb4 <get_inv_recpsgnr_code+0x144>
    abf8:	ea00002d 	b	acb4 <get_inv_recpsgnr_code+0x144>
    abfc:	ea00002c 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ac00:	ea00002b 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ac04:	ea00002a 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ac08:	ea000029 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ac0c:	ea000028 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ac10:	ea000027 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ac14:	ea000026 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ac18:	ea000025 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ac1c:	ea000024 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ac20:	ea000023 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ac24:	ea000022 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ac28:	ea000021 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ac2c:	ea000020 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ac30:	ea00001f 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ac34:	ea000039 	b	ad20 <get_inv_recpsgnr_code+0x1b0>
    ac38:	ea00003b 	b	ad2c <get_inv_recpsgnr_code+0x1bc>
    ac3c:	ea00003d 	b	ad38 <get_inv_recpsgnr_code+0x1c8>
    ac40:	ea00001b 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ac44:	ea00003e 	b	ad44 <get_inv_recpsgnr_code+0x1d4>
    ac48:	ea000019 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ac4c:	ea000018 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ac50:	ea00003e 	b	ad50 <get_inv_recpsgnr_code+0x1e0>
    ac54:	ea000016 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ac58:	ea000015 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ac5c:	ea000014 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ac60:	ea000013 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ac64:	ea000012 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ac68:	ea000041 	b	ad74 <get_inv_recpsgnr_code+0x204>
    ac6c:	ea000010 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ac70:	ea00000f 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ac74:	ea00000e 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ac78:	ea00000d 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ac7c:	ea00000c 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ac80:	ea00000b 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ac84:	ea00000a 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ac88:	ea000009 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ac8c:	ea00001d 	b	ad08 <get_inv_recpsgnr_code+0x198>
    ac90:	ea000007 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ac94:	ea000006 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ac98:	ea000005 	b	acb4 <get_inv_recpsgnr_code+0x144>
    ac9c:	ea000004 	b	acb4 <get_inv_recpsgnr_code+0x144>
    aca0:	ea000003 	b	acb4 <get_inv_recpsgnr_code+0x144>
    aca4:	ea000002 	b	acb4 <get_inv_recpsgnr_code+0x144>
    aca8:	ea000001 	b	acb4 <get_inv_recpsgnr_code+0x144>
    acac:	ea000000 	b	acb4 <get_inv_recpsgnr_code+0x144>
    acb0:	ea000029 	b	ad5c <get_inv_recpsgnr_code+0x1ec>
    case GPG_ERR_NO_SECKEY:       errstr = "9"; break;

    case GPG_ERR_NOT_TRUSTED:     errstr = "10"; break;
    case GPG_ERR_MISSING_CERT:    errstr = "11"; break;
    case GPG_ERR_MISSING_ISSUER_CERT: errstr = "12"; break;
    default:                      errstr = "0"; break;
    acb4:	e59f00d0 	ldr	r0, [pc, #208]	; ad8c <get_inv_recpsgnr_code+0x21c>
    acb8:	e08f0000 	add	r0, pc, r0
    acbc:	e12fff1e 	bx	lr
  switch (gpg_err_code (err))
    acc0:	e3500009 	cmp	r0, #9
    acc4:	0a000009 	beq	acf0 <get_inv_recpsgnr_code+0x180>
    acc8:	e3500011 	cmp	r0, #17
    accc:	1a00002b 	bne	ad80 <get_inv_recpsgnr_code+0x210>
    case GPG_ERR_NO_SECKEY:       errstr = "9"; break;
    acd0:	e59f00b8 	ldr	r0, [pc, #184]	; ad90 <get_inv_recpsgnr_code+0x220>
    acd4:	e08f0000 	add	r0, pc, r0
    acd8:	e12fff1e 	bx	lr
  switch (gpg_err_code (err))
    acdc:	e35000b9 	cmp	r0, #185	; 0xb9
    ace0:	1a000005 	bne	acfc <get_inv_recpsgnr_code+0x18c>
    case GPG_ERR_MISSING_ISSUER_CERT: errstr = "12"; break;
    ace4:	e59f00a8 	ldr	r0, [pc, #168]	; ad94 <get_inv_recpsgnr_code+0x224>
    ace8:	e08f0000 	add	r0, pc, r0
    acec:	e12fff1e 	bx	lr
    case GPG_ERR_NO_PUBKEY:       errstr = "1"; break;
    acf0:	e59f00a0 	ldr	r0, [pc, #160]	; ad98 <get_inv_recpsgnr_code+0x228>
    acf4:	e08f0000 	add	r0, pc, r0
    acf8:	e12fff1e 	bx	lr
    default:                      errstr = "0"; break;
    acfc:	e59f0098 	ldr	r0, [pc, #152]	; ad9c <get_inv_recpsgnr_code+0x22c>
    ad00:	e08f0000 	add	r0, pc, r0
    }

  return errstr;
}
    ad04:	e12fff1e 	bx	lr
    case GPG_ERR_NO_POLICY_MATCH: errstr = "8"; break;
    ad08:	e59f0090 	ldr	r0, [pc, #144]	; ada0 <get_inv_recpsgnr_code+0x230>
    ad0c:	e08f0000 	add	r0, pc, r0
    ad10:	e12fff1e 	bx	lr
    case GPG_ERR_MISSING_CERT:    errstr = "11"; break;
    ad14:	e59f0088 	ldr	r0, [pc, #136]	; ada4 <get_inv_recpsgnr_code+0x234>
    ad18:	e08f0000 	add	r0, pc, r0
    ad1c:	e12fff1e 	bx	lr
    case GPG_ERR_CERT_REVOKED:    errstr = "4"; break;
    ad20:	e59f0080 	ldr	r0, [pc, #128]	; ada8 <get_inv_recpsgnr_code+0x238>
    ad24:	e08f0000 	add	r0, pc, r0
    ad28:	e12fff1e 	bx	lr
    case GPG_ERR_NO_CRL_KNOWN:    errstr = "6"; break;
    ad2c:	e59f0078 	ldr	r0, [pc, #120]	; adac <get_inv_recpsgnr_code+0x23c>
    ad30:	e08f0000 	add	r0, pc, r0
    ad34:	e12fff1e 	bx	lr
    case GPG_ERR_CRL_TOO_OLD:     errstr = "7"; break;
    ad38:	e59f0070 	ldr	r0, [pc, #112]	; adb0 <get_inv_recpsgnr_code+0x240>
    ad3c:	e08f0000 	add	r0, pc, r0
    ad40:	e12fff1e 	bx	lr
    case GPG_ERR_NOT_TRUSTED:     errstr = "10"; break;
    ad44:	e59f0068 	ldr	r0, [pc, #104]	; adb4 <get_inv_recpsgnr_code+0x244>
    ad48:	e08f0000 	add	r0, pc, r0
    ad4c:	e12fff1e 	bx	lr
    case GPG_ERR_CERT_EXPIRED:    errstr = "5"; break;
    ad50:	e59f0060 	ldr	r0, [pc, #96]	; adb8 <get_inv_recpsgnr_code+0x248>
    ad54:	e08f0000 	add	r0, pc, r0
    ad58:	e12fff1e 	bx	lr
    case GPG_ERR_WRONG_KEY_USAGE: errstr = "3"; break;
    ad5c:	e59f0058 	ldr	r0, [pc, #88]	; adbc <get_inv_recpsgnr_code+0x24c>
    ad60:	e08f0000 	add	r0, pc, r0
    ad64:	e12fff1e 	bx	lr
    case GPG_ERR_NO_SECKEY:       errstr = "9"; break;
    ad68:	e59f0050 	ldr	r0, [pc, #80]	; adc0 <get_inv_recpsgnr_code+0x250>
    ad6c:	e08f0000 	add	r0, pc, r0
    ad70:	e12fff1e 	bx	lr
  switch (gpg_err_code (err))
    ad74:	e59f0048 	ldr	r0, [pc, #72]	; adc4 <get_inv_recpsgnr_code+0x254>
    ad78:	e08f0000 	add	r0, pc, r0
    ad7c:	e12fff1e 	bx	lr
    default:                      errstr = "0"; break;
    ad80:	e59f0040 	ldr	r0, [pc, #64]	; adc8 <get_inv_recpsgnr_code+0x258>
    ad84:	e08f0000 	add	r0, pc, r0
    ad88:	e12fff1e 	bx	lr
    ad8c:	0000bd1c 	.word	0x0000bd1c
    ad90:	0000bd1c 	.word	0x0000bd1c
    ad94:	0000bd18 	.word	0x0000bd18
    ad98:	0000bce4 	.word	0x0000bce4
    ad9c:	0000bcd4 	.word	0x0000bcd4
    ada0:	0000bce0 	.word	0x0000bce0
    ada4:	0000bce0 	.word	0x0000bce0
    ada8:	0000bcbc 	.word	0x0000bcbc
    adac:	0000bcb4 	.word	0x0000bcb4
    adb0:	0000bcac 	.word	0x0000bcac
    adb4:	0000bcac 	.word	0x0000bcac
    adb8:	0000d430 	.word	0x0000d430
    adbc:	0000bc7c 	.word	0x0000bc7c
    adc0:	0000bc84 	.word	0x0000bc84
    adc4:	0000bc84 	.word	0x0000bc84
    adc8:	0000bc50 	.word	0x0000bc50

0000adcc <get_pkttype_name>:
    /* Bits 2 through 5 are the packet type.  */
    return (ctb & ((1 << 6) - 1)) >> 2;
}

const char* get_pkttype_name(pkttype_t pkttype) {
    switch (pkttype) {
    adcc:	e3500009 	cmp	r0, #9
    add0:	0a00000c 	beq	ae08 <get_pkttype_name+0x3c>
    add4:	e350000b 	cmp	r0, #11
    add8:	0a000004 	beq	adf0 <get_pkttype_name+0x24>
    addc:	e3500003 	cmp	r0, #3
    ade0:	0a000005 	beq	adfc <get_pkttype_name+0x30>
        // case PKT_ENCRYPTED_MDC: return "PKT_ENCRYPTED_MDC";
        // case PKT_MDC: return "PKT_MDC";
        // case PKT_ENCRYPTED_AEAD: return "PKT_ENCRYPTED_AEAD";
        // case PKT_COMMENT: return "PKT_COMMENT";
        // case PKT_GPG_CONTROL: return "PKT_GPG_CONTROL";
        default: return "UNKNOWN";
    ade4:	e59f0028 	ldr	r0, [pc, #40]	; ae14 <get_pkttype_name+0x48>
    ade8:	e08f0000 	add	r0, pc, r0
    }
}
    adec:	e12fff1e 	bx	lr
        case PKT_PLAINTEXT: return "PKT_PLAINTEXT";
    adf0:	e59f0020 	ldr	r0, [pc, #32]	; ae18 <get_pkttype_name+0x4c>
    adf4:	e08f0000 	add	r0, pc, r0
    adf8:	e12fff1e 	bx	lr
        case PKT_SYMKEY_ENC: return "PKT_SYMKEY_ENC";
    adfc:	e59f0018 	ldr	r0, [pc, #24]	; ae1c <get_pkttype_name+0x50>
    ae00:	e08f0000 	add	r0, pc, r0
    ae04:	e12fff1e 	bx	lr
    switch (pkttype) {
    ae08:	e59f0010 	ldr	r0, [pc, #16]	; ae20 <get_pkttype_name+0x54>
    ae0c:	e08f0000 	add	r0, pc, r0
    ae10:	e12fff1e 	bx	lr
    ae14:	0000bb5c 	.word	0x0000bb5c
    ae18:	0000bc10 	.word	0x0000bc10
    ae1c:	0000bc24 	.word	0x0000bc24
    ae20:	0000bc08 	.word	0x0000bc08

0000ae24 <calc_packet_length>:


/* Calculate the length of a packet described by PKT.  */
u32
calc_packet_length( PACKET *pkt )
{
    ae24:	e92d4070 	push	{r4, r5, r6, lr}
  u32 n = 0;
  int new_ctb = 0;

  // log_assert (pkt->pkt.generic);
  switch (pkt->pkttype)
    ae28:	e5d03000 	ldrb	r3, [r0]
    ae2c:	e353000b 	cmp	r3, #11
    ae30:	0a000004 	beq	ae48 <calc_packet_length+0x24>
    // case PKT_SIGNATURE:
    // case PKT_ONEPASS_SIG:
    // case PKT_RING_TRUST:
    // case PKT_COMPRESSED:
    default:
      printf ("invalid packet type in calc_packet_length()");
    ae34:	e59f00b0 	ldr	r0, [pc, #176]	; aeec <calc_packet_length+0xc8>
    ae38:	e08f0000 	add	r0, pc, r0
    ae3c:	eb001970 	bl	11404 <tfp_printf>
    ae40:	e3a00002 	mov	r0, #2
    ae44:	e8bd8070 	pop	{r4, r5, r6, pc}
      n = calc_plaintext (pkt->pkt.plaintext);
    ae48:	e5903004 	ldr	r3, [r0, #4]
    ae4c:	e1a05000 	mov	r5, r0
{
  /* Truncate namelen to the maximum 255 characters.  Note this means
     that a function that calls build_packet with an illegal literal
     packet will get it back legalized. */

  if(pt->namelen>255)
    ae50:	e5932014 	ldr	r2, [r3, #20]
    pt->namelen=255;
  u32 res = pt->len? (1 + 1 + pt->namelen + 4 + pt->len) : 0;
    ae54:	e5931000 	ldr	r1, [r3]
  if(pt->namelen>255)
    ae58:	e35200ff 	cmp	r2, #255	; 0xff
    pt->namelen=255;
    ae5c:	c3a020ff 	movgt	r2, #255	; 0xff
    ae60:	c5832014 	strgt	r2, [r3, #20]
  u32 res = pt->len? (1 + 1 + pt->namelen + 4 + pt->len) : 0;
    ae64:	e3510000 	cmp	r1, #0
    ae68:	0a000010 	beq	aeb0 <calc_packet_length+0x8c>
    ae6c:	e5934014 	ldr	r4, [r3, #20]
    ae70:	e2811006 	add	r1, r1, #6
  printf("calc_plaintext write_32 %08x",res);
    ae74:	e59f0074 	ldr	r0, [pc, #116]	; aef0 <calc_packet_length+0xcc>
  u32 res = pt->len? (1 + 1 + pt->namelen + 4 + pt->len) : 0;
    ae78:	e0814004 	add	r4, r1, r4
  printf("calc_plaintext write_32 %08x",res);
    ae7c:	e08f0000 	add	r0, pc, r0
    ae80:	e1a01004 	mov	r1, r4
    ae84:	eb00195e 	bl	11404 <tfp_printf>
      new_ctb = pkt->pkt.plaintext->new_ctb;
    ae88:	e5953004 	ldr	r3, [r5, #4]
 * really mean an empty body.)
 */
static int
calc_header_length( u32 len, int new_ctb )
{
    if( new_ctb ) {
    ae8c:	e5d33008 	ldrb	r3, [r3, #8]
    ae90:	e3530000 	cmp	r3, #0
    ae94:	0a00000c 	beq	aecc <calc_packet_length+0xa8>
	if( len < 192 )
    ae98:	e35400bf 	cmp	r4, #191	; 0xbf
    ae9c:	9a000010 	bls	aee4 <calc_packet_length+0xc0>
	    return 2;
	if( len < 8384 )
    aea0:	e3540d83 	cmp	r4, #8384	; 0x20c0
    aea4:	3a000006 	bcc	aec4 <calc_packet_length+0xa0>
  n += calc_header_length (n, new_ctb);
    aea8:	e2840006 	add	r0, r4, #6
    aeac:	e8bd8070 	pop	{r4, r5, r6, pc}
  printf("calc_plaintext write_32 %08x",res);
    aeb0:	e59f003c 	ldr	r0, [pc, #60]	; aef4 <calc_packet_length+0xd0>
    aeb4:	e08f0000 	add	r0, pc, r0
    aeb8:	eb001951 	bl	11404 <tfp_printf>
    aebc:	e3a00002 	mov	r0, #2
    aec0:	e8bd8070 	pop	{r4, r5, r6, pc}
  n += calc_header_length (n, new_ctb);
    aec4:	e2840003 	add	r0, r4, #3
}
    aec8:	e8bd8070 	pop	{r4, r5, r6, pc}
	    return 3;
	else
	    return 6;
    }
    if( len < 256 )
    aecc:	e35400ff 	cmp	r4, #255	; 0xff
    aed0:	9a000003 	bls	aee4 <calc_packet_length+0xc0>
	return 2;
    if( len < 65536 )
    aed4:	e3540801 	cmp	r4, #65536	; 0x10000
    aed8:	3afffff9 	bcc	aec4 <calc_packet_length+0xa0>
  n += calc_header_length (n, new_ctb);
    aedc:	e2840005 	add	r0, r4, #5
    aee0:	e8bd8070 	pop	{r4, r5, r6, pc}
    aee4:	e2840002 	add	r0, r4, #2
    aee8:	e8bd8070 	pop	{r4, r5, r6, pc}
    aeec:	0000bc1c 	.word	0x0000bc1c
    aef0:	0000bbb8 	.word	0x0000bbb8
    aef4:	0000bb80 	.word	0x0000bb80

0000aef8 <log_hexdump>:
void log_hexdump(const uint8_t *buffer, int length) {
    aef8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aefc:	e1a06000 	mov	r6, r0
    printf("%d bytes:\n", length);
    af00:	e59f013c 	ldr	r0, [pc, #316]	; b044 <log_hexdump+0x14c>
void log_hexdump(const uint8_t *buffer, int length) {
    af04:	e1a07001 	mov	r7, r1
    af08:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    printf("%d bytes:\n", length);
    af0c:	e08f0000 	add	r0, pc, r0
    af10:	eb00193b 	bl	11404 <tfp_printf>
    while (length > 0) {
    af14:	e3570000 	cmp	r7, #0
    af18:	da000041 	ble	b024 <log_hexdump+0x12c>
        printf("%-8d ", written);
    af1c:	e59f3124 	ldr	r3, [pc, #292]	; b048 <log_hexdump+0x150>
    int written = 0;
    af20:	e3a0a000 	mov	sl, #0
            if (i % 2 == 0) printf(" ");
    af24:	e59f9120 	ldr	r9, [pc, #288]	; b04c <log_hexdump+0x154>
            if (i % 8 == 0) printf(" ");
    af28:	e59f8120 	ldr	r8, [pc, #288]	; b050 <log_hexdump+0x158>
                printf("  ");
    af2c:	e59f5120 	ldr	r5, [pc, #288]	; b054 <log_hexdump+0x15c>
        printf("%-8d ", written);
    af30:	e08f3003 	add	r3, pc, r3
    af34:	e58d3004 	str	r3, [sp, #4]
    af38:	e28d3013 	add	r3, sp, #19
            if (i % 2 == 0) printf(" ");
    af3c:	e08f9009 	add	r9, pc, r9
            if (i % 8 == 0) printf(" ");
    af40:	e08f8008 	add	r8, pc, r8
                printf("  ");
    af44:	e08f5005 	add	r5, pc, r5
    af48:	e58d3008 	str	r3, [sp, #8]
    af4c:	e28d3014 	add	r3, sp, #20
    af50:	e58d300c 	str	r3, [sp, #12]
        printf("%-8d ", written);
    af54:	e59d0004 	ldr	r0, [sp, #4]
        int have = (length > 16) ? 16 : length;
    af58:	e3570010 	cmp	r7, #16
        printf("%-8d ", written);
    af5c:	e1a0100a 	mov	r1, sl
        for (int i = 0; i < 16; i++) {
    af60:	e3a0b000 	mov	fp, #0
        int have = (length > 16) ? 16 : length;
    af64:	b1a04007 	movlt	r4, r7
    af68:	a3a04010 	movge	r4, #16
        printf("%-8d ", written);
    af6c:	eb001924 	bl	11404 <tfp_printf>
        for (int i = 0; i < 16; i++) {
    af70:	ea000006 	b	af90 <log_hexdump+0x98>
                printf("%02x", buffer[i]);
    af74:	e59f00dc 	ldr	r0, [pc, #220]	; b058 <log_hexdump+0x160>
    af78:	e7d6100b 	ldrb	r1, [r6, fp]
        for (int i = 0; i < 16; i++) {
    af7c:	e28bb001 	add	fp, fp, #1
                printf("%02x", buffer[i]);
    af80:	e08f0000 	add	r0, pc, r0
    af84:	eb00191e 	bl	11404 <tfp_printf>
        for (int i = 0; i < 16; i++) {
    af88:	e35b0010 	cmp	fp, #16
    af8c:	0a00000a 	beq	afbc <log_hexdump+0xc4>
            if (i % 2 == 0) printf(" ");
    af90:	e31b0001 	tst	fp, #1
    af94:	0a000027 	beq	b038 <log_hexdump+0x140>
            if (i % 8 == 0) printf(" ");
    af98:	e31b0007 	tst	fp, #7
    af9c:	0a000022 	beq	b02c <log_hexdump+0x134>
            if (i < have) {
    afa0:	e154000b 	cmp	r4, fp
                printf("  ");
    afa4:	e1a00005 	mov	r0, r5
            if (i < have) {
    afa8:	cafffff1 	bgt	af74 <log_hexdump+0x7c>
        for (int i = 0; i < 16; i++) {
    afac:	e28bb001 	add	fp, fp, #1
                printf("  ");
    afb0:	eb001913 	bl	11404 <tfp_printf>
        for (int i = 0; i < 16; i++) {
    afb4:	e35b0010 	cmp	fp, #16
    afb8:	1afffff4 	bne	af90 <log_hexdump+0x98>
        printf("  ");
    afbc:	e59f0098 	ldr	r0, [pc, #152]	; b05c <log_hexdump+0x164>
    afc0:	e08f0000 	add	r0, pc, r0
    afc4:	eb00190e 	bl	11404 <tfp_printf>
        for (int i = 0; i < have; i++) {
    afc8:	e59d1008 	ldr	r1, [sp, #8]
    afcc:	e2462001 	sub	r2, r6, #1
    afd0:	e082c004 	add	ip, r2, r4
            text[i] = (buffer[i] >= 32 && buffer[i] <= 126) ? buffer[i] : '.';
    afd4:	e5f23001 	ldrb	r3, [r2, #1]!
    afd8:	e2430020 	sub	r0, r3, #32
    afdc:	e350005e 	cmp	r0, #94	; 0x5e
    afe0:	83a0302e 	movhi	r3, #46	; 0x2e
        for (int i = 0; i < have; i++) {
    afe4:	e152000c 	cmp	r2, ip
            text[i] = (buffer[i] >= 32 && buffer[i] <= 126) ? buffer[i] : '.';
    afe8:	e5e13001 	strb	r3, [r1, #1]!
        for (int i = 0; i < have; i++) {
    afec:	1afffff8 	bne	afd4 <log_hexdump+0xdc>
        printf("%s\n", text);
    aff0:	e59f0068 	ldr	r0, [pc, #104]	; b060 <log_hexdump+0x168>
        text[have] = '\0';
    aff4:	e2843028 	add	r3, r4, #40	; 0x28
    aff8:	e08d3003 	add	r3, sp, r3
    affc:	e3a02000 	mov	r2, #0
        printf("%s\n", text);
    b000:	e08f0000 	add	r0, pc, r0
    b004:	e59d100c 	ldr	r1, [sp, #12]
        length -= have;
    b008:	e0477004 	sub	r7, r7, r4
        text[have] = '\0';
    b00c:	e5432014 	strb	r2, [r3, #-20]	; 0xffffffec
        buffer += have;
    b010:	e0866004 	add	r6, r6, r4
        printf("%s\n", text);
    b014:	eb0018fa 	bl	11404 <tfp_printf>
        written += have;
    b018:	e08aa004 	add	sl, sl, r4
    while (length > 0) {
    b01c:	e3570000 	cmp	r7, #0
    b020:	caffffcb 	bgt	af54 <log_hexdump+0x5c>
}
    b024:	e28dd02c 	add	sp, sp, #44	; 0x2c
    b028:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (i % 8 == 0) printf(" ");
    b02c:	e1a00008 	mov	r0, r8
    b030:	eb0018f3 	bl	11404 <tfp_printf>
    b034:	eaffffd9 	b	afa0 <log_hexdump+0xa8>
            if (i % 2 == 0) printf(" ");
    b038:	e1a00009 	mov	r0, r9
    b03c:	eb0018f0 	bl	11404 <tfp_printf>
    b040:	eaffffd4 	b	af98 <log_hexdump+0xa0>
    b044:	0000bb74 	.word	0x0000bb74
    b048:	0000bb5c 	.word	0x0000bb5c
    b04c:	0000c3c0 	.word	0x0000c3c0
    b050:	0000c3bc 	.word	0x0000c3bc
    b054:	0000bb58 	.word	0x0000bb58
    b058:	0000bb14 	.word	0x0000bb14
    b05c:	0000badc 	.word	0x0000badc
    b060:	0000d068 	.word	0x0000d068

0000b064 <write_header2.constprop.0.isra.0>:
{
    return write_header2( out, ctb, len, 0 );
}

static int
write_header2( IOBUF out, int ctb, u32 len, int hdrlen )
    b064:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    b068:	e1a07000 	mov	r7, r0
{

  printf("write_header2  %08X %d %02X %d",len,hdrlen,ctb, out->use);
    b06c:	e59f0260 	ldr	r0, [pc, #608]	; b2d4 <write_header2.constprop.0.isra.0+0x270>
write_header2( IOBUF out, int ctb, u32 len, int hdrlen )
    b070:	e24dd00c 	sub	sp, sp, #12
  printf("write_header2  %08X %d %02X %d",len,hdrlen,ctb, out->use);
    b074:	e5d73000 	ldrb	r3, [r7]
write_header2( IOBUF out, int ctb, u32 len, int hdrlen )
    b078:	e1a05002 	mov	r5, r2
  printf("write_header2  %08X %d %02X %d",len,hdrlen,ctb, out->use);
    b07c:	e08f0000 	add	r0, pc, r0
  int res = (ctb & (1 << 6));
    b080:	e2016040 	and	r6, r1, #64	; 0x40
  printf("write_header2  %08X %d %02X %d",len,hdrlen,ctb, out->use);
    b084:	e58d3000 	str	r3, [sp]
    b088:	e3a02000 	mov	r2, #0
    b08c:	e1a03001 	mov	r3, r1
write_header2( IOBUF out, int ctb, u32 len, int hdrlen )
    b090:	e1a04001 	mov	r4, r1
  printf("write_header2  %08X %d %02X %d",len,hdrlen,ctb, out->use);
    b094:	e1a01005 	mov	r1, r5
    b098:	eb0018d9 	bl	11404 <tfp_printf>
  printf("ctb new format: %d\n", res);
    b09c:	e59f0234 	ldr	r0, [pc, #564]	; b2d8 <write_header2.constprop.0.isra.0+0x274>
    b0a0:	e1a01006 	mov	r1, r6
    b0a4:	e08f0000 	add	r0, pc, r0
    b0a8:	eb0018d5 	bl	11404 <tfp_printf>
  if (ctb_new_format_p (ctb)){
    b0ac:	e3560000 	cmp	r6, #0
    b0b0:	1a00002b 	bne	b164 <write_header2.constprop.0.isra.0+0x100>
        printf ("Can't encode length=%d in a %d byte header!\n",
                 len, hdrlen);
    }
  else
    {
      printf("len=%d\n",len);
    b0b4:	e59f0220 	ldr	r0, [pc, #544]	; b2dc <write_header2.constprop.0.isra.0+0x278>
    b0b8:	e1a01005 	mov	r1, r5
    b0bc:	e08f0000 	add	r0, pc, r0
    b0c0:	eb0018cf 	bl	11404 <tfp_printf>
      if( !len )
    b0c4:	e3550000 	cmp	r5, #0
    b0c8:	1a00000f 	bne	b10c <write_header2.constprop.0.isra.0+0xa8>
        /* 11 => Indeterminate length.  */
	ctb |= 3;
    b0cc:	e3844003 	orr	r4, r4, #3
      else
        /* 10 => 4 byte length.  */
	ctb |= 2;
    }

  if( iobuf_put(out, ctb ) ){
    b0d0:	e1a00007 	mov	r0, r7
    b0d4:	e1a01004 	mov	r1, r4
    b0d8:	ebfff9ee 	bl	9898 <iobuf_writebyte>
    b0dc:	e3500000 	cmp	r0, #0
    b0e0:	1a00006d 	bne	b29c <write_header2.constprop.0.isra.0+0x238>

      }
      if( iobuf_put(out, len ) )
	return -1;
    }
    printf("WRITE HEADER:     ctb=%02x, len=%d\n", ctb, len);
    b0e4:	e59f01f4 	ldr	r0, [pc, #500]	; b2e0 <write_header2.constprop.0.isra.0+0x27c>
    b0e8:	e1a01004 	mov	r1, r4
    b0ec:	e1a02005 	mov	r2, r5
    b0f0:	e08f0000 	add	r0, pc, r0
    b0f4:	eb0018c2 	bl	11404 <tfp_printf>
    log_hexdump(out->d.buf, out->d.len);
    b0f8:	e597101c 	ldr	r1, [r7, #28]
    b0fc:	e5970020 	ldr	r0, [r7, #32]
  return 0;
}
    b100:	e28dd00c 	add	sp, sp, #12
    b104:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
    log_hexdump(out->d.buf, out->d.len);
    b108:	eaffff7a 	b	aef8 <log_hexdump>
      else if( len < 256 )
    b10c:	e35500ff 	cmp	r5, #255	; 0xff
    b110:	8a000045 	bhi	b22c <write_header2.constprop.0.isra.0+0x1c8>
  if( iobuf_put(out, ctb ) ){
    b114:	e1a01004 	mov	r1, r4
    b118:	e1a00007 	mov	r0, r7
    b11c:	ebfff9dd 	bl	9898 <iobuf_writebyte>
    b120:	e3500000 	cmp	r0, #0
    b124:	1a00005c 	bne	b29c <write_header2.constprop.0.isra.0+0x238>
      if( ctb & 2 )
    b128:	e3140002 	tst	r4, #2
    b12c:	1a000047 	bne	b250 <write_header2.constprop.0.isra.0+0x1ec>
      if( ctb & 3 ){
    b130:	e3140003 	tst	r4, #3
    b134:	0a000004 	beq	b14c <write_header2.constprop.0.isra.0+0xe8>
	if(iobuf_put(out, len >> 8 ))
    b138:	e1a01425 	lsr	r1, r5, #8
    b13c:	e1a00007 	mov	r0, r7
    b140:	ebfff9d4 	bl	9898 <iobuf_writebyte>
    b144:	e3500000 	cmp	r0, #0
    b148:	1a00005f 	bne	b2cc <write_header2.constprop.0.isra.0+0x268>
      if( iobuf_put(out, len ) )
    b14c:	e1a01005 	mov	r1, r5
    b150:	e1a00007 	mov	r0, r7
    b154:	ebfff9cf 	bl	9898 <iobuf_writebyte>
    b158:	e3500000 	cmp	r0, #0
    b15c:	0affffe0 	beq	b0e4 <write_header2.constprop.0.isra.0+0x80>
    b160:	ea000059 	b	b2cc <write_header2.constprop.0.isra.0+0x268>
    printf("writing_new_header\n");
    b164:	e59f0178 	ldr	r0, [pc, #376]	; b2e4 <write_header2.constprop.0.isra.0+0x280>
    b168:	e08f0000 	add	r0, pc, r0
    b16c:	eb0018a4 	bl	11404 <tfp_printf>

   Returns 0 on success.  */
static int
write_new_header( IOBUF out, int ctb, u32 len, int hdrlen )
{
  printf("write_new_header %02X %08X %d\n",ctb,len,hdrlen);
    b170:	e59f0170 	ldr	r0, [pc, #368]	; b2e8 <write_header2.constprop.0.isra.0+0x284>
    b174:	e3a03000 	mov	r3, #0
    b178:	e1a02005 	mov	r2, r5
    b17c:	e1a01004 	mov	r1, r4
    b180:	e08f0000 	add	r0, pc, r0
    b184:	eb00189e 	bl	11404 <tfp_printf>
    if( hdrlen )
	printf("can't cope with hdrlen yet\n");

    if( iobuf_put(out, ctb ) )
    b188:	e1a01004 	mov	r1, r4
    b18c:	e1a00007 	mov	r0, r7
    b190:	ebfff9c0 	bl	9898 <iobuf_writebyte>
    b194:	e3500000 	cmp	r0, #0
    b198:	1a00004b 	bne	b2cc <write_header2.constprop.0.isra.0+0x268>
	return -1;
    if( !len ) {
    b19c:	e3550000 	cmp	r5, #0
    b1a0:	0a000035 	beq	b27c <write_header2.constprop.0.isra.0+0x218>
  printf("enable partial body length mode\n");
	iobuf_set_partial_body_length_mode(out, 512 );
    }
    else {
      printf("len=%d\n",len);
    b1a4:	e59f0140 	ldr	r0, [pc, #320]	; b2ec <write_header2.constprop.0.isra.0+0x288>
    b1a8:	e1a01005 	mov	r1, r5
    b1ac:	e08f0000 	add	r0, pc, r0
    b1b0:	eb001893 	bl	11404 <tfp_printf>
	if( len < 192 ) {
    b1b4:	e35500bf 	cmp	r5, #191	; 0xbf
	    if( iobuf_put(out, len ) )
    b1b8:	91a01005 	movls	r1, r5
	if( len < 192 ) {
    b1bc:	9a000016 	bls	b21c <write_header2.constprop.0.isra.0+0x1b8>
		return -1;
	}
	else if( len < 8384 ) {
    b1c0:	e3550d83 	cmp	r5, #8384	; 0x20c0
    b1c4:	3a000039 	bcc	b2b0 <write_header2.constprop.0.isra.0+0x24c>
		return -1;
	    if( iobuf_put( out, (len % 256) )  )
		return -1;
	}
	else {
	    if( iobuf_put( out, 0xff ) )
    b1c8:	e3a010ff 	mov	r1, #255	; 0xff
    b1cc:	e1a00007 	mov	r0, r7
    b1d0:	ebfff9b0 	bl	9898 <iobuf_writebyte>
    b1d4:	e3500000 	cmp	r0, #0
    b1d8:	1a00003b 	bne	b2cc <write_header2.constprop.0.isra.0+0x268>
		return -1;
	    if( iobuf_put( out, (len >> 24)&0xff ) )
    b1dc:	e1a01c25 	lsr	r1, r5, #24
    b1e0:	e1a00007 	mov	r0, r7
    b1e4:	ebfff9ab 	bl	9898 <iobuf_writebyte>
    b1e8:	e3500000 	cmp	r0, #0
    b1ec:	1a000036 	bne	b2cc <write_header2.constprop.0.isra.0+0x268>
		return -1;
	    if( iobuf_put( out, (len >> 16)&0xff ) )
    b1f0:	e7e71855 	ubfx	r1, r5, #16, #8
    b1f4:	e1a00007 	mov	r0, r7
    b1f8:	ebfff9a6 	bl	9898 <iobuf_writebyte>
    b1fc:	e3500000 	cmp	r0, #0
    b200:	1a000031 	bne	b2cc <write_header2.constprop.0.isra.0+0x268>
		return -1;
	    if( iobuf_put( out, (len >> 8)&0xff )  )
    b204:	e7e71455 	ubfx	r1, r5, #8, #8
    b208:	e1a00007 	mov	r0, r7
    b20c:	ebfff9a1 	bl	9898 <iobuf_writebyte>
    b210:	e3500000 	cmp	r0, #0
    b214:	1a00002c 	bne	b2cc <write_header2.constprop.0.isra.0+0x268>
	    if( iobuf_put( out, (len % 256) )  )
    b218:	e6ef1075 	uxtb	r1, r5
    b21c:	e1a00007 	mov	r0, r7
}
    b220:	e28dd00c 	add	sp, sp, #12
    b224:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
	    if( iobuf_put( out, (len % 256) )  )
    b228:	eafff99a 	b	9898 <iobuf_writebyte>
      else if( len < 65536 )
    b22c:	e3550801 	cmp	r5, #65536	; 0x10000
	ctb |= 1;
    b230:	33844001 	orrcc	r4, r4, #1
      else if( len < 65536 )
    b234:	3affffb6 	bcc	b114 <write_header2.constprop.0.isra.0+0xb0>
	ctb |= 2;
    b238:	e3844002 	orr	r4, r4, #2
  if( iobuf_put(out, ctb ) ){
    b23c:	e1a00007 	mov	r0, r7
    b240:	e1a01004 	mov	r1, r4
    b244:	ebfff993 	bl	9898 <iobuf_writebyte>
    b248:	e3500000 	cmp	r0, #0
    b24c:	1a000012 	bne	b29c <write_header2.constprop.0.isra.0+0x238>
	  if(iobuf_put(out, len >> 24 ))
    b250:	e1a01c25 	lsr	r1, r5, #24
    b254:	e1a00007 	mov	r0, r7
    b258:	ebfff98e 	bl	9898 <iobuf_writebyte>
    b25c:	e3500000 	cmp	r0, #0
    b260:	1a000019 	bne	b2cc <write_header2.constprop.0.isra.0+0x268>
	  if(iobuf_put(out, len >> 16 ))
    b264:	e1a01825 	lsr	r1, r5, #16
    b268:	e1a00007 	mov	r0, r7
    b26c:	ebfff989 	bl	9898 <iobuf_writebyte>
    b270:	e3500000 	cmp	r0, #0
    b274:	0affffad 	beq	b130 <write_header2.constprop.0.isra.0+0xcc>
    b278:	ea000013 	b	b2cc <write_header2.constprop.0.isra.0+0x268>
  printf("enable partial body length mode\n");
    b27c:	e59f006c 	ldr	r0, [pc, #108]	; b2f0 <write_header2.constprop.0.isra.0+0x28c>
    b280:	e08f0000 	add	r0, pc, r0
    b284:	eb00185e 	bl	11404 <tfp_printf>
	iobuf_set_partial_body_length_mode(out, 512 );
    b288:	e3a01c02 	mov	r1, #512	; 0x200
    b28c:	e1a00007 	mov	r0, r7
}
    b290:	e28dd00c 	add	sp, sp, #12
    b294:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
	iobuf_set_partial_body_length_mode(out, 512 );
    b298:	eafffd4b 	b	a7cc <iobuf_set_partial_body_length_mode>
    printf("Failing here\n");
    b29c:	e59f0050 	ldr	r0, [pc, #80]	; b2f4 <write_header2.constprop.0.isra.0+0x290>
    b2a0:	e08f0000 	add	r0, pc, r0
}
    b2a4:	e28dd00c 	add	sp, sp, #12
    b2a8:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
    printf("Failing here\n");
    b2ac:	ea001854 	b	11404 <tfp_printf>
	    len -= 192;
    b2b0:	e24550c0 	sub	r5, r5, #192	; 0xc0
	    if( iobuf_put( out, (len / 256) + 192) )
    b2b4:	e1a00007 	mov	r0, r7
    b2b8:	e1a01425 	lsr	r1, r5, #8
    b2bc:	e28110c0 	add	r1, r1, #192	; 0xc0
    b2c0:	ebfff974 	bl	9898 <iobuf_writebyte>
    b2c4:	e3500000 	cmp	r0, #0
    b2c8:	0affffd2 	beq	b218 <write_header2.constprop.0.isra.0+0x1b4>
}
    b2cc:	e28dd00c 	add	sp, sp, #12
    b2d0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b2d4:	0000ba24 	.word	0x0000ba24
    b2d8:	0000ba1c 	.word	0x0000ba1c
    b2dc:	0000ba9c 	.word	0x0000ba9c
    b2e0:	0000ba4c 	.word	0x0000ba4c
    b2e4:	0000b96c 	.word	0x0000b96c
    b2e8:	0000b968 	.word	0x0000b968
    b2ec:	0000b9ac 	.word	0x0000b9ac
    b2f0:	0000b888 	.word	0x0000b888
    b2f4:	0000b88c 	.word	0x0000b88c

0000b2f8 <build_packet>:
{
    b2f8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b2fc:	e1a05000 	mov	r5, r0
    printf("        BUILD PACKET: %s out->use %d\n",get_pkttype_name(pkt->pkttype), out->use);
    b300:	e5d10000 	ldrb	r0, [r1]
{
    b304:	e1a06001 	mov	r6, r1
    printf("        BUILD PACKET: %s out->use %d\n",get_pkttype_name(pkt->pkttype), out->use);
    b308:	ebfffeaf 	bl	adcc <get_pkttype_name>
    b30c:	e5d52000 	ldrb	r2, [r5]
    b310:	e1a01000 	mov	r1, r0
    b314:	e59f04b8 	ldr	r0, [pc, #1208]	; b7d4 <build_packet+0x4dc>
    b318:	e08f0000 	add	r0, pc, r0
    b31c:	eb001838 	bl	11404 <tfp_printf>
  switch ((pkttype = pkt->pkttype))
    b320:	e5d64000 	ldrb	r4, [r6]
    b324:	e3540009 	cmp	r4, #9
    b328:	0a000002 	beq	b338 <build_packet+0x40>
    b32c:	e354000b 	cmp	r4, #11
    b330:	13a03000 	movne	r3, #0
    b334:	1a000003 	bne	b348 <build_packet+0x50>
      new_ctb = pkt->pkt.encrypted->new_ctb;
    b338:	e5963004 	ldr	r3, [r6, #4]
  if (new_ctb || pkttype > 15) /* new format */
    b33c:	e5d33008 	ldrb	r3, [r3, #8]
    b340:	e2533000 	subs	r3, r3, #0
    b344:	13a03001 	movne	r3, #1
    b348:	e354000f 	cmp	r4, #15
    b34c:	c3833001 	orrgt	r3, r3, #1
  printf("CTB: pkttype %02x %d\n", ctb, pkttype);
    b350:	e1a02004 	mov	r2, r4
    b354:	e59f047c 	ldr	r0, [pc, #1148]	; b7d8 <build_packet+0x4e0>
  if (new_ctb || pkttype > 15) /* new format */
    b358:	e3530000 	cmp	r3, #0
    ctb = (0x80 | ((pkttype & 15)<<2));
    b35c:	01a07104 	lsleq	r7, r4, #2
    ctb = (0xc0 | (pkttype & 0x3f));
    b360:	138470c0 	orrne	r7, r4, #192	; 0xc0
  printf("CTB: pkttype %02x %d\n", ctb, pkttype);
    b364:	e08f0000 	add	r0, pc, r0
    ctb = (0x80 | ((pkttype & 15)<<2));
    b368:	03877080 	orreq	r7, r7, #128	; 0x80
  printf("CTB: pkttype %02x %d\n", ctb, pkttype);
    b36c:	e1a01007 	mov	r1, r7
    b370:	eb001823 	bl	11404 <tfp_printf>
  switch (pkttype)
    b374:	e3540009 	cmp	r4, #9
    b378:	0a000009 	beq	b3a4 <build_packet+0xac>
    b37c:	e354000b 	cmp	r4, #11
    b380:	0a00006f 	beq	b544 <build_packet+0x24c>
    b384:	e3540003 	cmp	r4, #3
    b388:	0a000010 	beq	b3d0 <build_packet+0xd8>
      printf ("invalid packet type in build_packet()\n");
    b38c:	e59f0448 	ldr	r0, [pc, #1096]	; b7dc <build_packet+0x4e4>
  int rc = 0;
    b390:	e3a06000 	mov	r6, #0
      printf ("invalid packet type in build_packet()\n");
    b394:	e08f0000 	add	r0, pc, r0
    b398:	eb001819 	bl	11404 <tfp_printf>
}
    b39c:	e1a00006 	mov	r0, r6
    b3a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
      rc = do_encrypted (out, ctb, pkt->pkt.encrypted);
    b3a4:	e5963004 	ldr	r3, [r6, #4]
    return write_header2( out, ctb, len, 0 );
    b3a8:	e1a00005 	mov	r0, r5
    b3ac:	e1a01007 	mov	r1, r7
      rc = do_encrypted (out, ctb, pkt->pkt.encrypted);
    b3b0:	e3a06000 	mov	r6, #0
    n = ed->len ? (ed->len + ed->extralen) : 0;
    b3b4:	e5932000 	ldr	r2, [r3]
    b3b8:	e3520000 	cmp	r2, #0
    b3bc:	15933004 	ldrne	r3, [r3, #4]
    b3c0:	10822003 	addne	r2, r2, r3
    return write_header2( out, ctb, len, 0 );
    b3c4:	ebffff26 	bl	b064 <write_header2.constprop.0.isra.0>
}
    b3c8:	e1a00006 	mov	r0, r6
    b3cc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 printf("do_symkey_enc out->use %d\n", out->use);
    b3d0:	e59f0408 	ldr	r0, [pc, #1032]	; b7e0 <build_packet+0x4e8>
    b3d4:	e5d51000 	ldrb	r1, [r5]
    b3d8:	e08f0000 	add	r0, pc, r0
      rc = do_symkey_enc (out, ctb, pkt->pkt.symkey_enc);
    b3dc:	e5964004 	ldr	r4, [r6, #4]
 printf("do_symkey_enc out->use %d\n", out->use);
    b3e0:	eb001807 	bl	11404 <tfp_printf>
   printf("PKT_symkey_enc:\n");
    b3e4:	e59f03f8 	ldr	r0, [pc, #1016]	; b7e4 <build_packet+0x4ec>
    log_hexdump(enc->s2k.salt, 8);
    b3e8:	e2846009 	add	r6, r4, #9
   printf("PKT_symkey_enc:\n");
    b3ec:	e08f0000 	add	r0, pc, r0
    b3f0:	eb001803 	bl	11404 <tfp_printf>
    printf("  version: %u\n", enc->version);
    b3f4:	e59f03ec 	ldr	r0, [pc, #1004]	; b7e8 <build_packet+0x4f0>
    b3f8:	e5d41000 	ldrb	r1, [r4]
    b3fc:	e08f0000 	add	r0, pc, r0
    b400:	eb0017ff 	bl	11404 <tfp_printf>
    printf("  cipher_algo: %u\n", enc->cipher_algo);
    b404:	e59f03e0 	ldr	r0, [pc, #992]	; b7ec <build_packet+0x4f4>
    b408:	e5d41001 	ldrb	r1, [r4, #1]
    b40c:	e08f0000 	add	r0, pc, r0
    b410:	eb0017fb 	bl	11404 <tfp_printf>
    printf("  aead_algo: %u\n", enc->aead_algo);
    b414:	e59f03d4 	ldr	r0, [pc, #980]	; b7f0 <build_packet+0x4f8>
    b418:	e5d41002 	ldrb	r1, [r4, #2]
    b41c:	e08f0000 	add	r0, pc, r0
    b420:	eb0017f7 	bl	11404 <tfp_printf>
     printf("  s2k:\n");
    b424:	e59f03c8 	ldr	r0, [pc, #968]	; b7f4 <build_packet+0x4fc>
    b428:	e08f0000 	add	r0, pc, r0
    b42c:	eb0017f4 	bl	11404 <tfp_printf>
    printf("    mode: %d\n", enc->s2k.mode);
    b430:	e59f03c0 	ldr	r0, [pc, #960]	; b7f8 <build_packet+0x500>
    b434:	e5941004 	ldr	r1, [r4, #4]
    b438:	e08f0000 	add	r0, pc, r0
    b43c:	eb0017f0 	bl	11404 <tfp_printf>
    printf("    hash_algo: %u\n", enc->s2k.hash_algo);
    b440:	e59f03b4 	ldr	r0, [pc, #948]	; b7fc <build_packet+0x504>
    b444:	e5d41008 	ldrb	r1, [r4, #8]
    b448:	e08f0000 	add	r0, pc, r0
    b44c:	eb0017ec 	bl	11404 <tfp_printf>
    printf("    salt: ");
    b450:	e59f03a8 	ldr	r0, [pc, #936]	; b800 <build_packet+0x508>
    b454:	e08f0000 	add	r0, pc, r0
    b458:	eb0017e9 	bl	11404 <tfp_printf>
    log_hexdump(enc->s2k.salt, 8);
    b45c:	e3a01008 	mov	r1, #8
    b460:	e1a00006 	mov	r0, r6
    b464:	ebfffea3 	bl	aef8 <log_hexdump>
    printf("    count: %08x\n", enc->s2k.count);
    b468:	e59f0394 	ldr	r0, [pc, #916]	; b804 <build_packet+0x50c>
    b46c:	e5941014 	ldr	r1, [r4, #20]
    b470:	e08f0000 	add	r0, pc, r0
    b474:	eb0017e2 	bl	11404 <tfp_printf>
    printf("  seskeylen: %u\n", enc->seskeylen);
    b478:	e59f0388 	ldr	r0, [pc, #904]	; b808 <build_packet+0x510>
    b47c:	e5d41018 	ldrb	r1, [r4, #24]
    b480:	e08f0000 	add	r0, pc, r0
    b484:	eb0017de 	bl	11404 <tfp_printf>
  IOBUF a = iobuf_temp();
    b488:	ebfff510 	bl	88d0 <iobuf_temp>
  switch (enc->s2k.mode)
    b48c:	e5941004 	ldr	r1, [r4, #4]
  IOBUF a = iobuf_temp();
    b490:	e1a08000 	mov	r8, r0
  switch (enc->s2k.mode)
    b494:	e3510001 	cmp	r1, #1
    b498:	ca000026 	bgt	b538 <build_packet+0x240>
    b49c:	e3510000 	cmp	r1, #0
    b4a0:	aa000002 	bge	b4b0 <build_packet+0x1b8>
      printf ("do_symkey_enc: s2k=%d\n", enc->s2k.mode);
    b4a4:	e59f0360 	ldr	r0, [pc, #864]	; b80c <build_packet+0x514>
    b4a8:	e08f0000 	add	r0, pc, r0
    b4ac:	eb0017d4 	bl	11404 <tfp_printf>
    iobuf_put( a, enc->version );
    b4b0:	e5d41000 	ldrb	r1, [r4]
    b4b4:	e1a00008 	mov	r0, r8
    b4b8:	ebfff8f6 	bl	9898 <iobuf_writebyte>
    iobuf_put( a, enc->cipher_algo );
    b4bc:	e5d41001 	ldrb	r1, [r4, #1]
    b4c0:	e1a00008 	mov	r0, r8
    b4c4:	ebfff8f3 	bl	9898 <iobuf_writebyte>
    if (enc->version == 5)
    b4c8:	e5d43000 	ldrb	r3, [r4]
    b4cc:	e3530005 	cmp	r3, #5
    b4d0:	0a0000bb 	beq	b7c4 <build_packet+0x4cc>
    iobuf_put( a, enc->s2k.mode );
    b4d4:	e5941004 	ldr	r1, [r4, #4]
    b4d8:	e1a00008 	mov	r0, r8
    b4dc:	ebfff8ed 	bl	9898 <iobuf_writebyte>
    iobuf_put( a, enc->s2k.hash_algo );
    b4e0:	e5d41008 	ldrb	r1, [r4, #8]
    b4e4:	e1a00008 	mov	r0, r8
    b4e8:	ebfff8ea 	bl	9898 <iobuf_writebyte>
    if( enc->s2k.mode == 1 || enc->s2k.mode == 3 ) {
    b4ec:	e5943004 	ldr	r3, [r4, #4]
    b4f0:	e3c33002 	bic	r3, r3, #2
    b4f4:	e3530001 	cmp	r3, #1
    b4f8:	0a0000a6 	beq	b798 <build_packet+0x4a0>
    if( enc->seskeylen )
    b4fc:	e5d42018 	ldrb	r2, [r4, #24]
    b500:	e3520000 	cmp	r2, #0
    b504:	1a00009f 	bne	b788 <build_packet+0x490>
    return write_header2( out, ctb, len, 0 );
    b508:	e598201c 	ldr	r2, [r8, #28]
    b50c:	e1a01007 	mov	r1, r7
    b510:	e1a00005 	mov	r0, r5
    b514:	ebfffed2 	bl	b064 <write_header2.constprop.0.isra.0>
    rc = iobuf_write_temp( out, a );
    b518:	e1a01008 	mov	r1, r8
    b51c:	e1a00005 	mov	r0, r5
    b520:	ebfffbd8 	bl	a488 <iobuf_write_temp>
    b524:	e1a06000 	mov	r6, r0
    iobuf_close(a);
    b528:	e1a00008 	mov	r0, r8
    b52c:	ebfff491 	bl	8778 <iobuf_close>
}
    b530:	e1a00006 	mov	r0, r6
    b534:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  switch (enc->s2k.mode)
    b538:	e3510003 	cmp	r1, #3
    b53c:	0affffdb 	beq	b4b0 <build_packet+0x1b8>
    b540:	eaffffd7 	b	b4a4 <build_packet+0x1ac>
      rc = do_plaintext (out, ctb, pkt->pkt.plaintext);
    b544:	e5964004 	ldr	r4, [r6, #4]
  printf("do_plaintext pt->buf: %d\n", pt->buf);
    b548:	e59f02c0 	ldr	r0, [pc, #704]	; b810 <build_packet+0x518>
    b54c:	e5941004 	ldr	r1, [r4, #4]
    b550:	e08f0000 	add	r0, pc, r0
    b554:	eb0017aa 	bl	11404 <tfp_printf>
printf("Checking packet type\n");
    b558:	e59f02b4 	ldr	r0, [pc, #692]	; b814 <build_packet+0x51c>
    b55c:	e08f0000 	add	r0, pc, r0
    b560:	eb0017a7 	bl	11404 <tfp_printf>
    printf("Writing header\n");
    b564:	e59f02ac 	ldr	r0, [pc, #684]	; b818 <build_packet+0x520>
    b568:	e08f0000 	add	r0, pc, r0
    b56c:	eb0017a4 	bl	11404 <tfp_printf>
  if(pt->namelen>255)
    b570:	e5943014 	ldr	r3, [r4, #20]
  u32 res = pt->len? (1 + 1 + pt->namelen + 4 + pt->len) : 0;
    b574:	e5946000 	ldr	r6, [r4]
  printf("calc_plaintext write_32 %08x",res);
    b578:	e59f029c 	ldr	r0, [pc, #668]	; b81c <build_packet+0x524>
  if(pt->namelen>255)
    b57c:	e35300ff 	cmp	r3, #255	; 0xff
    pt->namelen=255;
    b580:	c3a030ff 	movgt	r3, #255	; 0xff
    b584:	c5843014 	strgt	r3, [r4, #20]
  u32 res = pt->len? (1 + 1 + pt->namelen + 4 + pt->len) : 0;
    b588:	e3560000 	cmp	r6, #0
  printf("calc_plaintext write_32 %08x",res);
    b58c:	e08f0000 	add	r0, pc, r0
  u32 res = pt->len? (1 + 1 + pt->namelen + 4 + pt->len) : 0;
    b590:	12866006 	addne	r6, r6, #6
    b594:	15943014 	ldrne	r3, [r4, #20]
    b598:	10866003 	addne	r6, r6, r3
  printf("calc_plaintext write_32 %08x",res);
    b59c:	e1a01006 	mov	r1, r6
    b5a0:	eb001797 	bl	11404 <tfp_printf>
    return write_header2( out, ctb, len, 0 );
    b5a4:	e1a02006 	mov	r2, r6
    b5a8:	e1a01007 	mov	r1, r7
    b5ac:	e1a00005 	mov	r0, r5
    printf("Writing name: %.*s\n", (int)pt->namelen, pt->name);
    b5b0:	e2846018 	add	r6, r4, #24
    return write_header2( out, ctb, len, 0 );
    b5b4:	ebfffeaa 	bl	b064 <write_header2.constprop.0.isra.0>
    printf("CTB: %d\n", ctb);
    b5b8:	e59f0260 	ldr	r0, [pc, #608]	; b820 <build_packet+0x528>
    b5bc:	e1a01007 	mov	r1, r7
    b5c0:	e08f0000 	add	r0, pc, r0
    b5c4:	eb00178e 	bl	11404 <tfp_printf>
    printf("Checking mode validity: mode = %c\n", pt->mode);
    b5c8:	e59f0254 	ldr	r0, [pc, #596]	; b824 <build_packet+0x52c>
    b5cc:	e594100c 	ldr	r1, [r4, #12]
    b5d0:	e08f0000 	add	r0, pc, r0
    b5d4:	eb00178a 	bl	11404 <tfp_printf>
    printf("Writing mode: %c\n", pt->mode);
    b5d8:	e59f0248 	ldr	r0, [pc, #584]	; b828 <build_packet+0x530>
    b5dc:	e594100c 	ldr	r1, [r4, #12]
    b5e0:	e08f0000 	add	r0, pc, r0
    b5e4:	eb001786 	bl	11404 <tfp_printf>
    iobuf_put(out, pt->mode);
    b5e8:	e594100c 	ldr	r1, [r4, #12]
    b5ec:	e1a00005 	mov	r0, r5
    b5f0:	ebfff8a8 	bl	9898 <iobuf_writebyte>
    printf("Writing namelen: %zu\n", pt->namelen);
    b5f4:	e59f0230 	ldr	r0, [pc, #560]	; b82c <build_packet+0x534>
    b5f8:	e5941014 	ldr	r1, [r4, #20]
    b5fc:	e08f0000 	add	r0, pc, r0
    b600:	eb00177f 	bl	11404 <tfp_printf>
    iobuf_put(out, pt->namelen);
    b604:	e5941014 	ldr	r1, [r4, #20]
    b608:	e1a00005 	mov	r0, r5
    b60c:	ebfff8a1 	bl	9898 <iobuf_writebyte>
    printf("Writing name: %.*s\n", (int)pt->namelen, pt->name);
    b610:	e59f0218 	ldr	r0, [pc, #536]	; b830 <build_packet+0x538>
    b614:	e1a02006 	mov	r2, r6
    b618:	e5941014 	ldr	r1, [r4, #20]
    b61c:	e08f0000 	add	r0, pc, r0
    b620:	eb001777 	bl	11404 <tfp_printf>
    iobuf_write(out, pt->name, pt->namelen);
    b624:	e5942014 	ldr	r2, [r4, #20]
    b628:	e1a01006 	mov	r1, r6
    b62c:	e1a00005 	mov	r0, r5
    b630:	ebfff8c3 	bl	9944 <iobuf_write>
    printf("Writing timestamp: %u\n", pt->timestamp);
    b634:	e59f01f8 	ldr	r0, [pc, #504]	; b834 <build_packet+0x53c>
    pt->timestamp = 1624780800;
    b638:	e3a01a03 	mov	r1, #12288	; 0x3000
    b63c:	e34610d8 	movt	r1, #24792	; 0x60d8
    printf("Writing timestamp: %u\n", pt->timestamp);
    b640:	e08f0000 	add	r0, pc, r0
    pt->timestamp = 1624780800;
    b644:	e5841010 	str	r1, [r4, #16]
    printf("Writing timestamp: %u\n", pt->timestamp);
    b648:	eb00176d 	bl	11404 <tfp_printf>
    rc = write_32(out, pt->timestamp);
    b64c:	e5946010 	ldr	r6, [r4, #16]
  printf("write_32 %08x\n",a);
    b650:	e59f01e0 	ldr	r0, [pc, #480]	; b838 <build_packet+0x540>
    b654:	e1a01006 	mov	r1, r6
    b658:	e08f0000 	add	r0, pc, r0
    b65c:	eb001768 	bl	11404 <tfp_printf>
    iobuf_put(out, a>> 24);
    b660:	e1a01c26 	lsr	r1, r6, #24
    b664:	e1a00005 	mov	r0, r5
    b668:	ebfff88a 	bl	9898 <iobuf_writebyte>
    iobuf_put(out, a>> 16);
    b66c:	e1a01826 	lsr	r1, r6, #16
    b670:	e1a00005 	mov	r0, r5
    b674:	ebfff887 	bl	9898 <iobuf_writebyte>
    iobuf_put(out, a>> 8);
    b678:	e1a01426 	lsr	r1, r6, #8
    b67c:	e1a00005 	mov	r0, r5
    b680:	ebfff884 	bl	9898 <iobuf_writebyte>
    return iobuf_put(out, a);
    b684:	e1a01006 	mov	r1, r6
    b688:	e1a00005 	mov	r0, r5
    b68c:	ebfff881 	bl	9898 <iobuf_writebyte>
    b690:	e1a06000 	mov	r6, r0
    printf("rc: %d\n", rc);
    b694:	e59f01a0 	ldr	r0, [pc, #416]	; b83c <build_packet+0x544>
    b698:	e1a01006 	mov	r1, r6
    b69c:	e08f0000 	add	r0, pc, r0
    b6a0:	eb001757 	bl	11404 <tfp_printf>
    printf("pt->buf: %d\n", pt->buf->nbytes);
    b6a4:	e5943004 	ldr	r3, [r4, #4]
    b6a8:	e59f0190 	ldr	r0, [pc, #400]	; b840 <build_packet+0x548>
    b6ac:	e5931008 	ldr	r1, [r3, #8]
    b6b0:	e08f0000 	add	r0, pc, r0
    b6b4:	eb001752 	bl	11404 <tfp_printf>
    if (rc)
    b6b8:	e3560000 	cmp	r6, #0
    b6bc:	1affff36 	bne	b39c <build_packet+0xa4>
    if (pt->buf)
    b6c0:	e5941004 	ldr	r1, [r4, #4]
    b6c4:	e3510000 	cmp	r1, #0
    b6c8:	0a000028 	beq	b770 <build_packet+0x478>
        nbytes = iobuf_copy (out, pt->buf);
    b6cc:	e1a00005 	mov	r0, r5
    b6d0:	ebfffb2d 	bl	a38c <iobuf_copy>
    b6d4:	e1a08000 	mov	r8, r0
        printf("!!!!! Wrote buf %d bytes", nbytes);
    b6d8:	e59f0164 	ldr	r0, [pc, #356]	; b844 <build_packet+0x54c>
    b6dc:	e1a01008 	mov	r1, r8
    b6e0:	e08f0000 	add	r0, pc, r0
    b6e4:	eb001746 	bl	11404 <tfp_printf>
            && (iobuf_error (out) || iobuf_error (pt->buf)))
    b6e8:	e5956028 	ldr	r6, [r5, #40]	; 0x28
        if (nbytes == (size_t)(-1)
    b6ec:	e3780001 	cmn	r8, #1
    b6f0:	1a000005 	bne	b70c <build_packet+0x414>
            && (iobuf_error (out) || iobuf_error (pt->buf)))
    b6f4:	e3560000 	cmp	r6, #0
    b6f8:	1affff27 	bne	b39c <build_packet+0xa4>
    b6fc:	e5943004 	ldr	r3, [r4, #4]
    b700:	e5936028 	ldr	r6, [r3, #40]	; 0x28
    b704:	e3560000 	cmp	r6, #0
    b708:	1affff23 	bne	b39c <build_packet+0xa4>
  printf("ctb new format: %d\n", res);
    b70c:	e59f0134 	ldr	r0, [pc, #308]	; b848 <build_packet+0x550>
  int res = (ctb & (1 << 6));
    b710:	e2077040 	and	r7, r7, #64	; 0x40
  printf("ctb new format: %d\n", res);
    b714:	e1a01007 	mov	r1, r7
    b718:	e08f0000 	add	r0, pc, r0
    b71c:	eb001738 	bl	11404 <tfp_printf>
        if(ctb_new_format_p (ctb) && !pt->len){
    b720:	e5941000 	ldr	r1, [r4]
    b724:	e3570000 	cmp	r7, #0
    b728:	0a000007 	beq	b74c <build_packet+0x454>
    b72c:	e3510000 	cmp	r1, #0
    b730:	1a000005 	bne	b74c <build_packet+0x454>
          iobuf_set_partial_body_length_mode (out, 0);
    b734:	e1a00005 	mov	r0, r5
    b738:	ebfffc23 	bl	a7cc <iobuf_set_partial_body_length_mode>
          printf("Turned off partial body length mode\n");
    b73c:	e59f0108 	ldr	r0, [pc, #264]	; b84c <build_packet+0x554>
    b740:	e08f0000 	add	r0, pc, r0
    b744:	eb00172e 	bl	11404 <tfp_printf>
        if (pt->len && nbytes != pt->len)
    b748:	e5941000 	ldr	r1, [r4]
            if (!rc) /* Just in case no error was set  */
    b74c:	e3510000 	cmp	r1, #0
    b750:	11580001 	cmpne	r8, r1
    b754:	13a01001 	movne	r1, #1
    b758:	03a01000 	moveq	r1, #0
    b75c:	e3560000 	cmp	r6, #0
    b760:	13a01000 	movne	r1, #0
    b764:	02011001 	andeq	r1, r1, #1
              rc = -1;//gpg_error (GPG_ERR_EIO);
    b768:	e3510000 	cmp	r1, #0
    b76c:	13e06000 	mvnne	r6, #0
    printf("do_plaintext done %d\n", rc);
    b770:	e59f00d8 	ldr	r0, [pc, #216]	; b850 <build_packet+0x558>
    b774:	e1a01006 	mov	r1, r6
    b778:	e08f0000 	add	r0, pc, r0
    b77c:	eb001720 	bl	11404 <tfp_printf>
}
    b780:	e1a00006 	mov	r0, r6
    b784:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	iobuf_write(a, enc->seskey, enc->seskeylen );
    b788:	e2841019 	add	r1, r4, #25
    b78c:	e1a00008 	mov	r0, r8
    b790:	ebfff86b 	bl	9944 <iobuf_write>
    b794:	eaffff5b 	b	b508 <build_packet+0x210>
	iobuf_write(a, enc->s2k.salt, 8 );
    b798:	e1a01006 	mov	r1, r6
    b79c:	e3a02008 	mov	r2, #8
    b7a0:	e1a00008 	mov	r0, r8
    b7a4:	ebfff866 	bl	9944 <iobuf_write>
	if( enc->s2k.mode == 3 )
    b7a8:	e5943004 	ldr	r3, [r4, #4]
    b7ac:	e3530003 	cmp	r3, #3
    b7b0:	1affff51 	bne	b4fc <build_packet+0x204>
	    iobuf_put(a, enc->s2k.count);
    b7b4:	e5941014 	ldr	r1, [r4, #20]
    b7b8:	e1a00008 	mov	r0, r8
    b7bc:	ebfff835 	bl	9898 <iobuf_writebyte>
    b7c0:	eaffff4d 	b	b4fc <build_packet+0x204>
      iobuf_put (a, enc->aead_algo);
    b7c4:	e5d41002 	ldrb	r1, [r4, #2]
    b7c8:	e1a00008 	mov	r0, r8
    b7cc:	ebfff831 	bl	9898 <iobuf_writebyte>
    b7d0:	eaffff3f 	b	b4d4 <build_packet+0x1dc>
    b7d4:	0000b848 	.word	0x0000b848
    b7d8:	0000b824 	.word	0x0000b824
    b7dc:	0000ba3c 	.word	0x0000ba3c
    b7e0:	0000b7c8 	.word	0x0000b7c8
    b7e4:	0000b7d0 	.word	0x0000b7d0
    b7e8:	0000b7d4 	.word	0x0000b7d4
    b7ec:	0000b7d4 	.word	0x0000b7d4
    b7f0:	0000b7d8 	.word	0x0000b7d8
    b7f4:	0000b7e0 	.word	0x0000b7e0
    b7f8:	0000b7d8 	.word	0x0000b7d8
    b7fc:	0000b7d8 	.word	0x0000b7d8
    b800:	0000b7e0 	.word	0x0000b7e0
    b804:	0000b7d0 	.word	0x0000b7d0
    b808:	0000b7d4 	.word	0x0000b7d4
    b80c:	0000b7c0 	.word	0x0000b7c0
    b810:	0000b730 	.word	0x0000b730
    b814:	0000b740 	.word	0x0000b740
    b818:	0000b74c 	.word	0x0000b74c
    b81c:	0000b4a8 	.word	0x0000b4a8
    b820:	0000b704 	.word	0x0000b704
    b824:	0000b700 	.word	0x0000b700
    b828:	0000b714 	.word	0x0000b714
    b82c:	0000b70c 	.word	0x0000b70c
    b830:	0000b704 	.word	0x0000b704
    b834:	0000b6f4 	.word	0x0000b6f4
    b838:	0000b6f4 	.word	0x0000b6f4
    b83c:	0000b6c0 	.word	0x0000b6c0
    b840:	0000b6b4 	.word	0x0000b6b4
    b844:	0000b694 	.word	0x0000b694
    b848:	0000b3a8 	.word	0x0000b3a8
    b84c:	0000b650 	.word	0x0000b650
    b850:	0000b640 	.word	0x0000b640

0000b854 <print_iobuf_info2>:
void print_iobuf_info2(const struct iobuf_struct *iobuf) {
    b854:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b858:	e1a04000 	mov	r4, r0
    printf("print_iobuf_info2\n");
    b85c:	e59f6118 	ldr	r6, [pc, #280]	; b97c <print_iobuf_info2+0x128>
    printf("  Use: %d\n", iobuf->use);
    b860:	e59f5118 	ldr	r5, [pc, #280]	; b980 <print_iobuf_info2+0x12c>
    printf("  nlimit: %ld\n", (long)iobuf->nlimit);
    b864:	e59f7118 	ldr	r7, [pc, #280]	; b984 <print_iobuf_info2+0x130>
    printf("print_iobuf_info2\n");
    b868:	e08f6006 	add	r6, pc, r6
    printf("  Use: %d\n", iobuf->use);
    b86c:	e08f5005 	add	r5, pc, r5
    printf("  nlimit: %ld\n", (long)iobuf->nlimit);
    b870:	e08f7007 	add	r7, pc, r7
    b874:	ea000037 	b	b958 <print_iobuf_info2+0x104>
    printf("  Use: %d\n", iobuf->use);
    b878:	e5d41000 	ldrb	r1, [r4]
    b87c:	eb0016e0 	bl	11404 <tfp_printf>
    printf("  nlimit: %ld\n", (long)iobuf->nlimit);
    b880:	e5941004 	ldr	r1, [r4, #4]
    b884:	e1a00007 	mov	r0, r7
    b888:	eb0016dd 	bl	11404 <tfp_printf>
    printf("  nbytes: %ld\n", (long)iobuf->nbytes);
    b88c:	e59f00f4 	ldr	r0, [pc, #244]	; b988 <print_iobuf_info2+0x134>
    b890:	e5941008 	ldr	r1, [r4, #8]
    b894:	e08f0000 	add	r0, pc, r0
    b898:	eb0016d9 	bl	11404 <tfp_printf>
    printf("  ntotal: %ld\n", (long)iobuf->ntotal);
    b89c:	e59f00e8 	ldr	r0, [pc, #232]	; b98c <print_iobuf_info2+0x138>
    b8a0:	e594100c 	ldr	r1, [r4, #12]
    b8a4:	e08f0000 	add	r0, pc, r0
    b8a8:	eb0016d5 	bl	11404 <tfp_printf>
    printf("  nofast: %d\n", iobuf->nofast);
    b8ac:	e59f00dc 	ldr	r0, [pc, #220]	; b990 <print_iobuf_info2+0x13c>
    b8b0:	e5941010 	ldr	r1, [r4, #16]
    b8b4:	e08f0000 	add	r0, pc, r0
    b8b8:	eb0016d1 	bl	11404 <tfp_printf>
    printf("  Buffer size: %zu\n", iobuf->d.size);
    b8bc:	e59f00d0 	ldr	r0, [pc, #208]	; b994 <print_iobuf_info2+0x140>
    b8c0:	e5941014 	ldr	r1, [r4, #20]
    b8c4:	e08f0000 	add	r0, pc, r0
    b8c8:	eb0016cd 	bl	11404 <tfp_printf>
    printf("  Buffer start: %zu\n", iobuf->d.start);
    b8cc:	e59f00c4 	ldr	r0, [pc, #196]	; b998 <print_iobuf_info2+0x144>
    b8d0:	e5941018 	ldr	r1, [r4, #24]
    b8d4:	e08f0000 	add	r0, pc, r0
    b8d8:	eb0016c9 	bl	11404 <tfp_printf>
    printf("  Buffer length: %zu\n", iobuf->d.len);
    b8dc:	e59f00b8 	ldr	r0, [pc, #184]	; b99c <print_iobuf_info2+0x148>
    b8e0:	e594101c 	ldr	r1, [r4, #28]
    b8e4:	e08f0000 	add	r0, pc, r0
    b8e8:	eb0016c5 	bl	11404 <tfp_printf>
    printf("  Filter EOF: %d\n", iobuf->filter_eof);
    b8ec:	e59f00ac 	ldr	r0, [pc, #172]	; b9a0 <print_iobuf_info2+0x14c>
    b8f0:	e5941024 	ldr	r1, [r4, #36]	; 0x24
    b8f4:	e08f0000 	add	r0, pc, r0
    b8f8:	eb0016c1 	bl	11404 <tfp_printf>
    printf("  Error: %d\n", iobuf->error);
    b8fc:	e59f00a0 	ldr	r0, [pc, #160]	; b9a4 <print_iobuf_info2+0x150>
    b900:	e5941028 	ldr	r1, [r4, #40]	; 0x28
    b904:	e08f0000 	add	r0, pc, r0
    b908:	eb0016bd 	bl	11404 <tfp_printf>
    printf("  Filter owner: %d\n", iobuf->filter_ov_owner);
    b90c:	e59f0094 	ldr	r0, [pc, #148]	; b9a8 <print_iobuf_info2+0x154>
    b910:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    b914:	e08f0000 	add	r0, pc, r0
    b918:	eb0016b9 	bl	11404 <tfp_printf>
    printf("  Filter number: %d\n", iobuf->no);
    b91c:	e59f0088 	ldr	r0, [pc, #136]	; b9ac <print_iobuf_info2+0x158>
    b920:	e5941040 	ldr	r1, [r4, #64]	; 0x40
    b924:	e08f0000 	add	r0, pc, r0
    b928:	eb0016b5 	bl	11404 <tfp_printf>
    printf("  Sub filters count: %d\n", iobuf->subno);
    b92c:	e59f007c 	ldr	r0, [pc, #124]	; b9b0 <print_iobuf_info2+0x15c>
    b930:	e5941044 	ldr	r1, [r4, #68]	; 0x44
    b934:	e08f0000 	add	r0, pc, r0
    b938:	eb0016b1 	bl	11404 <tfp_printf>
    if (iobuf->chain) {
    b93c:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
        printf("  Chain:\n");
    b940:	e59f006c 	ldr	r0, [pc, #108]	; b9b4 <print_iobuf_info2+0x160>
    if (iobuf->chain) {
    b944:	e3530000 	cmp	r3, #0
        printf("  Chain:\n");
    b948:	e08f0000 	add	r0, pc, r0
    if (iobuf->chain) {
    b94c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
        printf("  Chain:\n");
    b950:	eb0016ab 	bl	11404 <tfp_printf>
        print_iobuf_info2(iobuf->chain);
    b954:	e594403c 	ldr	r4, [r4, #60]	; 0x3c
    printf("print_iobuf_info2\n");
    b958:	e1a00006 	mov	r0, r6
    b95c:	eb0016a8 	bl	11404 <tfp_printf>
    if (!iobuf) {
    b960:	e3540000 	cmp	r4, #0
    printf("  Use: %d\n", iobuf->use);
    b964:	e1a00005 	mov	r0, r5
    if (!iobuf) {
    b968:	1affffc2 	bne	b878 <print_iobuf_info2+0x24>
        printf("iobuf is NULL\n");
    b96c:	e59f0044 	ldr	r0, [pc, #68]	; b9b8 <print_iobuf_info2+0x164>
}
    b970:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
        printf("iobuf is NULL\n");
    b974:	e08f0000 	add	r0, pc, r0
    b978:	ea0016a1 	b	11404 <tfp_printf>
    b97c:	0000b590 	.word	0x0000b590
    b980:	0000b5b0 	.word	0x0000b5b0
    b984:	0000b5b8 	.word	0x0000b5b8
    b988:	0000b5a4 	.word	0x0000b5a4
    b98c:	0000b5a4 	.word	0x0000b5a4
    b990:	0000b5a4 	.word	0x0000b5a4
    b994:	0000b5a4 	.word	0x0000b5a4
    b998:	0000b5a8 	.word	0x0000b5a8
    b99c:	0000b5b0 	.word	0x0000b5b0
    b9a0:	0000b5b8 	.word	0x0000b5b8
    b9a4:	0000b5bc 	.word	0x0000b5bc
    b9a8:	0000b5bc 	.word	0x0000b5bc
    b9ac:	0000b5c0 	.word	0x0000b5c0
    b9b0:	0000b5c8 	.word	0x0000b5c8
    b9b4:	0000b5d0 	.word	0x0000b5d0
    b9b8:	0000b498 	.word	0x0000b498

0000b9bc <_gcry_cipher_encrypt>:
}

int
_gcry_cipher_encrypt (gcry_cipher_hd_t h, void *out, size_t outsize,
                      const void *in, size_t inlen)
{
    b9bc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b9c0:	e24dd008 	sub	sp, sp, #8
    b9c4:	e1a08000 	mov	r8, r0
    b9c8:	e1a04001 	mov	r4, r1
    b9cc:	e59d6020 	ldr	r6, [sp, #32]
    b9d0:	e1a07003 	mov	r7, r3
  printf("_gcry_cipher_encrypt inlen: %d, outSize: %d, unused: %d\n", inlen, outsize, h->unused);
    b9d4:	e59f006c 	ldr	r0, [pc, #108]	; ba48 <_gcry_cipher_encrypt+0x8c>
{
    b9d8:	e1a05002 	mov	r5, r2
  printf("_gcry_cipher_encrypt inlen: %d, outSize: %d, unused: %d\n", inlen, outsize, h->unused);
    b9dc:	e5983020 	ldr	r3, [r8, #32]
    b9e0:	e1a01006 	mov	r1, r6
    b9e4:	e08f0000 	add	r0, pc, r0
    b9e8:	eb001685 	bl	11404 <tfp_printf>
  int rc;

  if (!in)  /* Caller requested in-place encryption.  */
    b9ec:	e3570000 	cmp	r7, #0
  //   {
  //     log_error ("cipher_encrypt: key not set\n");
  //     return GPG_ERR_MISSING_KEY;
  //   }

  rc = _gcry_cipher_cfb_encrypt (h, out, outsize, in, inlen);
    b9f0:	e1a00008 	mov	r0, r8
  if (!in)  /* Caller requested in-place encryption.  */
    b9f4:	01a06005 	moveq	r6, r5
  rc = _gcry_cipher_cfb_encrypt (h, out, outsize, in, inlen);
    b9f8:	11a03007 	movne	r3, r7
    b9fc:	e58d6000 	str	r6, [sp]
    ba00:	01a03004 	moveq	r3, r4
    ba04:	e1a02005 	mov	r2, r5
    ba08:	e1a01004 	mov	r1, r4
    ba0c:	eb000bfc 	bl	ea04 <_gcry_cipher_cfb_encrypt>

  /* Failsafe: Make sure that the plaintext will never make it into
     OUT if the encryption returned an error.  */
  if (rc && out)
    ba10:	e3500000 	cmp	r0, #0
    ba14:	13540000 	cmpne	r4, #0
    ba18:	e1a06000 	mov	r6, r0
    ba1c:	1a000002 	bne	ba2c <_gcry_cipher_encrypt+0x70>
    memset (out, 0x42, outsize);

  return rc;
}
    ba20:	e1a00006 	mov	r0, r6
    ba24:	e28dd008 	add	sp, sp, #8
    ba28:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    memset (out, 0x42, outsize);
    ba2c:	e1a02005 	mov	r2, r5
    ba30:	e3a01042 	mov	r1, #66	; 0x42
    ba34:	e1a00004 	mov	r0, r4
    ba38:	eb000d6e 	bl	eff8 <memset>
}
    ba3c:	e1a00006 	mov	r0, r6
    ba40:	e28dd008 	add	sp, sp, #8
    ba44:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ba48:	0000b540 	.word	0x0000b540

0000ba4c <cipher_filter_cfb>:

int
cipher_filter_cfb (void *opaque, int control,
                   iobuf_t chain, byte *buf, size_t *len)
{
    ba4c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    ba50:	e1a05000 	mov	r5, r0
  printf("cipher_filter_cfb\n");
    ba54:	e59f0278 	ldr	r0, [pc, #632]	; bcd4 <cipher_filter_cfb+0x288>
{
    ba58:	e24dd044 	sub	sp, sp, #68	; 0x44
    ba5c:	e1a04001 	mov	r4, r1
    ba60:	e1a07002 	mov	r7, r2
  printf("cipher_filter_cfb\n");
    ba64:	e08f0000 	add	r0, pc, r0
{
    ba68:	e1a06003 	mov	r6, r3
  printf("cipher_filter_cfb\n");
    ba6c:	eb001664 	bl	11404 <tfp_printf>
  cipher_filter_context_t *cfx = opaque;

  size_t size = *len;
  int rc = 0;
  printf("cipher_filter_cfb %d %d\n",control, cfx->wrote_header);
    ba70:	e5d5200c 	ldrb	r2, [r5, #12]
    ba74:	e1a01004 	mov	r1, r4
    ba78:	e59f0258 	ldr	r0, [pc, #600]	; bcd8 <cipher_filter_cfb+0x28c>
  size_t size = *len;
    ba7c:	e59d3060 	ldr	r3, [sp, #96]	; 0x60
  printf("cipher_filter_cfb %d %d\n",control, cfx->wrote_header);
    ba80:	e2022001 	and	r2, r2, #1
    ba84:	e08f0000 	add	r0, pc, r0
  size_t size = *len;
    ba88:	e5938000 	ldr	r8, [r3]
  printf("cipher_filter_cfb %d %d\n",control, cfx->wrote_header);
    ba8c:	eb00165c 	bl	11404 <tfp_printf>
  // log_hexdump(buf, size);
  if (control == IOBUFCTRL_UNDERFLOW) /* decrypt */
    ba90:	e3540003 	cmp	r4, #3
    ba94:	0a00008c 	beq	bccc <cipher_filter_cfb+0x280>
    {
      // printf("IOBUFCTRL_UNDERFLOW\n");
      rc = -1; /* not used */
    }
  else if (control == IOBUFCTRL_FLUSH) /* encrypt */
    ba98:	e3540004 	cmp	r4, #4
    ba9c:	0a000009 	beq	bac8 <cipher_filter_cfb+0x7c>
        }
      printf("short_blklen_count: %d\n", cfx->short_blklen_count);

      rc = iobuf_write (chain, buf, size);
    }
  else if (control == IOBUFCTRL_FREE)
    baa0:	e3540002 	cmp	r4, #2
  int rc = 0;
    baa4:	13a04000 	movne	r4, #0
  else if (control == IOBUFCTRL_FREE)
    baa8:	0a00007c 	beq	bca0 <cipher_filter_cfb+0x254>
  else if (control == IOBUFCTRL_DESC)
    {
      // printf("IOBUFCTRL_DESC\n");
     // mem2str (buf, "cipher_filter_cfb", *ret_len);
    }
    printf("cipher_filter_cfb RETURNING %d\n",rc);
    baac:	e59f0228 	ldr	r0, [pc, #552]	; bcdc <cipher_filter_cfb+0x290>
    bab0:	e1a01004 	mov	r1, r4
    bab4:	e08f0000 	add	r0, pc, r0
    bab8:	eb001651 	bl	11404 <tfp_printf>

  return rc;
}
    babc:	e1a00004 	mov	r0, r4
    bac0:	e28dd044 	add	sp, sp, #68	; 0x44
    bac4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
      printf("IOBUFCTRL_FLUSH\n");
    bac8:	e59f0210 	ldr	r0, [pc, #528]	; bce0 <cipher_filter_cfb+0x294>
    bacc:	e08f0000 	add	r0, pc, r0
    bad0:	eb00164b 	bl	11404 <tfp_printf>
      if (!cfx->wrote_header){
    bad4:	e5d5100c 	ldrb	r1, [r5, #12]
    bad8:	e2114001 	ands	r4, r1, #1
    badc:	0a000017 	beq	bb40 <cipher_filter_cfb+0xf4>
      printf("Encrypting2: %d bytes\n", size);
    bae0:	e59f01fc 	ldr	r0, [pc, #508]	; bce4 <cipher_filter_cfb+0x298>
    bae4:	e1a01008 	mov	r1, r8
    bae8:	e08f0000 	add	r0, pc, r0
    baec:	eb001644 	bl	11404 <tfp_printf>
      _gcry_cipher_encrypt (cfx->cipher_hd, buf, size, NULL, 0);
    baf0:	e3a03000 	mov	r3, #0
    baf4:	e1a02008 	mov	r2, r8
    baf8:	e58d3000 	str	r3, [sp]
    bafc:	e1a01006 	mov	r1, r6
    bb00:	e5950008 	ldr	r0, [r5, #8]
    bb04:	ebffffac 	bl	b9bc <_gcry_cipher_encrypt>
      if (cfx->short_blklen_warn)
    bb08:	e5d5300c 	ldrb	r3, [r5, #12]
          cfx->short_blklen_count += size;
    bb0c:	e5951010 	ldr	r1, [r5, #16]
      printf("short_blklen_count: %d\n", cfx->short_blklen_count);
    bb10:	e59f01d0 	ldr	r0, [pc, #464]	; bce8 <cipher_filter_cfb+0x29c>
      if (cfx->short_blklen_warn)
    bb14:	e3130002 	tst	r3, #2
          cfx->short_blklen_count += size;
    bb18:	10881001 	addne	r1, r8, r1
    bb1c:	15851010 	strne	r1, [r5, #16]
      printf("short_blklen_count: %d\n", cfx->short_blklen_count);
    bb20:	e08f0000 	add	r0, pc, r0
    bb24:	eb001636 	bl	11404 <tfp_printf>
      rc = iobuf_write (chain, buf, size);
    bb28:	e1a02008 	mov	r2, r8
    bb2c:	e1a01006 	mov	r1, r6
    bb30:	e1a00007 	mov	r0, r7
    bb34:	ebfff782 	bl	9944 <iobuf_write>
    bb38:	e1a04000 	mov	r4, r0
    bb3c:	eaffffda 	b	baac <cipher_filter_cfb+0x60>
  printf ("write_cfb_header\n");
    bb40:	e59f01a4 	ldr	r0, [pc, #420]	; bcec <cipher_filter_cfb+0x2a0>
  memset (&ed, 0, sizeof ed);
    bb44:	e28d902c 	add	r9, sp, #44	; 0x2c
  printf ("write_cfb_header\n");
    bb48:	e08f0000 	add	r0, pc, r0
    bb4c:	eb00162c 	bl	11404 <tfp_printf>
  memset (&ed, 0, sizeof ed);
    bb50:	e3a02014 	mov	r2, #20
    bb54:	e1a01004 	mov	r1, r4
    bb58:	e1a00009 	mov	r0, r9
    bb5c:	eb000d25 	bl	eff8 <memset>
  ed.len = cfx->datalen;
    bb60:	e5953004 	ldr	r3, [r5, #4]
  printf("use_mdc %d\n", cfx->dek->use_mdc);
    bb64:	e59f0184 	ldr	r0, [pc, #388]	; bcf0 <cipher_filter_cfb+0x2a4>
  ed.len = cfx->datalen;
    bb68:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  ed.new_ctb = !ed.len;
    bb6c:	e16f3f13 	clz	r3, r3
  printf("use_mdc %d\n", cfx->dek->use_mdc);
    bb70:	e08f0000 	add	r0, pc, r0
  ed.new_ctb = !ed.len;
    bb74:	e1a032a3 	lsr	r3, r3, #5
    bb78:	e5cd3034 	strb	r3, [sp, #52]	; 0x34
  printf("use_mdc %d\n", cfx->dek->use_mdc);
    bb7c:	e5953000 	ldr	r3, [r5]
  init_packet (&pkt);
    bb80:	e5cd4008 	strb	r4, [sp, #8]
  printf("use_mdc %d\n", cfx->dek->use_mdc);
    bb84:	e5d31008 	ldrb	r1, [r3, #8]
  ed.extralen = blocksize + 2;
    bb88:	e3a0300a 	mov	r3, #10
    bb8c:	e58d3030 	str	r3, [sp, #48]	; 0x30
  printf("use_mdc %d\n", cfx->dek->use_mdc);
    bb90:	e7e012d1 	ubfx	r1, r1, #5, #1
  init_packet (&pkt);
    bb94:	e58d400c 	str	r4, [sp, #12]
  printf("use_mdc %d\n", cfx->dek->use_mdc);
    bb98:	eb001619 	bl	11404 <tfp_printf>
  pkt.pkt.encrypted = &ed;
    bb9c:	e58d900c 	str	r9, [sp, #12]
  pkt.pkttype = //cfx->dek->use_mdc? PKT_ENCRYPTED_MDC :
    bba0:	e3a03009 	mov	r3, #9
    bba4:	e5cd3008 	strb	r3, [sp, #8]
  if (build_packet( a, &pkt))
    bba8:	e28d1008 	add	r1, sp, #8
    bbac:	e1a00007 	mov	r0, r7
    bbb0:	ebfffdd0 	bl	b2f8 <build_packet>
    bbb4:	e3500000 	cmp	r0, #0
    bbb8:	1a00003f 	bne	bcbc <cipher_filter_cfb+0x270>
  printf("Fixing random %d bytes\n", nprefix);
    bbbc:	e59f0130 	ldr	r0, [pc, #304]	; bcf4 <cipher_filter_cfb+0x2a8>
    bbc0:	e3a01008 	mov	r1, #8
memcpy(temp, fixed_random, nprefix);
    bbc4:	e28d4018 	add	r4, sp, #24
  printf("Fixing random %d bytes\n", nprefix);
    bbc8:	e08f0000 	add	r0, pc, r0
    bbcc:	eb00160c 	bl	11404 <tfp_printf>
  const unsigned char fixed_random[] = {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF}; // Example fixed bytes
    bbd0:	e59f3120 	ldr	r3, [pc, #288]	; bcf8 <cipher_filter_cfb+0x2ac>
memcpy(temp, fixed_random, nprefix);
    bbd4:	e3a02008 	mov	r2, #8
  const unsigned char fixed_random[] = {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF}; // Example fixed bytes
    bbd8:	e08f3003 	add	r3, pc, r3
    bbdc:	e8930003 	ldm	r3, {r0, r1}
    bbe0:	e28d3010 	add	r3, sp, #16
    bbe4:	e8830003 	stm	r3, {r0, r1}
memcpy(temp, fixed_random, nprefix);
    bbe8:	e1a01003 	mov	r1, r3
    bbec:	e1a00004 	mov	r0, r4
    bbf0:	eb000d37 	bl	f0d4 <memcpy>
  temp[nprefix] = temp[nprefix-2];
    bbf4:	e5dd201e 	ldrb	r2, [sp, #30]
  _gcry_cipher_setkey (cfx->cipher_hd, cfx->dek->key, cfx->dek->keylen);
    bbf8:	e5953000 	ldr	r3, [r5]
  temp[nprefix] = temp[nprefix-2];
    bbfc:	e5cd2020 	strb	r2, [sp, #32]
  temp[nprefix+1] = temp[nprefix-1];
    bc00:	e5dd201f 	ldrb	r2, [sp, #31]
  _gcry_cipher_setkey (cfx->cipher_hd, cfx->dek->key, cfx->dek->keylen);
    bc04:	e2831009 	add	r1, r3, #9
    bc08:	e5950008 	ldr	r0, [r5, #8]
  temp[nprefix+1] = temp[nprefix-1];
    bc0c:	e5cd2021 	strb	r2, [sp, #33]	; 0x21
  _gcry_cipher_setkey (cfx->cipher_hd, cfx->dek->key, cfx->dek->keylen);
    bc10:	e5932004 	ldr	r2, [r3, #4]
    bc14:	eb000938 	bl	e0fc <_gcry_cipher_setkey>
  log_hexdump(&cfx->cipher_hd->key, 16);
    bc18:	e5950008 	ldr	r0, [r5, #8]
    bc1c:	e3a01010 	mov	r1, #16
    bc20:	e2800030 	add	r0, r0, #48	; 0x30
    bc24:	ebfffcb3 	bl	aef8 <log_hexdump>
  _gcry_cipher_setiv (cfx->cipher_hd, NULL, 8);
    bc28:	e5950008 	ldr	r0, [r5, #8]
    bc2c:	e3a02008 	mov	r2, #8
    bc30:	e3a01000 	mov	r1, #0
    bc34:	eb000944 	bl	e14c <_gcry_cipher_setiv>
  log_hexdump(&cfx->cipher_hd->u_iv, 8);
    bc38:	e5950008 	ldr	r0, [r5, #8]
    bc3c:	e3a01008 	mov	r1, #8
    bc40:	ebfffcac 	bl	aef8 <log_hexdump>
      printf("Encrypting: %d bytes\n", nprefix+2);
    bc44:	e59f00b0 	ldr	r0, [pc, #176]	; bcfc <cipher_filter_cfb+0x2b0>
    bc48:	e3a0100a 	mov	r1, #10
    bc4c:	e08f0000 	add	r0, pc, r0
    bc50:	eb0015eb 	bl	11404 <tfp_printf>
  _gcry_cipher_encrypt (cfx->cipher_hd, temp, nprefix+2, NULL, 0);
    bc54:	e3a03000 	mov	r3, #0
    bc58:	e3a0200a 	mov	r2, #10
    bc5c:	e58d3000 	str	r3, [sp]
    bc60:	e1a01004 	mov	r1, r4
    bc64:	e5950008 	ldr	r0, [r5, #8]
    bc68:	ebffff53 	bl	b9bc <_gcry_cipher_encrypt>
  cipher_sync (cfx->cipher_hd);
    bc6c:	e5950008 	ldr	r0, [r5, #8]
    bc70:	eb000940 	bl	e178 <cipher_sync>
  iobuf_write (a, temp, nprefix+2);
    bc74:	e1a01004 	mov	r1, r4
    bc78:	e3a0200a 	mov	r2, #10
    bc7c:	e1a00007 	mov	r0, r7
    bc80:	ebfff72f 	bl	9944 <iobuf_write>
  cfx->short_blklen_count = nprefix+2;
    bc84:	e3a0300a 	mov	r3, #10
    bc88:	e5853010 	str	r3, [r5, #16]
  cfx->wrote_header = 1;
    bc8c:	e5d5300c 	ldrb	r3, [r5, #12]
    bc90:	e3c33003 	bic	r3, r3, #3
    bc94:	e3833003 	orr	r3, r3, #3
    bc98:	e5c5300c 	strb	r3, [r5, #12]
}
    bc9c:	eaffff8f 	b	bae0 <cipher_filter_cfb+0x94>
      printf("IOBUFCTRL_FREE\n");
    bca0:	e59f0058 	ldr	r0, [pc, #88]	; bd00 <cipher_filter_cfb+0x2b4>
  int rc = 0;
    bca4:	e3a04000 	mov	r4, #0
      printf("IOBUFCTRL_FREE\n");
    bca8:	e08f0000 	add	r0, pc, r0
    bcac:	eb0015d4 	bl	11404 <tfp_printf>
      _gcry_cipher_close (cfx->cipher_hd);
    bcb0:	e5950008 	ldr	r0, [r5, #8]
    bcb4:	eb000921 	bl	e140 <_gcry_cipher_close>
    bcb8:	eaffff7b 	b	baac <cipher_filter_cfb+0x60>
    printf ("build_packet(ENCR_DATA) failed\n");
    bcbc:	e59f0040 	ldr	r0, [pc, #64]	; bd04 <cipher_filter_cfb+0x2b8>
    bcc0:	e08f0000 	add	r0, pc, r0
    bcc4:	eb0015ce 	bl	11404 <tfp_printf>
    bcc8:	eaffffbb 	b	bbbc <cipher_filter_cfb+0x170>
      rc = -1; /* not used */
    bccc:	e3e04000 	mvn	r4, #0
    bcd0:	eaffff75 	b	baac <cipher_filter_cfb+0x60>
    bcd4:	0000b4fc 	.word	0x0000b4fc
    bcd8:	0000b4f0 	.word	0x0000b4f0
    bcdc:	0000b5a0 	.word	0x0000b5a0
    bce0:	0000b4c4 	.word	0x0000b4c4
    bce4:	0000b52c 	.word	0x0000b52c
    bce8:	0000b50c 	.word	0x0000b50c
    bcec:	0000b45c 	.word	0x0000b45c
    bcf0:	0000b448 	.word	0x0000b448
    bcf4:	0000b41c 	.word	0x0000b41c
    bcf8:	0000b49c 	.word	0x0000b49c
    bcfc:	0000b3b0 	.word	0x0000b3b0
    bd00:	0000b39c 	.word	0x0000b39c
    bd04:	0000b304 	.word	0x0000b304

0000bd08 <decrypt_memory>:
#include "fwddecl.h"
#include "printf.h"
#include "memory.h"


int decrypt_memory(ctrl_t ctrl, const unsigned char* data, size_t length) {
    bd08:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    bd0c:	e1a07000 	mov	r7, r0
    printf("decrypt_memory\n");
    bd10:	e59f010c 	ldr	r0, [pc, #268]	; be24 <decrypt_memory+0x11c>
int decrypt_memory(ctrl_t ctrl, const unsigned char* data, size_t length) {
    bd14:	e24dd014 	sub	sp, sp, #20
    bd18:	e59f8108 	ldr	r8, [pc, #264]	; be28 <decrypt_memory+0x120>
    bd1c:	e1a05002 	mov	r5, r2
    printf("decrypt_memory\n");
    bd20:	e08f0000 	add	r0, pc, r0
int decrypt_memory(ctrl_t ctrl, const unsigned char* data, size_t length) {
    bd24:	e1a06001 	mov	r6, r1
    bd28:	e08f8008 	add	r8, pc, r8
    printf("decrypt_memory\n");
    bd2c:	eb0015b4 	bl	11404 <tfp_printf>
    // printf("Decrypt params:\n");
    // printf("Data ptr: %p\n", (void*)data);
    printf("Session key: %s\n", ctrl->session_key);
    bd30:	e59f00f4 	ldr	r0, [pc, #244]	; be2c <decrypt_memory+0x124>
    // printf("Decrypt params: %d\n",ctrl->enc_length);
    iobuf_t a;
    int rc;
    gnupg_fd_t fp;
    file_filter_ctx_t *fcx;
    size_t len = 0;
    bd34:	e3a04000 	mov	r4, #0
    printf("Session key: %s\n", ctrl->session_key);
    bd38:	e597101c 	ldr	r1, [r7, #28]
    bd3c:	e08f0000 	add	r0, pc, r0
    bd40:	eb0015af 	bl	11404 <tfp_printf>
    ctrl->enc_length=length;
    bd44:	e5875020 	str	r5, [r7, #32]
    const char *opentype = "rb";
    const char *fname = NULL;
    int fd = 0;
    int use = 0;
    /* Create input iobuf from memory */
    a = iobuf_temp_with_content((const char*)data, length);
    bd48:	e1a00006 	mov	r0, r6
    size_t len = 0;
    bd4c:	e58d400c 	str	r4, [sp, #12]
    a = iobuf_temp_with_content((const char*)data, length);
    bd50:	e1a01005 	mov	r1, r5
    bd54:	ebfff2e0 	bl	88dc <iobuf_temp_with_content>
    
    if (!a) {
    bd58:	e2506000 	subs	r6, r0, #0
    bd5c:	0a00002e 	beq	be1c <decrypt_memory+0x114>
        return gpg_error_from_syserror();
    }
    iobuf_fdopen (translate_file_handle (fd, use == IOBUF_INPUT ? 0 : 1),
    bd60:	e59f50c8 	ldr	r5, [pc, #200]	; be30 <decrypt_memory+0x128>
    bd64:	e1a01004 	mov	r1, r4
    bd68:	e1a00004 	mov	r0, r4
    bd6c:	e08f5005 	add	r5, pc, r5
    bd70:	ebfffb36 	bl	aa50 <translate_file_handle>
    bd74:	e1a01005 	mov	r1, r5
    bd78:	ebfff420 	bl	8e00 <iobuf_fdopen>
			 opentype);

	  fp = fd_cache_open (NULL, opentype);
    bd7c:	e1a01005 	mov	r1, r5
    bd80:	e1a00004 	mov	r0, r4
    bd84:	ebfff1a5 	bl	8420 <fd_cache_open>
    bd88:	e1a09000 	mov	r9, r0
    fcx = xmalloc (sizeof *fcx + strlen (fname));
    bd8c:	e1a00004 	mov	r0, r4
    bd90:	eb001b20 	bl	12a18 <strlen>
    bd94:	e2800038 	add	r0, r0, #56	; 0x38
    bd98:	eb000c9f 	bl	f01c <xmalloc>
    fcx->fp = fp;
    fcx->print_only_name = print_only;
    bd9c:	e5804010 	str	r4, [r0, #16]
    fcx = xmalloc (sizeof *fcx + strlen (fname));
    bda0:	e1a05000 	mov	r5, r0
    fcx->fp = fp;
    bda4:	e5809000 	str	r9, [r0]
    strcpy (fcx->fname, fname);
    bda8:	e1a01004 	mov	r1, r4
    bdac:	e2800036 	add	r0, r0, #54	; 0x36
    bdb0:	eb000d0e 	bl	f1f0 <strcpy>
    if (!print_only)
      a->real_fname = xstrdup (fname);
    bdb4:	e1a00004 	mov	r0, r4
    bdb8:	eb000d64 	bl	f350 <xstrdup>
    a->filter = file_filter;
    bdbc:	e59f3070 	ldr	r3, [pc, #112]	; be34 <decrypt_memory+0x12c>
    fcx->no_cache = 1;
    bdc0:	e3a01001 	mov	r1, #1
      a->real_fname = xstrdup (fname);
    bdc4:	e5860038 	str	r0, [r6, #56]	; 0x38
    a->filter_ov = fcx;

    // printf("Added\n");
    file_filter (fcx, IOBUFCTRL_INIT, NULL, NULL, &len);
    bdc8:	e1a02004 	mov	r2, r4
    a->filter = file_filter;
    bdcc:	e7983003 	ldr	r3, [r8, r3]
    file_filter (fcx, IOBUFCTRL_INIT, NULL, NULL, &len);
    bdd0:	e1a00005 	mov	r0, r5
    a->filter = file_filter;
    bdd4:	e586302c 	str	r3, [r6, #44]	; 0x2c
    file_filter (fcx, IOBUFCTRL_INIT, NULL, NULL, &len);
    bdd8:	e28d300c 	add	r3, sp, #12
    fcx->no_cache = 1;
    bddc:	e5851008 	str	r1, [r5, #8]
    a->filter_ov = fcx;
    bde0:	e5865030 	str	r5, [r6, #48]	; 0x30
    file_filter (fcx, IOBUFCTRL_INIT, NULL, NULL, &len);
    bde4:	e58d3000 	str	r3, [sp]
    bde8:	e1a03004 	mov	r3, r4
    bdec:	ebfff0b7 	bl	80d0 <file_filter>
    //     iobuf_close(a);
    //     return rc;
    // }

    /* Process encryption packets */
    rc = proc_encryption_packets(ctrl, NULL, a);
    bdf0:	e1a01004 	mov	r1, r4
    bdf4:	e1a02006 	mov	r2, r6
    bdf8:	e1a00007 	mov	r0, r7
    bdfc:	eb001e14 	bl	13654 <proc_encryption_packets>
    be00:	e1a04000 	mov	r4, r0
    // return -1;
    printf("\n\nEND decrypt_memory\n\n");
    be04:	e59f002c 	ldr	r0, [pc, #44]	; be38 <decrypt_memory+0x130>
    be08:	e08f0000 	add	r0, pc, r0
    be0c:	eb00157c 	bl	11404 <tfp_printf>
    /* Clean up */
    // iobuf_close(a);
    return rc;
}
    be10:	e1a00004 	mov	r0, r4
    be14:	e28dd014 	add	sp, sp, #20
    be18:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
        return gpg_error_from_syserror();
    be1c:	e3e04000 	mvn	r4, #0
    be20:	eafffffa 	b	be10 <decrypt_memory+0x108>
    be24:	0000b360 	.word	0x0000b360
    be28:	0002fc94 	.word	0x0002fc94
    be2c:	0000b354 	.word	0x0000b354
    be30:	0000a3b4 	.word	0x0000a3b4
    be34:	00000044 	.word	0x00000044
    be38:	0000b29c 	.word	0x0000b29c

0000be3c <decrypt_message>:
 * writes to the filename which is included in the file and it
 * rejects files which don't begin with an encrypted message.
 */
int
decrypt_message (ctrl_t ctrl, const char *filename)
{
    be3c:	e92d4070 	push	{r4, r5, r6, lr}
    be40:	e1a05000 	mov	r5, r0
  printf("decrypt_message filename:%s\n",filename);
    be44:	e59f0070 	ldr	r0, [pc, #112]	; bebc <decrypt_message+0x80>
{
    be48:	e1a04001 	mov	r4, r1
    be4c:	e59f606c 	ldr	r6, [pc, #108]	; bec0 <decrypt_message+0x84>
  printf("decrypt_message filename:%s\n",filename);
    be50:	e08f0000 	add	r0, pc, r0
{
    be54:	e08f6006 	add	r6, pc, r6
  printf("decrypt_message filename:%s\n",filename);
    be58:	eb001569 	bl	11404 <tfp_printf>
  int rc;

//   pfx = new_progress_context ();

  /* Open the message file.  */
  fp = iobuf_open (filename);
    be5c:	e1a00004 	mov	r0, r4
    be60:	ebfff2b9 	bl	894c <iobuf_open>
    be64:	e1a04000 	mov	r4, r0
//     }else{
//       printf("ELSE\n");
//     }

// instead:
iobuf_get_fd (fp);
    be68:	ebfff9b3 	bl	a53c <iobuf_get_fd>
  if ( !fp )
    be6c:	e3540000 	cmp	r4, #0
    be70:	0a00000f 	beq	beb4 <decrypt_message+0x78>
//       opt.outfile = "-";
//       opt.flags.dummy_outfile = 1;
//     }
//   else
//     opt.flags.dummy_outfile = 0;
  printf("opt.outfile:%s\n",opt.outfile);
    be74:	e59f3048 	ldr	r3, [pc, #72]	; bec4 <decrypt_message+0x88>
    be78:	e59f0048 	ldr	r0, [pc, #72]	; bec8 <decrypt_message+0x8c>
    be7c:	e7963003 	ldr	r3, [r6, r3]
    be80:	e08f0000 	add	r0, pc, r0
    be84:	e5931010 	ldr	r1, [r3, #16]
    be88:	eb00155d 	bl	11404 <tfp_printf>
  rc = proc_encryption_packets (ctrl, NULL, fp );
    be8c:	e1a02004 	mov	r2, r4
    be90:	e3a01000 	mov	r1, #0
    be94:	e1a00005 	mov	r0, r5
    be98:	eb001ded 	bl	13654 <proc_encryption_packets>
    be9c:	e1a03000 	mov	r3, r0
//   if (opt.flags.dummy_outfile)
//     opt.outfile = NULL;

  iobuf_close (fp);
    bea0:	e1a00004 	mov	r0, r4
  rc = proc_encryption_packets (ctrl, NULL, fp );
    bea4:	e1a04003 	mov	r4, r3
  iobuf_close (fp);
    bea8:	ebfff232 	bl	8778 <iobuf_close>
//   release_armor_context (afx);
//   release_progress_context (pfx);
  return rc;
}
    beac:	e1a00004 	mov	r0, r4
    beb0:	e8bd8070 	pop	{r4, r5, r6, pc}
      return rc;
    beb4:	e3e04000 	mvn	r4, #0
    beb8:	eafffffb 	b	beac <decrypt_message+0x70>
    bebc:	0000b26c 	.word	0x0000b26c
    bec0:	0002fb68 	.word	0x0002fb68
    bec4:	0000002c 	.word	0x0000002c
    bec8:	0000b25c 	.word	0x0000b25c

0000becc <release_dfx_context>:
typedef struct decode_filter_context_s *decode_filter_ctx_t;

/* Helper to release the decode context.  */
static void
release_dfx_context(decode_filter_ctx_t dfx)
{
    becc:	e92d4070 	push	{r4, r5, r6, lr}
  if (!dfx)
    bed0:	e2504000 	subs	r4, r0, #0
    bed4:	08bd8070 	popeq	{r4, r5, r6, pc}
    return;

  printf(dfx->refcount);
    bed8:	e5940000 	ldr	r0, [r4]
    bedc:	eb001548 	bl	11404 <tfp_printf>
  if (!--dfx->refcount)
    bee0:	e5945000 	ldr	r5, [r4]
    bee4:	e2455001 	sub	r5, r5, #1
    bee8:	e5845000 	str	r5, [r4]
    beec:	e3550000 	cmp	r5, #0
    bef0:	18bd8070 	popne	{r4, r5, r6, pc}
  {
    // gcry_cipher_close (dfx->cipher_hd);
    xfree(dfx->cipher_hd);
    bef4:	e5940004 	ldr	r0, [r4, #4]
    bef8:	eb000c3b 	bl	efec <xfree>
    dfx->cipher_hd = NULL;
    // gcry_md_close (dfx->mdc_hash);
    xfree(dfx->mdc_hash);
    befc:	e5940008 	ldr	r0, [r4, #8]
    dfx->cipher_hd = NULL;
    bf00:	e5845004 	str	r5, [r4, #4]
    xfree(dfx->mdc_hash);
    bf04:	eb000c38 	bl	efec <xfree>
    dfx->mdc_hash = NULL;
    bf08:	e5845008 	str	r5, [r4, #8]
    xfree(dfx);
    bf0c:	e1a00004 	mov	r0, r4
  }
}
    bf10:	e8bd4070 	pop	{r4, r5, r6, lr}
    xfree(dfx);
    bf14:	ea000c34 	b	efec <xfree>

0000bf18 <decode_filter>:
//   return rc;
// }

static int
decode_filter(void *opaque, int control, IOBUF a, byte *buf, size_t *ret_len)
{
    bf18:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    bf1c:	e24dd008 	sub	sp, sp, #8
    bf20:	e1a05000 	mov	r5, r0
    bf24:	e1a04001 	mov	r4, r1
    bf28:	e59d9028 	ldr	r9, [sp, #40]	; 0x28
    bf2c:	e1a07002 	mov	r7, r2
    decode_filter_ctx_t fc = opaque;

  printf("decode_filter control %d, ret_len=%d len=%d\n",control,*ret_len, fc->length);
    bf30:	e59f01e4 	ldr	r0, [pc, #484]	; c11c <decode_filter+0x204>
{
    bf34:	e1a06003 	mov	r6, r3
  printf("decode_filter control %d, ret_len=%d len=%d\n",control,*ret_len, fc->length);
    bf38:	e5992000 	ldr	r2, [r9]
    bf3c:	e08f0000 	add	r0, pc, r0
    bf40:	e5953078 	ldr	r3, [r5, #120]	; 0x78
    bf44:	eb00152e 	bl	11404 <tfp_printf>
  size_t size = *ret_len;
  // size_t size = fc->length;//*ret_len;
  size_t n;
  int rc = 0;

  if (control == IOBUFCTRL_UNDERFLOW && fc->eof_seen)
    bf48:	e3540003 	cmp	r4, #3
    bf4c:	0a000004 	beq	bf64 <decode_filter+0x4c>
        fc->eof_seen = 1;
      rc = -1; /* Return EOF. */
    }
    *ret_len = n;
  }
  else if (control == IOBUFCTRL_FREE)
    bf50:	e3540002 	cmp	r4, #2
  int rc = 0;
    bf54:	13a00000 	movne	r0, #0
  else if (control == IOBUFCTRL_FREE)
    bf58:	0a000046 	beq	c078 <decode_filter+0x160>
  else if (control == IOBUFCTRL_DESC)
  {
    //      mem2str (buf, "decode_filter", *ret_len);
  }
  return rc;
}
    bf5c:	e28dd008 	add	sp, sp, #8
    bf60:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  if (control == IOBUFCTRL_UNDERFLOW && fc->eof_seen)
    bf64:	e5d54050 	ldrb	r4, [r5, #80]	; 0x50
    bf68:	e214a006 	ands	sl, r4, #6
    bf6c:	1a000063 	bne	c100 <decode_filter+0x1e8>
    printf("control == IOBUFCTRL_UNDERFLOW\n");
    bf70:	e59f01a8 	ldr	r0, [pc, #424]	; c120 <decode_filter+0x208>
  size_t size = *ret_len;
    bf74:	e5998000 	ldr	r8, [r9]
    printf("control == IOBUFCTRL_UNDERFLOW\n");
    bf78:	e08f0000 	add	r0, pc, r0
    bf7c:	eb001520 	bl	11404 <tfp_printf>
  printf("fill_buffer\n");
    bf80:	e59f019c 	ldr	r0, [pc, #412]	; c124 <decode_filter+0x20c>
    bf84:	e08f0000 	add	r0, pc, r0
    bf88:	eb00151d 	bl	11404 <tfp_printf>
  if (dfx->partial)
    bf8c:	e5d53050 	ldrb	r3, [r5, #80]	; 0x50
    bf90:	e2134001 	ands	r4, r3, #1
    bf94:	1a000024 	bne	c02c <decode_filter+0x114>
    while (nread < nbytes && dfx->length)
    bf98:	e3580000 	cmp	r8, #0
    bf9c:	0a000050 	beq	c0e4 <decode_filter+0x1cc>
    bfa0:	e595c078 	ldr	ip, [r5, #120]	; 0x78
    bfa4:	ea00000b 	b	bfd8 <decode_filter+0xc0>
      ret = iobuf_read(stream, &buffer[nread], curr);
    bfa8:	e152000c 	cmp	r2, ip
    bfac:	e1a00007 	mov	r0, r7
    bfb0:	21a0200c 	movcs	r2, ip
    bfb4:	ebfff5c6 	bl	96d4 <iobuf_read>
      if (ret == -1)
    bfb8:	e3700001 	cmn	r0, #1
    bfbc:	0a000041 	beq	c0c8 <decode_filter+0x1b0>
      dfx->length -= ret;
    bfc0:	e595c078 	ldr	ip, [r5, #120]	; 0x78
      nread += ret;
    bfc4:	e0844000 	add	r4, r4, r0
    while (nread < nbytes && dfx->length)
    bfc8:	e1580004 	cmp	r8, r4
      dfx->length -= ret;
    bfcc:	e04cc000 	sub	ip, ip, r0
    bfd0:	e585c078 	str	ip, [r5, #120]	; 0x78
    while (nread < nbytes && dfx->length)
    bfd4:	9a00003f 	bls	c0d8 <decode_filter+0x1c0>
      curr = nbytes - nread;
    bfd8:	e0482004 	sub	r2, r8, r4
    while (nread < nbytes && dfx->length)
    bfdc:	e35c0000 	cmp	ip, #0
      ret = iobuf_read(stream, &buffer[nread], curr);
    bfe0:	e0861004 	add	r1, r6, r4
    while (nread < nbytes && dfx->length)
    bfe4:	1affffef 	bne	bfa8 <decode_filter+0x90>
      dfx->eof_seen = 1; /* Normal EOF.  */
    bfe8:	e5d53050 	ldrb	r3, [r5, #80]	; 0x50
    bfec:	e3a02001 	mov	r2, #1
    bff0:	e7c23092 	bfi	r3, r2, #1, #2
    bff4:	e5c53050 	strb	r3, [r5, #80]	; 0x50
    if (n)
    bff8:	e3540000 	cmp	r4, #0
    bffc:	1a000022 	bne	c08c <decode_filter+0x174>
      if (!fc->eof_seen)
    c000:	e5d53050 	ldrb	r3, [r5, #80]	; 0x50
    c004:	e2134006 	ands	r4, r3, #6
      rc = -1; /* Return EOF. */
    c008:	e3e00000 	mvn	r0, #0
        fc->eof_seen = 1;
    c00c:	03a02001 	moveq	r2, #1
    c010:	13a04000 	movne	r4, #0
    c014:	05d53050 	ldrbeq	r3, [r5, #80]	; 0x50
    c018:	07c23092 	bfieq	r3, r2, #1, #2
    c01c:	05c53050 	strbeq	r3, [r5, #80]	; 0x50
    *ret_len = n;
    c020:	e5894000 	str	r4, [r9]
}
    c024:	e28dd008 	add	sp, sp, #8
    c028:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
      printf("dfx->partial nread=%zu nbytes=%zu\n", nread, nbytes);
    c02c:	e59f00f4 	ldr	r0, [pc, #244]	; c128 <decode_filter+0x210>
    c030:	e1a02008 	mov	r2, r8
    c034:	e1a0100a 	mov	r1, sl
    c038:	e08f0000 	add	r0, pc, r0
    c03c:	eb0014f0 	bl	11404 <tfp_printf>
    while (nread < nbytes)
    c040:	e3580000 	cmp	r8, #0
  size_t nread = offset;
    c044:	11a0400a 	movne	r4, sl
    while (nread < nbytes)
    c048:	1a000003 	bne	c05c <decode_filter+0x144>
    c04c:	eaffffeb 	b	c000 <decode_filter+0xe8>
      nread += ret;
    c050:	e0844000 	add	r4, r4, r0
    while (nread < nbytes)
    c054:	e1580004 	cmp	r8, r4
    c058:	9a00000b 	bls	c08c <decode_filter+0x174>
      ret = iobuf_read(stream, &buffer[nread], curr);
    c05c:	e0482004 	sub	r2, r8, r4
    c060:	e1a00007 	mov	r0, r7
    c064:	e0861004 	add	r1, r6, r4
    c068:	ebfff599 	bl	96d4 <iobuf_read>
      if (ret == -1)
    c06c:	e3700001 	cmn	r0, #1
    c070:	1afffff6 	bne	c050 <decode_filter+0x138>
    c074:	eaffffdb 	b	bfe8 <decode_filter+0xd0>
    release_dfx_context(fc);
    c078:	e1a00005 	mov	r0, r5
    c07c:	ebffff92 	bl	becc <release_dfx_context>
  int rc = 0;
    c080:	e3a00000 	mov	r0, #0
}
    c084:	e28dd008 	add	sp, sp, #8
    c088:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
      if (fc->cipher_hd)
    c08c:	e5950004 	ldr	r0, [r5, #4]
    c090:	e3500000 	cmp	r0, #0
    c094:	0a000003 	beq	c0a8 <decode_filter+0x190>
          printf("cipher_hd is allocated\n");
    c098:	e59f008c 	ldr	r0, [pc, #140]	; c12c <decode_filter+0x214>
    c09c:	e08f0000 	add	r0, pc, r0
    c0a0:	eb0014d7 	bl	11404 <tfp_printf>
        _gcry_cipher_decrypt (fc->cipher_hd, buf, n, NULL, 0);
    c0a4:	e5950004 	ldr	r0, [r5, #4]
    c0a8:	e3a05000 	mov	r5, #0
    c0ac:	e1a01006 	mov	r1, r6
    c0b0:	e58d5000 	str	r5, [sp]
    c0b4:	e1a03005 	mov	r3, r5
    c0b8:	e1a02004 	mov	r2, r4
    c0bc:	eb000a25 	bl	e958 <_gcry_cipher_decrypt>
  int rc = 0;
    c0c0:	e1a00005 	mov	r0, r5
    c0c4:	eaffffd5 	b	c020 <decode_filter+0x108>
        dfx->eof_seen = 3; /* Premature EOF. */
    c0c8:	e5d53050 	ldrb	r3, [r5, #80]	; 0x50
    if (!dfx->length)
    c0cc:	e595c078 	ldr	ip, [r5, #120]	; 0x78
        dfx->eof_seen = 3; /* Premature EOF. */
    c0d0:	e3833006 	orr	r3, r3, #6
    c0d4:	e5c53050 	strb	r3, [r5, #80]	; 0x50
    if (!dfx->length)
    c0d8:	e35c0000 	cmp	ip, #0
    c0dc:	1affffc5 	bne	bff8 <decode_filter+0xe0>
    c0e0:	eaffffc0 	b	bfe8 <decode_filter+0xd0>
    c0e4:	e5952078 	ldr	r2, [r5, #120]	; 0x78
    c0e8:	e3520000 	cmp	r2, #0
      dfx->eof_seen = 1; /* Normal EOF.  */
    c0ec:	03a02001 	moveq	r2, #1
    c0f0:	07c23092 	bfieq	r3, r2, #1, #2
    c0f4:	05c53050 	strbeq	r3, [r5, #80]	; 0x50
      if (!fc->eof_seen)
    c0f8:	06ef3073 	uxtbeq	r3, r3
    c0fc:	eaffffc0 	b	c004 <decode_filter+0xec>
    printf("IOBUFCTRL_UNDERFLOW && fc->eof_seen\n");;
    c100:	e59f0028 	ldr	r0, [pc, #40]	; c130 <decode_filter+0x218>
    c104:	e08f0000 	add	r0, pc, r0
    c108:	eb0014bd 	bl	11404 <tfp_printf>
    *ret_len = 0;
    c10c:	e3a03000 	mov	r3, #0
    rc = -1;
    c110:	e3e00000 	mvn	r0, #0
    *ret_len = 0;
    c114:	e5893000 	str	r3, [r9]
    rc = -1;
    c118:	eaffff8f 	b	bf5c <decode_filter+0x44>
    c11c:	0000b1b0 	.word	0x0000b1b0
    c120:	0000b1cc 	.word	0x0000b1cc
    c124:	0000b1e0 	.word	0x0000b1e0
    c128:	0000b13c 	.word	0x0000b13c
    c12c:	0000b0fc 	.word	0x0000b0fc
    c130:	0000b018 	.word	0x0000b018

0000c134 <decrypt_data>:
{
    c134:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    c138:	e24dd030 	sub	sp, sp, #48	; 0x30
    c13c:	e1a07000 	mov	r7, r0
  *compliance_error = 0;
    c140:	e3a06000 	mov	r6, #0
  printf("decrypt_data\n");
    c144:	e59f033c 	ldr	r0, [pc, #828]	; c488 <decrypt_data+0x354>
{
    c148:	e1a08001 	mov	r8, r1
    c14c:	e59d9050 	ldr	r9, [sp, #80]	; 0x50
    c150:	e1a04002 	mov	r4, r2
  printf("decrypt_data\n");
    c154:	e08f0000 	add	r0, pc, r0
{
    c158:	e1a05003 	mov	r5, r3
  printf("decrypt_data\n");
    c15c:	eb0014a8 	bl	11404 <tfp_printf>
  *compliance_error = 0;
    c160:	e5896000 	str	r6, [r9]
  dfx = xtrycalloc(1, sizeof *dfx);
    c164:	e3a01080 	mov	r1, #128	; 0x80
    c168:	e3a00001 	mov	r0, #1
    c16c:	eb000c25 	bl	f208 <xtrycalloc>
  if (!dfx)
    c170:	e1500006 	cmp	r0, r6
  dfx = xtrycalloc(1, sizeof *dfx);
    c174:	e58d000c 	str	r0, [sp, #12]
  if (!dfx)
    c178:	0a0000c0 	beq	c480 <decrypt_data+0x34c>
  printf("decrypt_data %d\n",dfx->length);
    c17c:	e5901078 	ldr	r1, [r0, #120]	; 0x78
  dfx->refcount = 1;
    c180:	e3a03001 	mov	r3, #1
    c184:	e5803000 	str	r3, [r0]
  printf("decrypt_data %d\n",dfx->length);
    c188:	e59f02fc 	ldr	r0, [pc, #764]	; c48c <decrypt_data+0x358>
    c18c:	e08f0000 	add	r0, pc, r0
    c190:	eb00149b 	bl	11404 <tfp_printf>
  printf(STATUS_DECRYPTION_INFO, "%d %d %d",
    c194:	e59f12f4 	ldr	r1, [pc, #756]	; c490 <decrypt_data+0x35c>
    c198:	e3a00017 	mov	r0, #23
    c19c:	e58d6000 	str	r6, [sp]
    c1a0:	e08f1001 	add	r1, pc, r1
    c1a4:	e5953000 	ldr	r3, [r5]
    c1a8:	e5d4200a 	ldrb	r2, [r4, #10]
    c1ac:	eb001494 	bl	11404 <tfp_printf>
  if (ed->aead_algo)
    c1b0:	e5d4900b 	ldrb	r9, [r4, #11]
    c1b4:	e3590000 	cmp	r9, #0
    c1b8:	1a000059 	bne	c324 <decrypt_data+0x1f0>
    if (ed->len && ed->len < (nprefix + 2))
    c1bc:	e5943000 	ldr	r3, [r4]
    c1c0:	e2433001 	sub	r3, r3, #1
    c1c4:	e3530008 	cmp	r3, #8
    c1c8:	9a000084 	bls	c3e0 <decrypt_data+0x2ac>
    memset(&dfx, 0, sizeof dfx);
    c1cc:	e3a02004 	mov	r2, #4
    c1d0:	e1a01009 	mov	r1, r9
    c1d4:	e28d000c 	add	r0, sp, #12
    c1d8:	eb000b86 	bl	eff8 <memset>
    dfx->cipher_hd = malloc(sizeof(struct gcry_cipher_handle));
    c1dc:	e59d600c 	ldr	r6, [sp, #12]
    c1e0:	e3a00040 	mov	r0, #64	; 0x40
    c1e4:	eb000b1f 	bl	ee68 <malloc>
    if (!dfx->cipher_hd)
    c1e8:	e59d300c 	ldr	r3, [sp, #12]
    dfx->cipher_hd = malloc(sizeof(struct gcry_cipher_handle));
    c1ec:	e5860004 	str	r0, [r6, #4]
    if (!dfx->cipher_hd)
    c1f0:	e5930004 	ldr	r0, [r3, #4]
    c1f4:	e3500000 	cmp	r0, #0
    c1f8:	0a0000a0 	beq	c480 <decrypt_data+0x34c>
    memset(dfx->cipher_hd, 0, sizeof(struct gcry_cipher_handle));
    c1fc:	e3a02040 	mov	r2, #64	; 0x40
    c200:	e1a01009 	mov	r1, r9
    c204:	eb000b7b 	bl	eff8 <memset>
    rc = _gcry_cipher_setkey(dfx->cipher_hd, dek->key, dek->keylen);
    c208:	e59d300c 	ldr	r3, [sp, #12]
    c20c:	e2851009 	add	r1, r5, #9
    c210:	e5952004 	ldr	r2, [r5, #4]
    c214:	e5930004 	ldr	r0, [r3, #4]
    c218:	eb0007b7 	bl	e0fc <_gcry_cipher_setkey>
    if (!ed->buf)
    c21c:	e5943010 	ldr	r3, [r4, #16]
    rc = _gcry_cipher_setkey(dfx->cipher_hd, dek->key, dek->keylen);
    c220:	e1a06000 	mov	r6, r0
    if (!ed->buf)
    c224:	e3530000 	cmp	r3, #0
    c228:	0a000065 	beq	c3c4 <decrypt_data+0x290>
    _gcry_cipher_setiv(dfx->cipher_hd, NULL, 8);
    c22c:	e59d300c 	ldr	r3, [sp, #12]
    c230:	e1a01009 	mov	r1, r9
    c234:	e3a02008 	mov	r2, #8
    c238:	e5930004 	ldr	r0, [r3, #4]
    c23c:	eb0007c2 	bl	e14c <_gcry_cipher_setiv>
    if (ed->len)
    c240:	e5941000 	ldr	r1, [r4]
    c244:	e3510000 	cmp	r1, #0
    c248:	028da00f 	addeq	sl, sp, #15
    c24c:	028d9019 	addeq	r9, sp, #25
    c250:	0a000009 	beq	c27c <decrypt_data+0x148>
    c254:	ea000065 	b	c3f0 <decrypt_data+0x2bc>
          if ((c = iobuf_get(ed->buf)) == -1) {
    c258:	e5821018 	str	r1, [r2, #24]
    c25c:	e5921008 	ldr	r1, [r2, #8]
    c260:	e5920020 	ldr	r0, [r2, #32]
    c264:	e2811001 	add	r1, r1, #1
    c268:	e5821008 	str	r1, [r2, #8]
    c26c:	e7d00003 	ldrb	r0, [r0, r3]
              temp[i] = c;
    c270:	e5ea0001 	strb	r0, [sl, #1]!
      for (i = 0; i < (nprefix + 2); i++) {
    c274:	e15a0009 	cmp	sl, r9
    c278:	0a00000d 	beq	c2b4 <decrypt_data+0x180>
          if ((c = iobuf_get(ed->buf)) == -1) {
    c27c:	e5942010 	ldr	r2, [r4, #16]
    c280:	e5923010 	ldr	r3, [r2, #16]
    c284:	e1a00002 	mov	r0, r2
    c288:	e3530000 	cmp	r3, #0
    c28c:	1a000004 	bne	c2a4 <decrypt_data+0x170>
    c290:	e5923018 	ldr	r3, [r2, #24]
    c294:	e592101c 	ldr	r1, [r2, #28]
    c298:	e1530001 	cmp	r3, r1
    c29c:	e2831001 	add	r1, r3, #1
    c2a0:	3affffec 	bcc	c258 <decrypt_data+0x124>
    c2a4:	ebfff451 	bl	93f0 <iobuf_readbyte>
    c2a8:	e3700001 	cmn	r0, #1
              temp[i] = c;
    c2ac:	e6ef0070 	uxtb	r0, r0
          if ((c = iobuf_get(ed->buf)) == -1) {
    c2b0:	1affffee 	bne	c270 <decrypt_data+0x13c>
    _gcry_cipher_decrypt(dfx->cipher_hd, temp, nprefix + 2, NULL, 0);
    c2b4:	e59d300c 	ldr	r3, [sp, #12]
    c2b8:	e3a0200a 	mov	r2, #10
    c2bc:	e28d1010 	add	r1, sp, #16
    c2c0:	e5930004 	ldr	r0, [r3, #4]
    c2c4:	e3a03000 	mov	r3, #0
    c2c8:	e58d3000 	str	r3, [sp]
    c2cc:	eb0009a1 	bl	e958 <_gcry_cipher_decrypt>
    cipher_sync(dfx->cipher_hd);
    c2d0:	e59d300c 	ldr	r3, [sp, #12]
    c2d4:	e5930004 	ldr	r0, [r3, #4]
    c2d8:	eb0007a6 	bl	e178 <cipher_sync>
    if (dek->symmetric && (p[nprefix - 2] != p[nprefix] || p[nprefix - 1] != p[nprefix + 1]))
    c2dc:	e5d53008 	ldrb	r3, [r5, #8]
    c2e0:	e3130040 	tst	r3, #64	; 0x40
    c2e4:	0a000015 	beq	c340 <decrypt_data+0x20c>
    c2e8:	e5dd2016 	ldrb	r2, [sp, #22]
    c2ec:	e5dd3018 	ldrb	r3, [sp, #24]
    c2f0:	e1520003 	cmp	r2, r3
    c2f4:	1a000003 	bne	c308 <decrypt_data+0x1d4>
    c2f8:	e5dd2017 	ldrb	r2, [sp, #23]
    c2fc:	e5dd3019 	ldrb	r3, [sp, #25]
    c300:	e1520003 	cmp	r2, r3
    c304:	0a00000d 	beq	c340 <decrypt_data+0x20c>
      printf("\n\nBAD KEY!\n\n");
    c308:	e59f0184 	ldr	r0, [pc, #388]	; c494 <decrypt_data+0x360>
      rc = gpg_error(GPG_ERR_BAD_KEY);
    c30c:	e3a06013 	mov	r6, #19
    c310:	e3406200 	movt	r6, #512	; 0x200
      printf("\n\nBAD KEY!\n\n");
    c314:	e08f0000 	add	r0, pc, r0
    c318:	eb001439 	bl	11404 <tfp_printf>
  release_dfx_context(dfx);
    c31c:	e59d000c 	ldr	r0, [sp, #12]
      goto leave;
    c320:	ea000002 	b	c330 <decrypt_data+0x1fc>
  release_dfx_context(dfx);
    c324:	e59d000c 	ldr	r0, [sp, #12]
      rc = gpg_error(GPG_ERR_CIPHER_ALGO);
    c328:	e3a0600c 	mov	r6, #12
    c32c:	e3406200 	movt	r6, #512	; 0x200
  release_dfx_context(dfx);
    c330:	ebfffee5 	bl	becc <release_dfx_context>
}
    c334:	e1a00006 	mov	r0, r6
    c338:	e28dd030 	add	sp, sp, #48	; 0x30
    c33c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
      printf("\n\nGOOD KEY!\n\n");
    c340:	e59f0150 	ldr	r0, [pc, #336]	; c498 <decrypt_data+0x364>
    c344:	e08f0000 	add	r0, pc, r0
    c348:	eb00142d 	bl	11404 <tfp_printf>
  dfx->refcount++;
    c34c:	e59d200c 	ldr	r2, [sp, #12]
  iobuf_push_filter(ed->buf, decode_filter, dfx);
    c350:	e5940010 	ldr	r0, [r4, #16]
  dfx->refcount++;
    c354:	e5923000 	ldr	r3, [r2]
  dfx->partial = !!ed->is_partial;
    c358:	e5d2c050 	ldrb	ip, [r2, #80]	; 0x50
  iobuf_push_filter(ed->buf, decode_filter, dfx);
    c35c:	e59f1138 	ldr	r1, [pc, #312]	; c49c <decrypt_data+0x368>
  dfx->refcount++;
    c360:	e2833001 	add	r3, r3, #1
    c364:	e5823000 	str	r3, [r2]
  dfx->partial = !!ed->is_partial;
    c368:	e5d43009 	ldrb	r3, [r4, #9]
  iobuf_push_filter(ed->buf, decode_filter, dfx);
    c36c:	e08f1001 	add	r1, pc, r1
  dfx->partial = !!ed->is_partial;
    c370:	e2533000 	subs	r3, r3, #0
    c374:	13a03001 	movne	r3, #1
    c378:	e7c0c013 	bfi	ip, r3, #0, #1
    c37c:	e5c2c050 	strb	ip, [r2, #80]	; 0x50
  dfx->length = ed->len;
    c380:	e5943000 	ldr	r3, [r4]
    c384:	e5823078 	str	r3, [r2, #120]	; 0x78
  iobuf_push_filter(ed->buf, decode_filter, dfx);
    c388:	ebfff359 	bl	90f4 <iobuf_push_filter>
  proc_packets(ctrl, procctx, ed->buf);
    c38c:	e5942010 	ldr	r2, [r4, #16]
    c390:	e1a01008 	mov	r1, r8
    c394:	e1a00007 	mov	r0, r7
    c398:	eb001c97 	bl	135fc <proc_packets>
  if (dfx->eof_seen > 1)
    c39c:	e59d000c 	ldr	r0, [sp, #12]
    rc = gpg_error(GPG_ERR_INV_PACKET);
    c3a0:	e3a0200e 	mov	r2, #14
    c3a4:	e3402200 	movt	r2, #512	; 0x200
  ed->buf = NULL;
    c3a8:	e3a01000 	mov	r1, #0
  if (dfx->eof_seen > 1)
    c3ac:	e5d03050 	ldrb	r3, [r0, #80]	; 0x50
  ed->buf = NULL;
    c3b0:	e5841010 	str	r1, [r4, #16]
  if (dfx->eof_seen > 1)
    c3b4:	e7e130d3 	ubfx	r3, r3, #1, #2
    rc = gpg_error(GPG_ERR_INV_PACKET);
    c3b8:	e3530001 	cmp	r3, #1
    c3bc:	81a06002 	movhi	r6, r2
    c3c0:	eaffffda 	b	c330 <decrypt_data+0x1fc>
      printf(("problem handling encrypted packet\n"));
    c3c4:	e59f00d4 	ldr	r0, [pc, #212]	; c4a0 <decrypt_data+0x36c>
      rc = gpg_error(GPG_ERR_INV_PACKET);
    c3c8:	e3a0600e 	mov	r6, #14
    c3cc:	e3406200 	movt	r6, #512	; 0x200
      printf(("problem handling encrypted packet\n"));
    c3d0:	e08f0000 	add	r0, pc, r0
    c3d4:	eb00140a 	bl	11404 <tfp_printf>
  release_dfx_context(dfx);
    c3d8:	e59d000c 	ldr	r0, [sp, #12]
      goto leave;
    c3dc:	eaffffd3 	b	c330 <decrypt_data+0x1fc>
  release_dfx_context(dfx);
    c3e0:	e59d000c 	ldr	r0, [sp, #12]
      rc = gpg_error(GPG_ERR_INV_PACKET);
    c3e4:	e3a0600e 	mov	r6, #14
    c3e8:	e3406200 	movt	r6, #512	; 0x200
    c3ec:	eaffffcf 	b	c330 <decrypt_data+0x1fc>
      printf("ed->len: %d\n", ed->len);
    c3f0:	e59f00ac 	ldr	r0, [pc, #172]	; c4a4 <decrypt_data+0x370>
    c3f4:	e28da00f 	add	sl, sp, #15
    c3f8:	e28d9019 	add	r9, sp, #25
    c3fc:	e08f0000 	add	r0, pc, r0
    c400:	eb0013ff 	bl	11404 <tfp_printf>
      for (i = 0; i < (nprefix + 2) && ed->len; i++, ed->len--)
    c404:	e5942000 	ldr	r2, [r4]
    c408:	ea00000a 	b	c438 <decrypt_data+0x304>
        if ((c = iobuf_get(ed->buf)) == -1)
    c40c:	e5930008 	ldr	r0, [r3, #8]
    c410:	e583c018 	str	ip, [r3, #24]
    c414:	e593c020 	ldr	ip, [r3, #32]
    c418:	e2800001 	add	r0, r0, #1
    c41c:	e5830008 	str	r0, [r3, #8]
    c420:	e7dc0001 	ldrb	r0, [ip, r1]
          temp[i] = c;
    c424:	e5ea0001 	strb	r0, [sl, #1]!
      for (i = 0; i < (nprefix + 2) && ed->len; i++, ed->len--)
    c428:	e2422001 	sub	r2, r2, #1
    c42c:	e159000a 	cmp	r9, sl
    c430:	e5842000 	str	r2, [r4]
    c434:	0affff9e 	beq	c2b4 <decrypt_data+0x180>
    c438:	e3520000 	cmp	r2, #0
    c43c:	0affff9c 	beq	c2b4 <decrypt_data+0x180>
        if ((c = iobuf_get(ed->buf)) == -1)
    c440:	e5943010 	ldr	r3, [r4, #16]
    c444:	e5931010 	ldr	r1, [r3, #16]
    c448:	e1a00003 	mov	r0, r3
    c44c:	e3510000 	cmp	r1, #0
    c450:	1a000004 	bne	c468 <decrypt_data+0x334>
    c454:	e5931018 	ldr	r1, [r3, #24]
    c458:	e593c01c 	ldr	ip, [r3, #28]
    c45c:	e151000c 	cmp	r1, ip
    c460:	e281c001 	add	ip, r1, #1
    c464:	3affffe8 	bcc	c40c <decrypt_data+0x2d8>
    c468:	ebfff3e0 	bl	93f0 <iobuf_readbyte>
    c46c:	e3700001 	cmn	r0, #1
          temp[i] = c;
    c470:	e6ef0070 	uxtb	r0, r0
        if ((c = iobuf_get(ed->buf)) == -1)
    c474:	0affff8e 	beq	c2b4 <decrypt_data+0x180>
      for (i = 0; i < (nprefix + 2) && ed->len; i++, ed->len--)
    c478:	e5942000 	ldr	r2, [r4]
    c47c:	eaffffe8 	b	c424 <decrypt_data+0x2f0>
    return gpg_error_from_syserror();
    c480:	e3e06000 	mvn	r6, #0
    c484:	eaffffaa 	b	c334 <decrypt_data+0x200>
    c488:	0000b05c 	.word	0x0000b05c
    c48c:	0000b034 	.word	0x0000b034
    c490:	0000b034 	.word	0x0000b034
    c494:	0000af00 	.word	0x0000af00
    c498:	0000aee0 	.word	0x0000aee0
    c49c:	fffffba4 	.word	0xfffffba4
    c4a0:	0000ae10 	.word	0x0000ae10
    c4a4:	0000ae08 	.word	0x0000ae08

0000c4a8 <free_symkey_enc>:


void
free_symkey_enc( PKT_symkey_enc *enc )
{
    xfree(enc);
    c4a8:	ea000acf 	b	efec <xfree>

0000c4ac <free_encrypted>:
//   xfree(zd);
// }

void
free_encrypted( PKT_encrypted *ed )
{
    c4ac:	e92d4010 	push	{r4, lr}
  if (!ed)
    c4b0:	e2504000 	subs	r4, r0, #0
    c4b4:	08bd8010 	popeq	{r4, pc}
    return;

  if (ed->buf)
    c4b8:	e5940010 	ldr	r0, [r4, #16]
    c4bc:	e3500000 	cmp	r0, #0
    c4c0:	0a000012 	beq	c510 <free_encrypted+0x64>
    {
      /* We need to skip some bytes. */
      if (ed->is_partial)
    c4c4:	e5d43009 	ldrb	r3, [r4, #9]
    c4c8:	e3530000 	cmp	r3, #0
    c4cc:	1a000013 	bne	c520 <free_encrypted+0x74>
          while (iobuf_read( ed->buf, NULL, 1<<30 ) != -1)
            ;
	}
      else
        {
          while (ed->len)
    c4d0:	e5942000 	ldr	r2, [r4]
    c4d4:	e3520000 	cmp	r2, #0
    c4d8:	1a000006 	bne	c4f8 <free_encrypted+0x4c>
    c4dc:	ea00000b 	b	c510 <free_encrypted+0x64>
              /* Skip the packet. */
              int n = iobuf_read( ed->buf, NULL, ed->len );
              if (n == -1)
                ed->len = 0;
              else
                ed->len -= n;
    c4e0:	e5942000 	ldr	r2, [r4]
    c4e4:	e0422000 	sub	r2, r2, r0
    c4e8:	e5842000 	str	r2, [r4]
          while (ed->len)
    c4ec:	e3520000 	cmp	r2, #0
    c4f0:	0a000006 	beq	c510 <free_encrypted+0x64>
              int n = iobuf_read( ed->buf, NULL, ed->len );
    c4f4:	e5940010 	ldr	r0, [r4, #16]
    c4f8:	e3a01000 	mov	r1, #0
    c4fc:	ebfff474 	bl	96d4 <iobuf_read>
              if (n == -1)
    c500:	e3700001 	cmn	r0, #1
    c504:	1afffff5 	bne	c4e0 <free_encrypted+0x34>
    c508:	e3a03000 	mov	r3, #0
    c50c:	e5843000 	str	r3, [r4]
            }
	}
    }
  xfree (ed);
    c510:	e1a00004 	mov	r0, r4
}
    c514:	e8bd4010 	pop	{r4, lr}
  xfree (ed);
    c518:	ea000ab3 	b	efec <xfree>
          while (iobuf_read( ed->buf, NULL, 1<<30 ) != -1)
    c51c:	e5940010 	ldr	r0, [r4, #16]
    c520:	e3a02101 	mov	r2, #1073741824	; 0x40000000
    c524:	e3a01000 	mov	r1, #0
    c528:	ebfff469 	bl	96d4 <iobuf_read>
    c52c:	e3700001 	cmn	r0, #1
    c530:	1afffff9 	bne	c51c <free_encrypted+0x70>
  xfree (ed);
    c534:	e1a00004 	mov	r0, r4
}
    c538:	e8bd4010 	pop	{r4, lr}
  xfree (ed);
    c53c:	ea000aaa 	b	efec <xfree>

0000c540 <free_plaintext>:


void
free_plaintext( PKT_plaintext *pt )
{
    c540:	e92d4010 	push	{r4, lr}
  if (!pt)
    c544:	e2504000 	subs	r4, r0, #0
    c548:	08bd8010 	popeq	{r4, pc}
    return;

  if (pt->buf)
    c54c:	e5940004 	ldr	r0, [r4, #4]
    c550:	e3500000 	cmp	r0, #0
    c554:	0a000012 	beq	c5a4 <free_plaintext+0x64>
    { /* We need to skip some bytes.  */
      if (pt->is_partial)
    c558:	e5d43009 	ldrb	r3, [r4, #9]
    c55c:	e3530000 	cmp	r3, #0
    c560:	1a000013 	bne	c5b4 <free_plaintext+0x74>
          while (iobuf_read( pt->buf, NULL, 1<<30 ) != -1)
            ;
        }
      else
        {
          while( pt->len )
    c564:	e5942000 	ldr	r2, [r4]
    c568:	e3520000 	cmp	r2, #0
    c56c:	1a000006 	bne	c58c <free_plaintext+0x4c>
    c570:	ea00000b 	b	c5a4 <free_plaintext+0x64>
            { /* Skip the packet.  */
              int n = iobuf_read( pt->buf, NULL, pt->len );
              if (n == -1)
                pt->len = 0;
              else
                pt->len -= n;
    c574:	e5942000 	ldr	r2, [r4]
    c578:	e0422000 	sub	r2, r2, r0
    c57c:	e5842000 	str	r2, [r4]
          while( pt->len )
    c580:	e3520000 	cmp	r2, #0
    c584:	0a000006 	beq	c5a4 <free_plaintext+0x64>
              int n = iobuf_read( pt->buf, NULL, pt->len );
    c588:	e5940004 	ldr	r0, [r4, #4]
    c58c:	e3a01000 	mov	r1, #0
    c590:	ebfff44f 	bl	96d4 <iobuf_read>
              if (n == -1)
    c594:	e3700001 	cmn	r0, #1
    c598:	1afffff5 	bne	c574 <free_plaintext+0x34>
    c59c:	e3a03000 	mov	r3, #0
    c5a0:	e5843000 	str	r3, [r4]
            }
	}
    }
  xfree (pt);
    c5a4:	e1a00004 	mov	r0, r4
}
    c5a8:	e8bd4010 	pop	{r4, lr}
  xfree (pt);
    c5ac:	ea000a8e 	b	efec <xfree>
          while (iobuf_read( pt->buf, NULL, 1<<30 ) != -1)
    c5b0:	e5940004 	ldr	r0, [r4, #4]
    c5b4:	e3a02101 	mov	r2, #1073741824	; 0x40000000
    c5b8:	e3a01000 	mov	r1, #0
    c5bc:	ebfff444 	bl	96d4 <iobuf_read>
    c5c0:	e3700001 	cmn	r0, #1
    c5c4:	1afffff9 	bne	c5b0 <free_plaintext+0x70>
  xfree (pt);
    c5c8:	e1a00004 	mov	r0, r4
}
    c5cc:	e8bd4010 	pop	{r4, lr}
  xfree (pt);
    c5d0:	ea000a85 	b	efec <xfree>

0000c5d4 <free_packet>:
 * Free the packet in PKT.
 */
void
free_packet (PACKET *pkt, parse_packet_ctx_t parsectx)
{
  if (!pkt || !pkt->pkt.generic)
    c5d4:	e3500000 	cmp	r0, #0
{
    c5d8:	e92d4010 	push	{r4, lr}
    c5dc:	e1a04001 	mov	r4, r1
  if (!pkt || !pkt->pkt.generic)
    c5e0:	0a000007 	beq	c604 <free_packet+0x30>
    c5e4:	e5903004 	ldr	r3, [r0, #4]
    c5e8:	e3530000 	cmp	r3, #0
    c5ec:	0a000004 	beq	c604 <free_packet+0x30>
        }
      return;
    }

  //if (DBG_MEMORY)
    printf ("free_packet() type=%d\n", pkt->pkttype);
    c5f0:	e5d01000 	ldrb	r1, [r0]
    c5f4:	e59f0050 	ldr	r0, [pc, #80]	; c64c <free_packet+0x78>
      xfree (pkt->pkt.generic);
      break;
    }

  pkt->pkt.generic = NULL;
}
    c5f8:	e8bd4010 	pop	{r4, lr}
    printf ("free_packet() type=%d\n", pkt->pkttype);
    c5fc:	e08f0000 	add	r0, pc, r0
    c600:	ea00137f 	b	11404 <tfp_printf>
      if (parsectx && parsectx->last_pkt.pkt.generic)
    c604:	e3540000 	cmp	r4, #0
    c608:	08bd8010 	popeq	{r4, pc}
    c60c:	e5943008 	ldr	r3, [r4, #8]
    c610:	e3530000 	cmp	r3, #0
    c614:	08bd8010 	popeq	{r4, pc}
          if (parsectx->free_last_pkt)
    c618:	e594300c 	ldr	r3, [r4, #12]
    c61c:	e3530000 	cmp	r3, #0
    c620:	1a000003 	bne	c634 <free_packet+0x60>
          parsectx->last_pkt.pkttype = 0;
    c624:	e3a03000 	mov	r3, #0
    c628:	e5c43004 	strb	r3, [r4, #4]
          parsectx->last_pkt.pkt.generic = NULL;
    c62c:	e5843008 	str	r3, [r4, #8]
}
    c630:	e8bd8010 	pop	{r4, pc}
              free_packet (&parsectx->last_pkt, NULL);
    c634:	e3a01000 	mov	r1, #0
    c638:	e2840004 	add	r0, r4, #4
    c63c:	ebffffe4 	bl	c5d4 <free_packet>
              parsectx->free_last_pkt = 0;
    c640:	e3a03000 	mov	r3, #0
    c644:	e584300c 	str	r3, [r4, #12]
    c648:	eafffff5 	b	c624 <free_packet+0x50>
    c64c:	0000ac38 	.word	0x0000ac38

0000c650 <run>:
{
    uint8_t s = shift % 32;
    return (x << s) | (x >> (32 - s));
}
static struct Block run(const Key key, struct Block data, int reverse, int debug)
{
    c650:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c654:	e24ddf75 	sub	sp, sp, #468	; 0x1d4
    c658:	e59fcff0 	ldr	ip, [pc, #4080]	; d650 <run+0x1000>
    Key x = {0};
    c65c:	e3a05000 	mov	r5, #0
{
    c660:	e58d0060 	str	r0, [sp, #96]	; 0x60
    c664:	e28d00a0 	add	r0, sp, #160	; 0xa0
    c668:	e08fc00c 	add	ip, pc, ip
    c66c:	e1a04001 	mov	r4, r1
    c670:	e880000c 	stm	r0, {r2, r3}
    c674:	e59d30a4 	ldr	r3, [sp, #164]	; 0xa4
    Key x = {0};
    c678:	e28d00a8 	add	r0, sp, #168	; 0xa8
    c67c:	e58d206c 	str	r2, [sp, #108]	; 0x6c
    memcpy(x, key, sizeof(Key));
    c680:	e3a02010 	mov	r2, #16
    c684:	e58d3070 	str	r3, [sp, #112]	; 0x70
{
    c688:	e58dc064 	str	ip, [sp, #100]	; 0x64
    Key x = {0};
    c68c:	e58d0074 	str	r0, [sp, #116]	; 0x74
    c690:	e58d50a8 	str	r5, [sp, #168]	; 0xa8
    c694:	e5805004 	str	r5, [r0, #4]
    c698:	e5805008 	str	r5, [r0, #8]
    c69c:	e580500c 	str	r5, [r0, #12]
    memcpy(x, key, sizeof(Key));
    c6a0:	eb000a8b 	bl	f0d4 <memcpy>
    Key z = {0};
    
    if(debug) {
    c6a4:	e59d31fc 	ldr	r3, [sp, #508]	; 0x1fc
    Key z = {0};
    c6a8:	e58d50b8 	str	r5, [sp, #184]	; 0xb8
    if(debug) {
    c6ac:	e1530005 	cmp	r3, r5
    Key z = {0};
    c6b0:	e28d30b8 	add	r3, sp, #184	; 0xb8
    c6b4:	e58d50bc 	str	r5, [sp, #188]	; 0xbc
    c6b8:	e58d50c0 	str	r5, [sp, #192]	; 0xc0
    c6bc:	e58d50c4 	str	r5, [sp, #196]	; 0xc4
    c6c0:	e58d3078 	str	r3, [sp, #120]	; 0x78
    if(debug) {
    c6c4:	1a00042c 	bne	d77c <run+0x112c>
        }
        printf("\nInput Block - MSB: %08X LSB: %08X\n", data.msb, data.lsb);
        printf("Reverse mode: %d\n", reverse);
    }

    uint32_t K[32] = {0};
    c6c8:	e59f4f84 	ldr	r4, [pc, #3972]	; d654 <run+0x1004>
    c6cc:	e3a02080 	mov	r2, #128	; 0x80

    for (int i = 0; i < 2; ++i) {
        if(debug) printf("\n-- Key Schedule Round %d --\n", i);
    c6d0:	e59f3f80 	ldr	r3, [pc, #3968]	; d658 <run+0x1008>
    uint32_t K[32] = {0};
    c6d4:	e3a01000 	mov	r1, #0
    c6d8:	e08f4004 	add	r4, pc, r4
    c6dc:	e28d0e15 	add	r0, sp, #336	; 0x150
        if(debug) printf("\n-- Key Schedule Round %d --\n", i);
    c6e0:	e08f3003 	add	r3, pc, r3
    c6e4:	e58d307c 	str	r3, [sp, #124]	; 0x7c
    c6e8:	e58d4080 	str	r4, [sp, #128]	; 0x80
    uint32_t K[32] = {0};
    c6ec:	eb000a41 	bl	eff8 <memset>
    for (int i = 0; i < 2; ++i) {
    c6f0:	e59d2064 	ldr	r2, [sp, #100]	; 0x64
    c6f4:	e59f3f60 	ldr	r3, [pc, #3936]	; d65c <run+0x100c>
    c6f8:	e7929003 	ldr	r9, [r2, r3]
    c6fc:	e59f3f5c 	ldr	r3, [pc, #3932]	; d660 <run+0x1010>
    c700:	e792a003 	ldr	sl, [r2, r3]
    c704:	e59f3f58 	ldr	r3, [pc, #3928]	; d664 <run+0x1014>
    c708:	e7928003 	ldr	r8, [r2, r3]
    c70c:	e59f3f54 	ldr	r3, [pc, #3924]	; d668 <run+0x1018>
    c710:	e792b003 	ldr	fp, [r2, r3]
    uint32_t K[32] = {0};
    c714:	e3a03000 	mov	r3, #0
    c718:	e58d301c 	str	r3, [sp, #28]
    c71c:	e28d2e16 	add	r2, sp, #352	; 0x160
    for (int i = 0; i < 2; ++i) {
    c720:	e58d3038 	str	r3, [sp, #56]	; 0x38
    c724:	e28d30c8 	add	r3, sp, #200	; 0xc8
    c728:	e58d3068 	str	r3, [sp, #104]	; 0x68
    c72c:	e284300f 	add	r3, r4, #15
    c730:	e58d3084 	str	r3, [sp, #132]	; 0x84
    c734:	e1a0300a 	mov	r3, sl
    c738:	e58d2018 	str	r2, [sp, #24]
    c73c:	e1a0a009 	mov	sl, r9
    c740:	e1a09003 	mov	r9, r3
        if(debug) printf("\n-- Key Schedule Round %d --\n", i);
    c744:	e59d31fc 	ldr	r3, [sp, #508]	; 0x1fc
    c748:	e3530000 	cmp	r3, #0
    c74c:	1a000383 	bne	d560 <run+0xf10>
        z[0] = x[0] ^ S5[g(x, 0xD)] ^ S6[g(x, 0xF)] ^ S7[g(x, 0xC)] ^ S8[g(x, 0xE)] ^ S7[g(x, 0x8)];
        z[1] = x[2] ^ S5[g(z, 0x0)] ^ S6[g(z, 0x2)] ^ S7[g(z, 0x1)] ^ S8[g(z, 0x3)] ^ S8[g(x, 0xA)];
        z[2] = x[3] ^ S5[g(z, 0x7)] ^ S6[g(z, 0x6)] ^ S7[g(z, 0x5)] ^ S8[g(z, 0x4)] ^ S5[g(x, 0x9)];
        z[3] = x[1] ^ S5[g(z, 0xA)] ^ S6[g(z, 0x9)] ^ S7[g(z, 0xB)] ^ S8[g(z, 0x8)] ^ S6[g(x, 0xB)];

        if(debug) {
    c750:	e59d21fc 	ldr	r2, [sp, #508]	; 0x1fc
        z[0] = x[0] ^ S5[g(x, 0xD)] ^ S6[g(x, 0xF)] ^ S7[g(x, 0xC)] ^ S8[g(x, 0xE)] ^ S7[g(x, 0x8)];
    c754:	e5dd30b6 	ldrb	r3, [sp, #182]	; 0xb6
    c758:	e59d10a8 	ldr	r1, [sp, #168]	; 0xa8
        if(debug) {
    c75c:	e3520000 	cmp	r2, #0
        z[0] = x[0] ^ S5[g(x, 0xD)] ^ S6[g(x, 0xF)] ^ S7[g(x, 0xC)] ^ S8[g(x, 0xE)] ^ S7[g(x, 0x8)];
    c760:	e5dd20b4 	ldrb	r2, [sp, #180]	; 0xb4
    c764:	e79a3103 	ldr	r3, [sl, r3, lsl #2]
    c768:	e7992102 	ldr	r2, [r9, r2, lsl #2]
    c76c:	e0233002 	eor	r3, r3, r2
    c770:	e5dd20b7 	ldrb	r2, [sp, #183]	; 0xb7
    c774:	e0233001 	eor	r3, r3, r1
    c778:	e7982102 	ldr	r2, [r8, r2, lsl #2]
    c77c:	e0233002 	eor	r3, r3, r2
    c780:	e5dd20b5 	ldrb	r2, [sp, #181]	; 0xb5
    c784:	e79b2102 	ldr	r2, [fp, r2, lsl #2]
    c788:	e0233002 	eor	r3, r3, r2
    c78c:	e5dd20b3 	ldrb	r2, [sp, #179]	; 0xb3
    c790:	e7982102 	ldr	r2, [r8, r2, lsl #2]
    c794:	e0236002 	eor	r6, r3, r2
        z[1] = x[2] ^ S5[g(z, 0x0)] ^ S6[g(z, 0x2)] ^ S7[g(z, 0x1)] ^ S8[g(z, 0x3)] ^ S8[g(x, 0xA)];
    c798:	e5dd30b1 	ldrb	r3, [sp, #177]	; 0xb1
    c79c:	e1a01c26 	lsr	r1, r6, #24
    c7a0:	e59d20b0 	ldr	r2, [sp, #176]	; 0xb0
    c7a4:	e79b3103 	ldr	r3, [fp, r3, lsl #2]
    c7a8:	e7e75456 	ubfx	r5, r6, #8, #8
    c7ac:	e0233002 	eor	r3, r3, r2
    c7b0:	e79a2101 	ldr	r2, [sl, r1, lsl #2]
    c7b4:	e58d1020 	str	r1, [sp, #32]
    c7b8:	e0233002 	eor	r3, r3, r2
    c7bc:	e7992105 	ldr	r2, [r9, r5, lsl #2]
    c7c0:	e7e71856 	ubfx	r1, r6, #16, #8
    c7c4:	e0233002 	eor	r3, r3, r2
    c7c8:	e6ef2076 	uxtb	r2, r6
    c7cc:	e58d1030 	str	r1, [sp, #48]	; 0x30
    c7d0:	e7981101 	ldr	r1, [r8, r1, lsl #2]
    c7d4:	e58d2024 	str	r2, [sp, #36]	; 0x24
    c7d8:	e79b2102 	ldr	r2, [fp, r2, lsl #2]
    c7dc:	e0233001 	eor	r3, r3, r1
    c7e0:	e0232002 	eor	r2, r3, r2
        z[2] = x[3] ^ S5[g(z, 0x7)] ^ S6[g(z, 0x6)] ^ S7[g(z, 0x5)] ^ S8[g(z, 0x4)] ^ S5[g(x, 0x9)];
    c7e4:	e5dd30b2 	ldrb	r3, [sp, #178]	; 0xb2
    c7e8:	e6ef0072 	uxtb	r0, r2
        z[1] = x[2] ^ S5[g(z, 0x0)] ^ S6[g(z, 0x2)] ^ S7[g(z, 0x1)] ^ S8[g(z, 0x3)] ^ S8[g(x, 0xA)];
    c7ec:	e58d1034 	str	r1, [sp, #52]	; 0x34
        z[2] = x[3] ^ S5[g(z, 0x7)] ^ S6[g(z, 0x6)] ^ S7[g(z, 0x5)] ^ S8[g(z, 0x4)] ^ S5[g(x, 0x9)];
    c7f0:	e79a1103 	ldr	r1, [sl, r3, lsl #2]
    c7f4:	e59d30b4 	ldr	r3, [sp, #180]	; 0xb4
    c7f8:	e7e7c452 	ubfx	ip, r2, #8, #8
    c7fc:	e0211003 	eor	r1, r1, r3
    c800:	e79a3100 	ldr	r3, [sl, r0, lsl #2]
        z[1] = x[2] ^ S5[g(z, 0x0)] ^ S6[g(z, 0x2)] ^ S7[g(z, 0x1)] ^ S8[g(z, 0x3)] ^ S8[g(x, 0xA)];
    c804:	e58d203c 	str	r2, [sp, #60]	; 0x3c
        z[2] = x[3] ^ S5[g(z, 0x7)] ^ S6[g(z, 0x6)] ^ S7[g(z, 0x5)] ^ S8[g(z, 0x4)] ^ S5[g(x, 0x9)];
    c808:	e0211003 	eor	r1, r1, r3
    c80c:	e1a03002 	mov	r3, r2
        z[1] = x[2] ^ S5[g(z, 0x0)] ^ S6[g(z, 0x2)] ^ S7[g(z, 0x1)] ^ S8[g(z, 0x3)] ^ S8[g(x, 0xA)];
    c810:	e58d20bc 	str	r2, [sp, #188]	; 0xbc
        z[2] = x[3] ^ S5[g(z, 0x7)] ^ S6[g(z, 0x6)] ^ S7[g(z, 0x5)] ^ S8[g(z, 0x4)] ^ S5[g(x, 0x9)];
    c814:	e7e72852 	ubfx	r2, r2, #16, #8
    c818:	e58d0028 	str	r0, [sp, #40]	; 0x28
    c81c:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
        z[0] = x[0] ^ S5[g(x, 0xD)] ^ S6[g(x, 0xF)] ^ S7[g(x, 0xC)] ^ S8[g(x, 0xE)] ^ S7[g(x, 0x8)];
    c820:	e58d60b8 	str	r6, [sp, #184]	; 0xb8
        z[2] = x[3] ^ S5[g(z, 0x7)] ^ S6[g(z, 0x6)] ^ S7[g(z, 0x5)] ^ S8[g(z, 0x4)] ^ S5[g(x, 0x9)];
    c824:	e58d2044 	str	r2, [sp, #68]	; 0x44
    c828:	e799010c 	ldr	r0, [r9, ip, lsl #2]
    c82c:	e0211000 	eor	r1, r1, r0
    c830:	e58d0040 	str	r0, [sp, #64]	; 0x40
    c834:	e1a00c23 	lsr	r0, r3, #24
    c838:	e7983102 	ldr	r3, [r8, r2, lsl #2]
    c83c:	e79b2100 	ldr	r2, [fp, r0, lsl #2]
    c840:	e0211003 	eor	r1, r1, r3
    c844:	e58d204c 	str	r2, [sp, #76]	; 0x4c
    c848:	e0212002 	eor	r2, r1, r2
    c84c:	e58d0048 	str	r0, [sp, #72]	; 0x48
        z[3] = x[1] ^ S5[g(z, 0xA)] ^ S6[g(z, 0x9)] ^ S7[g(z, 0xB)] ^ S8[g(z, 0x8)] ^ S6[g(x, 0xB)];
    c850:	e7e70452 	ubfx	r0, r2, #8, #8
    c854:	e5dd10b0 	ldrb	r1, [sp, #176]	; 0xb0
    c858:	e79a7100 	ldr	r7, [sl, r0, lsl #2]
    c85c:	e7e70852 	ubfx	r0, r2, #16, #8
    c860:	e7991101 	ldr	r1, [r9, r1, lsl #2]
    c864:	e799c100 	ldr	ip, [r9, r0, lsl #2]
    c868:	e58d0054 	str	r0, [sp, #84]	; 0x54
    c86c:	e59d00ac 	ldr	r0, [sp, #172]	; 0xac
        z[2] = x[3] ^ S5[g(z, 0x7)] ^ S6[g(z, 0x6)] ^ S7[g(z, 0x5)] ^ S8[g(z, 0x4)] ^ S5[g(x, 0x9)];
    c870:	e58d2050 	str	r2, [sp, #80]	; 0x50
        z[3] = x[1] ^ S5[g(z, 0xA)] ^ S6[g(z, 0x9)] ^ S7[g(z, 0xB)] ^ S8[g(z, 0x8)] ^ S6[g(x, 0xB)];
    c874:	e0211000 	eor	r1, r1, r0
    c878:	e1a00002 	mov	r0, r2
        z[2] = x[3] ^ S5[g(z, 0x7)] ^ S6[g(z, 0x6)] ^ S7[g(z, 0x5)] ^ S8[g(z, 0x4)] ^ S5[g(x, 0x9)];
    c87c:	e58d20c0 	str	r2, [sp, #192]	; 0xc0
        z[3] = x[1] ^ S5[g(z, 0xA)] ^ S6[g(z, 0x9)] ^ S7[g(z, 0xB)] ^ S8[g(z, 0x8)] ^ S6[g(x, 0xB)];
    c880:	e6ef2072 	uxtb	r2, r2
    c884:	e0211007 	eor	r1, r1, r7
    c888:	e021100c 	eor	r1, r1, ip
    c88c:	e58dc058 	str	ip, [sp, #88]	; 0x58
    c890:	e1a0cc20 	lsr	ip, r0, #24
    c894:	e7980102 	ldr	r0, [r8, r2, lsl #2]
    c898:	e58dc05c 	str	ip, [sp, #92]	; 0x5c
    c89c:	e0211000 	eor	r1, r1, r0
    c8a0:	e79b010c 	ldr	r0, [fp, ip, lsl #2]
    c8a4:	e0214000 	eor	r4, r1, r0
    c8a8:	e58d40c4 	str	r4, [sp, #196]	; 0xc4
        if(debug) {
    c8ac:	1a0003dc 	bne	d824 <run+0x11d4>
            printf("\n");
        }

        // First set of K values
        K[0 + i * 16] = S5[g(z, 0x8)] ^ S6[g(z, 0x9)] ^ S7[g(z, 0x7)] ^ S8[g(z, 0x6)] ^ S5[g(z, 0x2)];
        K[1 + i * 16] = S5[g(z, 0xA)] ^ S6[g(z, 0xB)] ^ S7[g(z, 0x5)] ^ S8[g(z, 0x4)] ^ S6[g(z, 0x6)];
    c8b0:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
    c8b4:	e59de018 	ldr	lr, [sp, #24]
    c8b8:	e0211003 	eor	r1, r1, r3
        K[0 + i * 16] = S5[g(z, 0x8)] ^ S6[g(z, 0x9)] ^ S7[g(z, 0x7)] ^ S8[g(z, 0x6)] ^ S5[g(z, 0x2)];
    c8bc:	e59d005c 	ldr	r0, [sp, #92]	; 0x5c
        K[1 + i * 16] = S5[g(z, 0xA)] ^ S6[g(z, 0xB)] ^ S7[g(z, 0x5)] ^ S8[g(z, 0x4)] ^ S6[g(z, 0x6)];
    c8c0:	e1a03001 	mov	r3, r1
    c8c4:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
        K[0 + i * 16] = S5[g(z, 0x8)] ^ S6[g(z, 0x9)] ^ S7[g(z, 0x7)] ^ S8[g(z, 0x6)] ^ S5[g(z, 0x2)];
    c8c8:	e79a0100 	ldr	r0, [sl, r0, lsl #2]
        K[1 + i * 16] = S5[g(z, 0xA)] ^ S6[g(z, 0xB)] ^ S7[g(z, 0x5)] ^ S8[g(z, 0x4)] ^ S6[g(z, 0x6)];
    c8cc:	e0233001 	eor	r3, r3, r1
    c8d0:	e0277003 	eor	r7, r7, r3
        K[0 + i * 16] = S5[g(z, 0x8)] ^ S6[g(z, 0x9)] ^ S7[g(z, 0x7)] ^ S8[g(z, 0x6)] ^ S5[g(z, 0x2)];
    c8d4:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
        K[2 + i * 16] = S5[g(z, 0xC)] ^ S6[g(z, 0xD)] ^ S7[g(z, 0x3)] ^ S8[g(z, 0x2)] ^ S7[g(z, 0x9)];
    c8d8:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
        K[0 + i * 16] = S5[g(z, 0x8)] ^ S6[g(z, 0x9)] ^ S7[g(z, 0x7)] ^ S8[g(z, 0x6)] ^ S5[g(z, 0x2)];
    c8dc:	e79b3103 	ldr	r3, [fp, r3, lsl #2]
        K[2 + i * 16] = S5[g(z, 0xC)] ^ S6[g(z, 0xD)] ^ S7[g(z, 0x3)] ^ S8[g(z, 0x2)] ^ S7[g(z, 0x9)];
    c8e0:	e7981101 	ldr	r1, [r8, r1, lsl #2]
        K[0 + i * 16] = S5[g(z, 0x8)] ^ S6[g(z, 0x9)] ^ S7[g(z, 0x7)] ^ S8[g(z, 0x6)] ^ S5[g(z, 0x2)];
    c8e4:	e58d302c 	str	r3, [sp, #44]	; 0x2c
        K[1 + i * 16] = S5[g(z, 0xA)] ^ S6[g(z, 0xB)] ^ S7[g(z, 0x5)] ^ S8[g(z, 0x4)] ^ S6[g(z, 0x6)];
    c8e8:	e7993102 	ldr	r3, [r9, r2, lsl #2]
        K[3 + i * 16] = S5[g(z, 0xE)] ^ S6[g(z, 0xF)] ^ S7[g(z, 0x1)] ^ S8[g(z, 0x0)] ^ S8[g(z, 0xC)];

        if(debug) {
    c8ec:	e59d21fc 	ldr	r2, [sp, #508]	; 0x1fc
        K[1 + i * 16] = S5[g(z, 0xA)] ^ S6[g(z, 0xB)] ^ S7[g(z, 0x5)] ^ S8[g(z, 0x4)] ^ S6[g(z, 0x6)];
    c8f0:	e0277003 	eor	r7, r7, r3
        K[3 + i * 16] = S5[g(z, 0xE)] ^ S6[g(z, 0xF)] ^ S7[g(z, 0x1)] ^ S8[g(z, 0x0)] ^ S8[g(z, 0xC)];
    c8f4:	e7e73454 	ubfx	r3, r4, #8, #8
        if(debug) {
    c8f8:	e3520000 	cmp	r2, #0
        K[1 + i * 16] = S5[g(z, 0xA)] ^ S6[g(z, 0xB)] ^ S7[g(z, 0x5)] ^ S8[g(z, 0x4)] ^ S6[g(z, 0x6)];
    c8fc:	e50e700c 	str	r7, [lr, #-12]
        K[3 + i * 16] = S5[g(z, 0xE)] ^ S6[g(z, 0xF)] ^ S7[g(z, 0x1)] ^ S8[g(z, 0x0)] ^ S8[g(z, 0xC)];
    c900:	e79ac103 	ldr	ip, [sl, r3, lsl #2]
        K[0 + i * 16] = S5[g(z, 0x8)] ^ S6[g(z, 0x9)] ^ S7[g(z, 0x7)] ^ S8[g(z, 0x6)] ^ S5[g(z, 0x2)];
    c904:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    c908:	e59d702c 	ldr	r7, [sp, #44]	; 0x2c
    c90c:	e7983103 	ldr	r3, [r8, r3, lsl #2]
    c910:	e79ae105 	ldr	lr, [sl, r5, lsl #2]
    c914:	e0233007 	eor	r3, r3, r7
        K[2 + i * 16] = S5[g(z, 0xC)] ^ S6[g(z, 0xD)] ^ S7[g(z, 0x3)] ^ S8[g(z, 0x2)] ^ S7[g(z, 0x9)];
    c918:	e79b7105 	ldr	r7, [fp, r5, lsl #2]
        K[0 + i * 16] = S5[g(z, 0x8)] ^ S6[g(z, 0x9)] ^ S7[g(z, 0x7)] ^ S8[g(z, 0x6)] ^ S5[g(z, 0x2)];
    c91c:	e59d5058 	ldr	r5, [sp, #88]	; 0x58
    c920:	e023300e 	eor	r3, r3, lr
    c924:	e0233005 	eor	r3, r3, r5
    c928:	e59de018 	ldr	lr, [sp, #24]
    c92c:	e0233000 	eor	r3, r3, r0
    c930:	e50e3010 	str	r3, [lr, #-16]
        K[2 + i * 16] = S5[g(z, 0xC)] ^ S6[g(z, 0xD)] ^ S7[g(z, 0x3)] ^ S8[g(z, 0x2)] ^ S7[g(z, 0x9)];
    c934:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
        K[3 + i * 16] = S5[g(z, 0xE)] ^ S6[g(z, 0xF)] ^ S7[g(z, 0x1)] ^ S8[g(z, 0x0)] ^ S8[g(z, 0xC)];
    c938:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
        K[2 + i * 16] = S5[g(z, 0xC)] ^ S6[g(z, 0xD)] ^ S7[g(z, 0x3)] ^ S8[g(z, 0x2)] ^ S7[g(z, 0x9)];
    c93c:	e7983103 	ldr	r3, [r8, r3, lsl #2]
    c940:	e1a02c24 	lsr	r2, r4, #24
    c944:	e0233007 	eor	r3, r3, r7
    c948:	e0211003 	eor	r1, r1, r3
        K[3 + i * 16] = S5[g(z, 0xE)] ^ S6[g(z, 0xF)] ^ S7[g(z, 0x1)] ^ S8[g(z, 0x0)] ^ S8[g(z, 0xC)];
    c94c:	e59d3020 	ldr	r3, [sp, #32]
        K[2 + i * 16] = S5[g(z, 0xC)] ^ S6[g(z, 0xD)] ^ S7[g(z, 0x3)] ^ S8[g(z, 0x2)] ^ S7[g(z, 0x9)];
    c950:	e58d7040 	str	r7, [sp, #64]	; 0x40
        K[3 + i * 16] = S5[g(z, 0xE)] ^ S6[g(z, 0xF)] ^ S7[g(z, 0x1)] ^ S8[g(z, 0x0)] ^ S8[g(z, 0xC)];
    c954:	e79b3103 	ldr	r3, [fp, r3, lsl #2]
    c958:	e0200003 	eor	r0, r0, r3
    c95c:	e6ef3074 	uxtb	r3, r4
    c960:	e02cc000 	eor	ip, ip, r0
    c964:	e7993103 	ldr	r3, [r9, r3, lsl #2]
        K[2 + i * 16] = S5[g(z, 0xC)] ^ S6[g(z, 0xD)] ^ S7[g(z, 0x3)] ^ S8[g(z, 0x2)] ^ S7[g(z, 0x9)];
    c968:	e79a0102 	ldr	r0, [sl, r2, lsl #2]
        K[3 + i * 16] = S5[g(z, 0xE)] ^ S6[g(z, 0xF)] ^ S7[g(z, 0x1)] ^ S8[g(z, 0x0)] ^ S8[g(z, 0xC)];
    c96c:	e02cc003 	eor	ip, ip, r3
        K[2 + i * 16] = S5[g(z, 0xC)] ^ S6[g(z, 0xD)] ^ S7[g(z, 0x3)] ^ S8[g(z, 0x2)] ^ S7[g(z, 0x9)];
    c970:	e7e73854 	ubfx	r3, r4, #16, #8
    c974:	e0211000 	eor	r1, r1, r0
    c978:	e7993103 	ldr	r3, [r9, r3, lsl #2]
    c97c:	e0211003 	eor	r1, r1, r3
    c980:	e50e1008 	str	r1, [lr, #-8]
        K[3 + i * 16] = S5[g(z, 0xE)] ^ S6[g(z, 0xF)] ^ S7[g(z, 0x1)] ^ S8[g(z, 0x0)] ^ S8[g(z, 0xC)];
    c984:	e79b3102 	ldr	r3, [fp, r2, lsl #2]
    c988:	e02cc003 	eor	ip, ip, r3
    c98c:	e59d301c 	ldr	r3, [sp, #28]
    c990:	e50ec004 	str	ip, [lr, #-4]
        if(debug) {
    c994:	e2832003 	add	r2, r3, #3
    c998:	1a0003e3 	bne	d92c <run+0x12dc>
            for(int j = 0x0; j <= 0x7; j++) printf("%02X ", g(z, j));
            printf("\n");
        }

        x[0] = z[2] ^ S5[g(z, 0x5)] ^ S6[g(z, 0x7)] ^ S7[g(z, 0x4)] ^ S8[g(z, 0x6)] ^ S7[g(z, 0x0)];
        x[1] = z[0] ^ S5[g(x, 0x0)] ^ S6[g(x, 0x2)] ^ S7[g(x, 0x1)] ^ S8[g(x, 0x3)] ^ S8[g(z, 0x2)];
    c99c:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
        x[0] = z[2] ^ S5[g(z, 0x5)] ^ S6[g(z, 0x7)] ^ S7[g(z, 0x4)] ^ S8[g(z, 0x6)] ^ S7[g(z, 0x0)];
    c9a0:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
        x[1] = z[0] ^ S5[g(x, 0x0)] ^ S6[g(x, 0x2)] ^ S7[g(x, 0x1)] ^ S8[g(x, 0x3)] ^ S8[g(z, 0x2)];
    c9a4:	e0266003 	eor	r6, r6, r3
        x[0] = z[2] ^ S5[g(z, 0x5)] ^ S6[g(z, 0x7)] ^ S7[g(z, 0x4)] ^ S8[g(z, 0x6)] ^ S7[g(z, 0x0)];
    c9a8:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
    c9ac:	e79a3103 	ldr	r3, [sl, r3, lsl #2]
    c9b0:	e0222003 	eor	r2, r2, r3
    c9b4:	e1a03002 	mov	r3, r2
    c9b8:	e59d2020 	ldr	r2, [sp, #32]
    c9bc:	e7982102 	ldr	r2, [r8, r2, lsl #2]
    c9c0:	e0233002 	eor	r3, r3, r2
    c9c4:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
    c9c8:	e7992102 	ldr	r2, [r9, r2, lsl #2]
    c9cc:	e0233002 	eor	r3, r3, r2
    c9d0:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
    c9d4:	e7982102 	ldr	r2, [r8, r2, lsl #2]
    c9d8:	e0233002 	eor	r3, r3, r2
    c9dc:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
    c9e0:	e0233002 	eor	r3, r3, r2
        x[2] = z[1] ^ S5[g(x, 0x7)] ^ S6[g(x, 0x6)] ^ S7[g(x, 0x5)] ^ S8[g(x, 0x4)] ^ S5[g(z, 0x1)];
    c9e4:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
        x[1] = z[0] ^ S5[g(x, 0x0)] ^ S6[g(x, 0x2)] ^ S7[g(x, 0x1)] ^ S8[g(x, 0x3)] ^ S8[g(z, 0x2)];
    c9e8:	e1a00c23 	lsr	r0, r3, #24
        x[2] = z[1] ^ S5[g(x, 0x7)] ^ S6[g(x, 0x6)] ^ S7[g(x, 0x5)] ^ S8[g(x, 0x4)] ^ S5[g(z, 0x1)];
    c9ec:	e79ae102 	ldr	lr, [sl, r2, lsl #2]
    c9f0:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
        x[1] = z[0] ^ S5[g(x, 0x0)] ^ S6[g(x, 0x2)] ^ S7[g(x, 0x1)] ^ S8[g(x, 0x3)] ^ S8[g(z, 0x2)];
    c9f4:	e7e7c853 	ubfx	ip, r3, #16, #8
        x[2] = z[1] ^ S5[g(x, 0x7)] ^ S6[g(x, 0x6)] ^ S7[g(x, 0x5)] ^ S8[g(x, 0x4)] ^ S5[g(z, 0x1)];
    c9f8:	e022200e 	eor	r2, r2, lr
        x[0] = z[2] ^ S5[g(z, 0x5)] ^ S6[g(z, 0x7)] ^ S7[g(z, 0x4)] ^ S8[g(z, 0x6)] ^ S7[g(z, 0x0)];
    c9fc:	e58d30a8 	str	r3, [sp, #168]	; 0xa8
        x[2] = z[1] ^ S5[g(x, 0x7)] ^ S6[g(x, 0x6)] ^ S7[g(x, 0x5)] ^ S8[g(x, 0x4)] ^ S5[g(z, 0x1)];
    ca00:	e1a0e002 	mov	lr, r2
        x[3] = z[3] ^ S5[g(x, 0xA)] ^ S6[g(x, 0x9)] ^ S7[g(x, 0xB)] ^ S8[g(x, 0x8)] ^ S6[g(z, 0x3)];
    ca04:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
    ca08:	e7991102 	ldr	r1, [r9, r2, lsl #2]

        if(debug) {
    ca0c:	e59d21fc 	ldr	r2, [sp, #508]	; 0x1fc
        x[3] = z[3] ^ S5[g(x, 0xA)] ^ S6[g(x, 0x9)] ^ S7[g(x, 0xB)] ^ S8[g(x, 0x8)] ^ S6[g(z, 0x3)];
    ca10:	e0247001 	eor	r7, r4, r1
        if(debug) {
    ca14:	e3520000 	cmp	r2, #0
        x[1] = z[0] ^ S5[g(x, 0x0)] ^ S6[g(x, 0x2)] ^ S7[g(x, 0x1)] ^ S8[g(x, 0x3)] ^ S8[g(z, 0x2)];
    ca18:	e7e72453 	ubfx	r2, r3, #8, #8
    ca1c:	e6ef3073 	uxtb	r3, r3
    ca20:	e7991102 	ldr	r1, [r9, r2, lsl #2]
    ca24:	e79a2100 	ldr	r2, [sl, r0, lsl #2]
    ca28:	e79b3103 	ldr	r3, [fp, r3, lsl #2]
    ca2c:	e0266002 	eor	r6, r6, r2
    ca30:	e798210c 	ldr	r2, [r8, ip, lsl #2]
    ca34:	e0266001 	eor	r6, r6, r1
    ca38:	e0222006 	eor	r2, r2, r6
    ca3c:	e0222003 	eor	r2, r2, r3
        x[2] = z[1] ^ S5[g(x, 0x7)] ^ S6[g(x, 0x6)] ^ S7[g(x, 0x5)] ^ S8[g(x, 0x4)] ^ S5[g(z, 0x1)];
    ca40:	e7e75852 	ubfx	r5, r2, #16, #8
    ca44:	e6ef3072 	uxtb	r3, r2
        x[1] = z[0] ^ S5[g(x, 0x0)] ^ S6[g(x, 0x2)] ^ S7[g(x, 0x1)] ^ S8[g(x, 0x3)] ^ S8[g(z, 0x2)];
    ca48:	e58d20ac 	str	r2, [sp, #172]	; 0xac
        x[2] = z[1] ^ S5[g(x, 0x7)] ^ S6[g(x, 0x6)] ^ S7[g(x, 0x5)] ^ S8[g(x, 0x4)] ^ S5[g(z, 0x1)];
    ca4c:	e79a3103 	ldr	r3, [sl, r3, lsl #2]
        x[1] = z[0] ^ S5[g(x, 0x0)] ^ S6[g(x, 0x2)] ^ S7[g(x, 0x1)] ^ S8[g(x, 0x3)] ^ S8[g(z, 0x2)];
    ca50:	e58d1024 	str	r1, [sp, #36]	; 0x24
        x[2] = z[1] ^ S5[g(x, 0x7)] ^ S6[g(x, 0x6)] ^ S7[g(x, 0x5)] ^ S8[g(x, 0x4)] ^ S5[g(z, 0x1)];
    ca54:	e02ee003 	eor	lr, lr, r3
    ca58:	e7e73452 	ubfx	r3, r2, #8, #8
    ca5c:	e1a02c22 	lsr	r2, r2, #24
    ca60:	e7993103 	ldr	r3, [r9, r3, lsl #2]
    ca64:	e79b1102 	ldr	r1, [fp, r2, lsl #2]
    ca68:	e02ee003 	eor	lr, lr, r3
    ca6c:	e58d3028 	str	r3, [sp, #40]	; 0x28
    ca70:	e7983105 	ldr	r3, [r8, r5, lsl #2]
    ca74:	e023300e 	eor	r3, r3, lr
    ca78:	e0233001 	eor	r3, r3, r1
        x[3] = z[3] ^ S5[g(x, 0xA)] ^ S6[g(x, 0x9)] ^ S7[g(x, 0xB)] ^ S8[g(x, 0x8)] ^ S6[g(z, 0x3)];
    ca7c:	e7e74453 	ubfx	r4, r3, #8, #8
    ca80:	e6ef1073 	uxtb	r1, r3
    ca84:	e7e7e853 	ubfx	lr, r3, #16, #8
    ca88:	e7986101 	ldr	r6, [r8, r1, lsl #2]
    ca8c:	e79a1104 	ldr	r1, [sl, r4, lsl #2]
        x[2] = z[1] ^ S5[g(x, 0x7)] ^ S6[g(x, 0x6)] ^ S7[g(x, 0x5)] ^ S8[g(x, 0x4)] ^ S5[g(z, 0x1)];
    ca90:	e58d30b0 	str	r3, [sp, #176]	; 0xb0
        x[3] = z[3] ^ S5[g(x, 0xA)] ^ S6[g(x, 0x9)] ^ S7[g(x, 0xB)] ^ S8[g(x, 0x8)] ^ S6[g(z, 0x3)];
    ca94:	e0211007 	eor	r1, r1, r7
    ca98:	e799710e 	ldr	r7, [r9, lr, lsl #2]
    ca9c:	e1a03c23 	lsr	r3, r3, #24
    caa0:	e0211007 	eor	r1, r1, r7
    caa4:	e0266001 	eor	r6, r6, r1
    caa8:	e79b1103 	ldr	r1, [fp, r3, lsl #2]
    caac:	e0266001 	eor	r6, r6, r1
    cab0:	e58d60b4 	str	r6, [sp, #180]	; 0xb4
        if(debug) {
    cab4:	1a00037f 	bne	d8b8 <run+0x1268>
            for(int j = 0; j < 4; j++) printf("%08X ", x[j]);
            printf("\n");
        }

        K[4 + i * 16] = S5[g(x, 0x3)] ^ S6[g(x, 0x2)] ^ S7[g(x, 0xC)] ^ S8[g(x, 0xD)] ^ S5[g(x, 0x8)];
        K[5 + i * 16] = S5[g(x, 0x1)] ^ S6[g(x, 0x0)] ^ S7[g(x, 0xE)] ^ S8[g(x, 0xF)] ^ S6[g(x, 0xD)];
    cab8:	e7990100 	ldr	r0, [r9, r0, lsl #2]
    cabc:	e79ac10c 	ldr	ip, [sl, ip, lsl #2]
    cac0:	e58d003c 	str	r0, [sp, #60]	; 0x3c
        K[4 + i * 16] = S5[g(x, 0x3)] ^ S6[g(x, 0x2)] ^ S7[g(x, 0xC)] ^ S8[g(x, 0xD)] ^ S5[g(x, 0x8)];
    cac4:	e5dd00b7 	ldrb	r0, [sp, #183]	; 0xb7
        K[6 + i * 16] = S5[g(x, 0x7)] ^ S6[g(x, 0x6)] ^ S7[g(x, 0x8)] ^ S8[g(x, 0x9)] ^ S7[g(x, 0x3)];
        K[7 + i * 16] = S5[g(x, 0x5)] ^ S6[g(x, 0x4)] ^ S7[g(x, 0xA)] ^ S8[g(x, 0xB)] ^ S8[g(x, 0x7)];
    cac8:	e79a1105 	ldr	r1, [sl, r5, lsl #2]
        K[5 + i * 16] = S5[g(x, 0x1)] ^ S6[g(x, 0x0)] ^ S7[g(x, 0xE)] ^ S8[g(x, 0xF)] ^ S6[g(x, 0xD)];
    cacc:	e58dc034 	str	ip, [sp, #52]	; 0x34
        K[4 + i * 16] = S5[g(x, 0x3)] ^ S6[g(x, 0x2)] ^ S7[g(x, 0xC)] ^ S8[g(x, 0xD)] ^ S5[g(x, 0x8)];
    cad0:	e798c100 	ldr	ip, [r8, r0, lsl #2]
        K[5 + i * 16] = S5[g(x, 0x1)] ^ S6[g(x, 0x0)] ^ S7[g(x, 0xE)] ^ S8[g(x, 0xF)] ^ S6[g(x, 0xD)];
    cad4:	e5dd00b4 	ldrb	r0, [sp, #180]	; 0xb4
        K[7 + i * 16] = S5[g(x, 0x5)] ^ S6[g(x, 0x4)] ^ S7[g(x, 0xA)] ^ S8[g(x, 0xB)] ^ S8[g(x, 0x7)];
    cad8:	e58d1040 	str	r1, [sp, #64]	; 0x40
        K[5 + i * 16] = S5[g(x, 0x1)] ^ S6[g(x, 0x0)] ^ S7[g(x, 0xE)] ^ S8[g(x, 0xF)] ^ S6[g(x, 0xD)];
    cadc:	e58d0030 	str	r0, [sp, #48]	; 0x30
    cae0:	e1a06000 	mov	r6, r0
        K[4 + i * 16] = S5[g(x, 0x3)] ^ S6[g(x, 0x2)] ^ S7[g(x, 0xC)] ^ S8[g(x, 0xD)] ^ S5[g(x, 0x8)];
    cae4:	e5dd10a8 	ldrb	r1, [sp, #168]	; 0xa8
        K[7 + i * 16] = S5[g(x, 0x5)] ^ S6[g(x, 0x4)] ^ S7[g(x, 0xA)] ^ S8[g(x, 0xB)] ^ S8[g(x, 0x7)];
    cae8:	e5dd00b0 	ldrb	r0, [sp, #176]	; 0xb0
    caec:	e7992102 	ldr	r2, [r9, r2, lsl #2]
    caf0:	e58d0020 	str	r0, [sp, #32]
        K[5 + i * 16] = S5[g(x, 0x1)] ^ S6[g(x, 0x0)] ^ S7[g(x, 0xE)] ^ S8[g(x, 0xF)] ^ S6[g(x, 0xD)];
    caf4:	e5dd70b5 	ldrb	r7, [sp, #181]	; 0xb5
        K[4 + i * 16] = S5[g(x, 0x3)] ^ S6[g(x, 0x2)] ^ S7[g(x, 0xC)] ^ S8[g(x, 0xD)] ^ S5[g(x, 0x8)];
    caf8:	e79a0101 	ldr	r0, [sl, r1, lsl #2]
        K[5 + i * 16] = S5[g(x, 0x1)] ^ S6[g(x, 0x0)] ^ S7[g(x, 0xE)] ^ S8[g(x, 0xF)] ^ S6[g(x, 0xD)];
    cafc:	e79b6106 	ldr	r6, [fp, r6, lsl #2]
        K[7 + i * 16] = S5[g(x, 0x5)] ^ S6[g(x, 0x4)] ^ S7[g(x, 0xA)] ^ S8[g(x, 0xB)] ^ S8[g(x, 0x7)];
    cb00:	e58d2044 	str	r2, [sp, #68]	; 0x44
        K[4 + i * 16] = S5[g(x, 0x3)] ^ S6[g(x, 0x2)] ^ S7[g(x, 0xC)] ^ S8[g(x, 0xD)] ^ S5[g(x, 0x8)];
    cb04:	e020000c 	eor	r0, r0, ip
        K[6 + i * 16] = S5[g(x, 0x7)] ^ S6[g(x, 0x6)] ^ S7[g(x, 0x8)] ^ S8[g(x, 0x9)] ^ S7[g(x, 0x3)];
    cb08:	e5dd20ac 	ldrb	r2, [sp, #172]	; 0xac
        K[4 + i * 16] = S5[g(x, 0x3)] ^ S6[g(x, 0x2)] ^ S7[g(x, 0xC)] ^ S8[g(x, 0xD)] ^ S5[g(x, 0x8)];
    cb0c:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
        K[5 + i * 16] = S5[g(x, 0x1)] ^ S6[g(x, 0x0)] ^ S7[g(x, 0xE)] ^ S8[g(x, 0xF)] ^ S6[g(x, 0xD)];
    cb10:	e798c107 	ldr	ip, [r8, r7, lsl #2]
        K[6 + i * 16] = S5[g(x, 0x7)] ^ S6[g(x, 0x6)] ^ S7[g(x, 0x8)] ^ S8[g(x, 0x9)] ^ S7[g(x, 0x3)];
    cb14:	e7981101 	ldr	r1, [r8, r1, lsl #2]
        K[5 + i * 16] = S5[g(x, 0x1)] ^ S6[g(x, 0x0)] ^ S7[g(x, 0xE)] ^ S8[g(x, 0xF)] ^ S6[g(x, 0xD)];
    cb18:	e02cc006 	eor	ip, ip, r6
        K[6 + i * 16] = S5[g(x, 0x7)] ^ S6[g(x, 0x6)] ^ S7[g(x, 0x8)] ^ S8[g(x, 0x9)] ^ S7[g(x, 0x3)];
    cb1c:	e79a6102 	ldr	r6, [sl, r2, lsl #2]
        K[7 + i * 16] = S5[g(x, 0x5)] ^ S6[g(x, 0x4)] ^ S7[g(x, 0xA)] ^ S8[g(x, 0xB)] ^ S8[g(x, 0x7)];
    cb20:	e79b2102 	ldr	r2, [fp, r2, lsl #2]
        K[6 + i * 16] = S5[g(x, 0x7)] ^ S6[g(x, 0x6)] ^ S7[g(x, 0x8)] ^ S8[g(x, 0x9)] ^ S7[g(x, 0x3)];
    cb24:	e0211006 	eor	r1, r1, r6
    cb28:	e59d6028 	ldr	r6, [sp, #40]	; 0x28

        if(debug) {
    cb2c:	e59d51fc 	ldr	r5, [sp, #508]	; 0x1fc
        K[6 + i * 16] = S5[g(x, 0x7)] ^ S6[g(x, 0x6)] ^ S7[g(x, 0x8)] ^ S8[g(x, 0x9)] ^ S7[g(x, 0x3)];
    cb30:	e0211006 	eor	r1, r1, r6
        K[7 + i * 16] = S5[g(x, 0x5)] ^ S6[g(x, 0x4)] ^ S7[g(x, 0xA)] ^ S8[g(x, 0xB)] ^ S8[g(x, 0x7)];
    cb34:	e59d6020 	ldr	r6, [sp, #32]
        if(debug) {
    cb38:	e3550000 	cmp	r5, #0
        K[4 + i * 16] = S5[g(x, 0x3)] ^ S6[g(x, 0x2)] ^ S7[g(x, 0xC)] ^ S8[g(x, 0xD)] ^ S5[g(x, 0x8)];
    cb3c:	e5dd50b6 	ldrb	r5, [sp, #182]	; 0xb6
        K[7 + i * 16] = S5[g(x, 0x5)] ^ S6[g(x, 0x4)] ^ S7[g(x, 0xA)] ^ S8[g(x, 0xB)] ^ S8[g(x, 0x7)];
    cb40:	e79b6106 	ldr	r6, [fp, r6, lsl #2]
    cb44:	e0222006 	eor	r2, r2, r6
    cb48:	e59d6040 	ldr	r6, [sp, #64]	; 0x40
    cb4c:	e0222006 	eor	r2, r2, r6
    cb50:	e59d6044 	ldr	r6, [sp, #68]	; 0x44
    cb54:	e0226006 	eor	r6, r2, r6
        K[4 + i * 16] = S5[g(x, 0x3)] ^ S6[g(x, 0x2)] ^ S7[g(x, 0xC)] ^ S8[g(x, 0xD)] ^ S5[g(x, 0x8)];
    cb58:	e79b2105 	ldr	r2, [fp, r5, lsl #2]
    cb5c:	e0200002 	eor	r0, r0, r2
    cb60:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
    cb64:	e0200002 	eor	r0, r0, r2
        K[5 + i * 16] = S5[g(x, 0x1)] ^ S6[g(x, 0x0)] ^ S7[g(x, 0xE)] ^ S8[g(x, 0xF)] ^ S6[g(x, 0xD)];
    cb68:	e7992105 	ldr	r2, [r9, r5, lsl #2]
    cb6c:	e022200c 	eor	r2, r2, ip
    cb70:	e59dc034 	ldr	ip, [sp, #52]	; 0x34
    cb74:	e022200c 	eor	r2, r2, ip
    cb78:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
    cb7c:	e022200c 	eor	r2, r2, ip
    cb80:	e59dc018 	ldr	ip, [sp, #24]
    cb84:	e58c2004 	str	r2, [ip, #4]
        K[6 + i * 16] = S5[g(x, 0x7)] ^ S6[g(x, 0x6)] ^ S7[g(x, 0x8)] ^ S8[g(x, 0x9)] ^ S7[g(x, 0x3)];
    cb88:	e798c103 	ldr	ip, [r8, r3, lsl #2]
        K[4 + i * 16] = S5[g(x, 0x3)] ^ S6[g(x, 0x2)] ^ S7[g(x, 0xC)] ^ S8[g(x, 0xD)] ^ S5[g(x, 0x8)];
    cb8c:	e79a3103 	ldr	r3, [sl, r3, lsl #2]
        K[6 + i * 16] = S5[g(x, 0x7)] ^ S6[g(x, 0x6)] ^ S7[g(x, 0x8)] ^ S8[g(x, 0x9)] ^ S7[g(x, 0x3)];
    cb90:	e021100c 	eor	r1, r1, ip
        K[4 + i * 16] = S5[g(x, 0x3)] ^ S6[g(x, 0x2)] ^ S7[g(x, 0xC)] ^ S8[g(x, 0xD)] ^ S5[g(x, 0x8)];
    cb94:	e0200003 	eor	r0, r0, r3
        K[6 + i * 16] = S5[g(x, 0x7)] ^ S6[g(x, 0x6)] ^ S7[g(x, 0x8)] ^ S8[g(x, 0x9)] ^ S7[g(x, 0x3)];
    cb98:	e79b310e 	ldr	r3, [fp, lr, lsl #2]
        K[4 + i * 16] = S5[g(x, 0x3)] ^ S6[g(x, 0x2)] ^ S7[g(x, 0xC)] ^ S8[g(x, 0xD)] ^ S5[g(x, 0x8)];
    cb9c:	e59d2018 	ldr	r2, [sp, #24]
        K[6 + i * 16] = S5[g(x, 0x7)] ^ S6[g(x, 0x6)] ^ S7[g(x, 0x8)] ^ S8[g(x, 0x9)] ^ S7[g(x, 0x3)];
    cba0:	e0211003 	eor	r1, r1, r3
        K[7 + i * 16] = S5[g(x, 0x5)] ^ S6[g(x, 0x4)] ^ S7[g(x, 0xA)] ^ S8[g(x, 0xB)] ^ S8[g(x, 0x7)];
    cba4:	e7983104 	ldr	r3, [r8, r4, lsl #2]
        K[6 + i * 16] = S5[g(x, 0x7)] ^ S6[g(x, 0x6)] ^ S7[g(x, 0x8)] ^ S8[g(x, 0x9)] ^ S7[g(x, 0x3)];
    cba8:	e5821008 	str	r1, [r2, #8]
        K[7 + i * 16] = S5[g(x, 0x5)] ^ S6[g(x, 0x4)] ^ S7[g(x, 0xA)] ^ S8[g(x, 0xB)] ^ S8[g(x, 0x7)];
    cbac:	e0233006 	eor	r3, r3, r6
    cbb0:	e582300c 	str	r3, [r2, #12]
    cbb4:	e59d301c 	ldr	r3, [sp, #28]
        K[4 + i * 16] = S5[g(x, 0x3)] ^ S6[g(x, 0x2)] ^ S7[g(x, 0xC)] ^ S8[g(x, 0xD)] ^ S5[g(x, 0x8)];
    cbb8:	e5820000 	str	r0, [r2]
        if(debug) {
    cbbc:	e2831004 	add	r1, r3, #4
    cbc0:	e2832007 	add	r2, r3, #7
    cbc4:	1a0003e2 	bne	db54 <run+0x1504>
            for(int j = 4; j < 8; j++) printf("%08X ", K[j + i*16]);
            printf("\n");
        }

        // Third z transformation
        z[0] = x[0] ^ S5[g(x, 0xD)] ^ S6[g(x, 0xF)] ^ S7[g(x, 0xC)] ^ S8[g(x, 0xE)] ^ S7[g(x, 0x8)];
    cbc8:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
        z[1] = x[2] ^ S5[g(z, 0x0)] ^ S6[g(z, 0x2)] ^ S7[g(z, 0x1)] ^ S8[g(z, 0x3)] ^ S8[g(x, 0xA)];
        z[2] = x[3] ^ S5[g(z, 0x7)] ^ S6[g(z, 0x6)] ^ S7[g(z, 0x5)] ^ S8[g(z, 0x4)] ^ S5[g(x, 0x9)];
    cbcc:	e79a210e 	ldr	r2, [sl, lr, lsl #2]
        z[3] = x[1] ^ S5[g(z, 0xA)] ^ S6[g(z, 0x9)] ^ S7[g(z, 0xB)] ^ S8[g(z, 0x8)] ^ S6[g(x, 0xB)];

        if(debug) {
    cbd0:	e59de1fc 	ldr	lr, [sp, #508]	; 0x1fc
        z[0] = x[0] ^ S5[g(x, 0xD)] ^ S6[g(x, 0xF)] ^ S7[g(x, 0xC)] ^ S8[g(x, 0xE)] ^ S7[g(x, 0x8)];
    cbd4:	e023300c 	eor	r3, r3, ip
    cbd8:	e79a0105 	ldr	r0, [sl, r5, lsl #2]
    cbdc:	e1a0c003 	mov	ip, r3
    cbe0:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
        if(debug) {
    cbe4:	e35e0000 	cmp	lr, #0
        z[0] = x[0] ^ S5[g(x, 0xD)] ^ S6[g(x, 0xF)] ^ S7[g(x, 0xC)] ^ S8[g(x, 0xE)] ^ S7[g(x, 0x8)];
    cbe8:	e59de0a8 	ldr	lr, [sp, #168]	; 0xa8
    cbec:	e7995103 	ldr	r5, [r9, r3, lsl #2]
    cbf0:	e02cc00e 	eor	ip, ip, lr
    cbf4:	e79b7107 	ldr	r7, [fp, r7, lsl #2]
    cbf8:	e02cc000 	eor	ip, ip, r0
    cbfc:	e02cc005 	eor	ip, ip, r5
    cc00:	e027700c 	eor	r7, r7, ip
        z[1] = x[2] ^ S5[g(z, 0x0)] ^ S6[g(z, 0x2)] ^ S7[g(z, 0x1)] ^ S8[g(z, 0x3)] ^ S8[g(x, 0xA)];
    cc04:	e79b1104 	ldr	r1, [fp, r4, lsl #2]
    cc08:	e1a0ec27 	lsr	lr, r7, #24
    cc0c:	e59d00b0 	ldr	r0, [sp, #176]	; 0xb0
    cc10:	e7e7c457 	ubfx	ip, r7, #8, #8
    cc14:	e0211000 	eor	r1, r1, r0
    cc18:	e79a010e 	ldr	r0, [sl, lr, lsl #2]
    cc1c:	e7e74857 	ubfx	r4, r7, #16, #8
    cc20:	e0211000 	eor	r1, r1, r0
    cc24:	e799010c 	ldr	r0, [r9, ip, lsl #2]
    cc28:	e58dc024 	str	ip, [sp, #36]	; 0x24
    cc2c:	e6efc077 	uxtb	ip, r7
    cc30:	e0211000 	eor	r1, r1, r0
    cc34:	e58d003c 	str	r0, [sp, #60]	; 0x3c
    cc38:	e7980104 	ldr	r0, [r8, r4, lsl #2]
    cc3c:	e58dc028 	str	ip, [sp, #40]	; 0x28
    cc40:	e0211000 	eor	r1, r1, r0
    cc44:	e79b010c 	ldr	r0, [fp, ip, lsl #2]
        z[3] = x[1] ^ S5[g(z, 0xA)] ^ S6[g(z, 0x9)] ^ S7[g(z, 0xB)] ^ S8[g(z, 0x8)] ^ S6[g(x, 0xB)];
    cc48:	e59d3020 	ldr	r3, [sp, #32]
        z[1] = x[2] ^ S5[g(z, 0x0)] ^ S6[g(z, 0x2)] ^ S7[g(z, 0x1)] ^ S8[g(z, 0x3)] ^ S8[g(x, 0xA)];
    cc4c:	e0210000 	eor	r0, r1, r0
        z[2] = x[3] ^ S5[g(z, 0x7)] ^ S6[g(z, 0x6)] ^ S7[g(z, 0x5)] ^ S8[g(z, 0x4)] ^ S5[g(x, 0x9)];
    cc50:	e59d10b4 	ldr	r1, [sp, #180]	; 0xb4
    cc54:	e6efc070 	uxtb	ip, r0
        z[1] = x[2] ^ S5[g(z, 0x0)] ^ S6[g(z, 0x2)] ^ S7[g(z, 0x1)] ^ S8[g(z, 0x3)] ^ S8[g(x, 0xA)];
    cc58:	e58de020 	str	lr, [sp, #32]
        z[2] = x[3] ^ S5[g(z, 0x7)] ^ S6[g(z, 0x6)] ^ S7[g(z, 0x5)] ^ S8[g(z, 0x4)] ^ S5[g(x, 0x9)];
    cc5c:	e7e7e450 	ubfx	lr, r0, #8, #8
    cc60:	e0211002 	eor	r1, r1, r2
    cc64:	e79a210c 	ldr	r2, [sl, ip, lsl #2]
    cc68:	e58dc044 	str	ip, [sp, #68]	; 0x44
    cc6c:	e799c10e 	ldr	ip, [r9, lr, lsl #2]
    cc70:	e0211002 	eor	r1, r1, r2
    cc74:	e58d2034 	str	r2, [sp, #52]	; 0x34
    cc78:	e7e72850 	ubfx	r2, r0, #16, #8
    cc7c:	e021100c 	eor	r1, r1, ip
    cc80:	e58dc04c 	str	ip, [sp, #76]	; 0x4c
    cc84:	e1a0cc20 	lsr	ip, r0, #24
        z[3] = x[1] ^ S5[g(z, 0xA)] ^ S6[g(z, 0x9)] ^ S7[g(z, 0xB)] ^ S8[g(z, 0x8)] ^ S6[g(x, 0xB)];
    cc88:	e7993103 	ldr	r3, [r9, r3, lsl #2]
        z[1] = x[2] ^ S5[g(z, 0x0)] ^ S6[g(z, 0x2)] ^ S7[g(z, 0x1)] ^ S8[g(z, 0x3)] ^ S8[g(x, 0xA)];
    cc8c:	e58d4030 	str	r4, [sp, #48]	; 0x30
    cc90:	e58d0040 	str	r0, [sp, #64]	; 0x40
    cc94:	e58d00bc 	str	r0, [sp, #188]	; 0xbc
        z[2] = x[3] ^ S5[g(z, 0x7)] ^ S6[g(z, 0x6)] ^ S7[g(z, 0x5)] ^ S8[g(z, 0x4)] ^ S5[g(x, 0x9)];
    cc98:	e58d2050 	str	r2, [sp, #80]	; 0x50
        z[0] = x[0] ^ S5[g(x, 0xD)] ^ S6[g(x, 0xF)] ^ S7[g(x, 0xC)] ^ S8[g(x, 0xE)] ^ S7[g(x, 0x8)];
    cc9c:	e58d70b8 	str	r7, [sp, #184]	; 0xb8
        z[2] = x[3] ^ S5[g(z, 0x7)] ^ S6[g(z, 0x6)] ^ S7[g(z, 0x5)] ^ S8[g(z, 0x4)] ^ S5[g(x, 0x9)];
    cca0:	e58de048 	str	lr, [sp, #72]	; 0x48
    cca4:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
    cca8:	e7980102 	ldr	r0, [r8, r2, lsl #2]
        z[3] = x[1] ^ S5[g(z, 0xA)] ^ S6[g(z, 0x9)] ^ S7[g(z, 0xB)] ^ S8[g(z, 0x8)] ^ S6[g(x, 0xB)];
    ccac:	e59d40ac 	ldr	r4, [sp, #172]	; 0xac
        z[2] = x[3] ^ S5[g(z, 0x7)] ^ S6[g(z, 0x6)] ^ S7[g(z, 0x5)] ^ S8[g(z, 0x4)] ^ S5[g(x, 0x9)];
    ccb0:	e0211000 	eor	r1, r1, r0
    ccb4:	e79b010c 	ldr	r0, [fp, ip, lsl #2]
        z[3] = x[1] ^ S5[g(z, 0xA)] ^ S6[g(z, 0x9)] ^ S7[g(z, 0xB)] ^ S8[g(z, 0x8)] ^ S6[g(x, 0xB)];
    ccb8:	e0244003 	eor	r4, r4, r3
        z[2] = x[3] ^ S5[g(z, 0x7)] ^ S6[g(z, 0x6)] ^ S7[g(z, 0x5)] ^ S8[g(z, 0x4)] ^ S5[g(x, 0x9)];
    ccbc:	e0211000 	eor	r1, r1, r0
        z[3] = x[1] ^ S5[g(z, 0xA)] ^ S6[g(z, 0x9)] ^ S7[g(z, 0xB)] ^ S8[g(z, 0x8)] ^ S6[g(x, 0xB)];
    ccc0:	e7e72451 	ubfx	r2, r1, #8, #8
    ccc4:	e6ef6071 	uxtb	r6, r1
    ccc8:	e7e75851 	ubfx	r5, r1, #16, #8
    cccc:	e79a3102 	ldr	r3, [sl, r2, lsl #2]
        z[2] = x[3] ^ S5[g(z, 0x7)] ^ S6[g(z, 0x6)] ^ S7[g(z, 0x5)] ^ S8[g(z, 0x4)] ^ S5[g(x, 0x9)];
    ccd0:	e58d1054 	str	r1, [sp, #84]	; 0x54
        z[3] = x[1] ^ S5[g(z, 0xA)] ^ S6[g(z, 0x9)] ^ S7[g(z, 0xB)] ^ S8[g(z, 0x8)] ^ S6[g(x, 0xB)];
    ccd4:	e0244003 	eor	r4, r4, r3
        z[2] = x[3] ^ S5[g(z, 0x7)] ^ S6[g(z, 0x6)] ^ S7[g(z, 0x5)] ^ S8[g(z, 0x4)] ^ S5[g(x, 0x9)];
    ccd8:	e58d10c0 	str	r1, [sp, #192]	; 0xc0
        z[3] = x[1] ^ S5[g(z, 0xA)] ^ S6[g(z, 0x9)] ^ S7[g(z, 0xB)] ^ S8[g(z, 0x8)] ^ S6[g(x, 0xB)];
    ccdc:	e1a03c21 	lsr	r3, r1, #24
    cce0:	e7991105 	ldr	r1, [r9, r5, lsl #2]
    cce4:	e0244001 	eor	r4, r4, r1
    cce8:	e7981106 	ldr	r1, [r8, r6, lsl #2]
    ccec:	e0244001 	eor	r4, r4, r1
    ccf0:	e79b1103 	ldr	r1, [fp, r3, lsl #2]
    ccf4:	e0244001 	eor	r4, r4, r1
    ccf8:	e58d40c4 	str	r4, [sp, #196]	; 0xc4
        if(debug) {
    ccfc:	1a00036e 	bne	dabc <run+0x146c>
        }

        K[8 + i * 16] = S5[g(z, 0x3)] ^ S6[g(z, 0x2)] ^ S7[g(z, 0xC)] ^ S8[g(z, 0xD)] ^ S5[g(z, 0x9)];
        K[9 + i * 16] = S5[g(z, 0x1)] ^ S6[g(z, 0x0)] ^ S7[g(z, 0xE)] ^ S8[g(z, 0xF)] ^ S6[g(z, 0xC)];
        K[10 + i * 16] = S5[g(z, 0x7)] ^ S6[g(z, 0x6)] ^ S7[g(z, 0x8)] ^ S8[g(z, 0x9)] ^ S7[g(z, 0x2)];
        K[11 + i * 16] = S5[g(z, 0x5)] ^ S6[g(z, 0x4)] ^ S7[g(z, 0xA)] ^ S8[g(z, 0xB)] ^ S8[g(z, 0x6)];
    cd00:	e59dc050 	ldr	ip, [sp, #80]	; 0x50
    cd04:	e59de048 	ldr	lr, [sp, #72]	; 0x48
        K[10 + i * 16] = S5[g(z, 0x7)] ^ S6[g(z, 0x6)] ^ S7[g(z, 0x8)] ^ S8[g(z, 0x9)] ^ S7[g(z, 0x2)];
    cd08:	e59d004c 	ldr	r0, [sp, #76]	; 0x4c
    cd0c:	e59d1034 	ldr	r1, [sp, #52]	; 0x34
        K[11 + i * 16] = S5[g(z, 0x5)] ^ S6[g(z, 0x4)] ^ S7[g(z, 0xA)] ^ S8[g(z, 0xB)] ^ S8[g(z, 0x6)];
    cd10:	e79ac10c 	ldr	ip, [sl, ip, lsl #2]
    cd14:	e79be10e 	ldr	lr, [fp, lr, lsl #2]
        K[10 + i * 16] = S5[g(z, 0x7)] ^ S6[g(z, 0x6)] ^ S7[g(z, 0x8)] ^ S8[g(z, 0x9)] ^ S7[g(z, 0x2)];
    cd18:	e0211000 	eor	r1, r1, r0
        K[11 + i * 16] = S5[g(z, 0x5)] ^ S6[g(z, 0x4)] ^ S7[g(z, 0xA)] ^ S8[g(z, 0xB)] ^ S8[g(z, 0x6)];
    cd1c:	e58de034 	str	lr, [sp, #52]	; 0x34
        K[9 + i * 16] = S5[g(z, 0x1)] ^ S6[g(z, 0x0)] ^ S7[g(z, 0xE)] ^ S8[g(z, 0xF)] ^ S6[g(z, 0xC)];
    cd20:	e59d0030 	ldr	r0, [sp, #48]	; 0x30
        K[11 + i * 16] = S5[g(z, 0x5)] ^ S6[g(z, 0x4)] ^ S7[g(z, 0xA)] ^ S8[g(z, 0xB)] ^ S8[g(z, 0x6)];
    cd24:	e798e102 	ldr	lr, [r8, r2, lsl #2]
    cd28:	e58dc030 	str	ip, [sp, #48]	; 0x30

        if(debug) {
    cd2c:	e59d21fc 	ldr	r2, [sp, #508]	; 0x1fc
        K[10 + i * 16] = S5[g(z, 0x7)] ^ S6[g(z, 0x6)] ^ S7[g(z, 0x8)] ^ S8[g(z, 0x9)] ^ S7[g(z, 0x2)];
    cd30:	e798c103 	ldr	ip, [r8, r3, lsl #2]
        K[9 + i * 16] = S5[g(z, 0x1)] ^ S6[g(z, 0x0)] ^ S7[g(z, 0xE)] ^ S8[g(z, 0xF)] ^ S6[g(z, 0xC)];
    cd34:	e7e73454 	ubfx	r3, r4, #8, #8
        if(debug) {
    cd38:	e3520000 	cmp	r2, #0
        K[10 + i * 16] = S5[g(z, 0x7)] ^ S6[g(z, 0x6)] ^ S7[g(z, 0x8)] ^ S8[g(z, 0x9)] ^ S7[g(z, 0x2)];
    cd3c:	e58d1058 	str	r1, [sp, #88]	; 0x58
        K[9 + i * 16] = S5[g(z, 0x1)] ^ S6[g(z, 0x0)] ^ S7[g(z, 0xE)] ^ S8[g(z, 0xF)] ^ S6[g(z, 0xC)];
    cd40:	e7982103 	ldr	r2, [r8, r3, lsl #2]
        K[8 + i * 16] = S5[g(z, 0x3)] ^ S6[g(z, 0x2)] ^ S7[g(z, 0xC)] ^ S8[g(z, 0xD)] ^ S5[g(z, 0x9)];
    cd44:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
        K[9 + i * 16] = S5[g(z, 0x1)] ^ S6[g(z, 0x0)] ^ S7[g(z, 0xE)] ^ S8[g(z, 0xF)] ^ S6[g(z, 0xC)];
    cd48:	e79a0100 	ldr	r0, [sl, r0, lsl #2]
        K[8 + i * 16] = S5[g(z, 0x3)] ^ S6[g(z, 0x2)] ^ S7[g(z, 0xC)] ^ S8[g(z, 0xD)] ^ S5[g(z, 0x9)];
    cd4c:	e79a1103 	ldr	r1, [sl, r3, lsl #2]
    cd50:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
        K[9 + i * 16] = S5[g(z, 0x1)] ^ S6[g(z, 0x0)] ^ S7[g(z, 0xE)] ^ S8[g(z, 0xF)] ^ S6[g(z, 0xC)];
    cd54:	e58d004c 	str	r0, [sp, #76]	; 0x4c
        K[8 + i * 16] = S5[g(z, 0x3)] ^ S6[g(z, 0x2)] ^ S7[g(z, 0xC)] ^ S8[g(z, 0xD)] ^ S5[g(z, 0x9)];
    cd58:	e0233001 	eor	r3, r3, r1
        K[11 + i * 16] = S5[g(z, 0x5)] ^ S6[g(z, 0x4)] ^ S7[g(z, 0xA)] ^ S8[g(z, 0xB)] ^ S8[g(z, 0x6)];
    cd5c:	e79b6106 	ldr	r6, [fp, r6, lsl #2]
        K[8 + i * 16] = S5[g(z, 0x3)] ^ S6[g(z, 0x2)] ^ S7[g(z, 0xC)] ^ S8[g(z, 0xD)] ^ S5[g(z, 0x9)];
    cd60:	e1a01003 	mov	r1, r3
        K[9 + i * 16] = S5[g(z, 0x1)] ^ S6[g(z, 0x0)] ^ S7[g(z, 0xE)] ^ S8[g(z, 0xF)] ^ S6[g(z, 0xC)];
    cd64:	e59d3020 	ldr	r3, [sp, #32]
    cd68:	e7993103 	ldr	r3, [r9, r3, lsl #2]
    cd6c:	e0233000 	eor	r3, r3, r0
    cd70:	e0233002 	eor	r3, r3, r2
    cd74:	e6ef2074 	uxtb	r2, r4
        K[11 + i * 16] = S5[g(z, 0x5)] ^ S6[g(z, 0x4)] ^ S7[g(z, 0xA)] ^ S8[g(z, 0xB)] ^ S8[g(z, 0x6)];
    cd78:	e59d0030 	ldr	r0, [sp, #48]	; 0x30
        K[9 + i * 16] = S5[g(z, 0x1)] ^ S6[g(z, 0x0)] ^ S7[g(z, 0xE)] ^ S8[g(z, 0xF)] ^ S6[g(z, 0xC)];
    cd7c:	e79b2102 	ldr	r2, [fp, r2, lsl #2]
    cd80:	e0233002 	eor	r3, r3, r2
        K[11 + i * 16] = S5[g(z, 0x5)] ^ S6[g(z, 0x4)] ^ S7[g(z, 0xA)] ^ S8[g(z, 0xB)] ^ S8[g(z, 0x6)];
    cd84:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
        K[9 + i * 16] = S5[g(z, 0x1)] ^ S6[g(z, 0x0)] ^ S7[g(z, 0xE)] ^ S8[g(z, 0xF)] ^ S6[g(z, 0xC)];
    cd88:	e58d303c 	str	r3, [sp, #60]	; 0x3c
        K[11 + i * 16] = S5[g(z, 0x5)] ^ S6[g(z, 0x4)] ^ S7[g(z, 0xA)] ^ S8[g(z, 0xB)] ^ S8[g(z, 0x6)];
    cd8c:	e7992102 	ldr	r2, [r9, r2, lsl #2]
    cd90:	e0222000 	eor	r2, r2, r0
    cd94:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
    cd98:	e0222000 	eor	r2, r2, r0
    cd9c:	e022200e 	eor	r2, r2, lr
    cda0:	e0222006 	eor	r2, r2, r6
    cda4:	e59d6018 	ldr	r6, [sp, #24]
        K[8 + i * 16] = S5[g(z, 0x3)] ^ S6[g(z, 0x2)] ^ S7[g(z, 0xC)] ^ S8[g(z, 0xD)] ^ S5[g(z, 0x9)];
    cda8:	e1a00c24 	lsr	r0, r4, #24
        K[11 + i * 16] = S5[g(z, 0x5)] ^ S6[g(z, 0x4)] ^ S7[g(z, 0xA)] ^ S8[g(z, 0xB)] ^ S8[g(z, 0x6)];
    cdac:	e586201c 	str	r2, [r6, #28]
        K[8 + i * 16] = S5[g(z, 0x3)] ^ S6[g(z, 0x2)] ^ S7[g(z, 0xC)] ^ S8[g(z, 0xD)] ^ S5[g(z, 0x9)];
    cdb0:	e79a2105 	ldr	r2, [sl, r5, lsl #2]
        K[10 + i * 16] = S5[g(z, 0x7)] ^ S6[g(z, 0x6)] ^ S7[g(z, 0x8)] ^ S8[g(z, 0x9)] ^ S7[g(z, 0x2)];
    cdb4:	e79b5105 	ldr	r5, [fp, r5, lsl #2]
        K[8 + i * 16] = S5[g(z, 0x3)] ^ S6[g(z, 0x2)] ^ S7[g(z, 0xC)] ^ S8[g(z, 0xD)] ^ S5[g(z, 0x9)];
    cdb8:	e0211002 	eor	r1, r1, r2
    cdbc:	e7e72854 	ubfx	r2, r4, #16, #8
    cdc0:	e79be102 	ldr	lr, [fp, r2, lsl #2]
        K[10 + i * 16] = S5[g(z, 0x7)] ^ S6[g(z, 0x6)] ^ S7[g(z, 0x8)] ^ S8[g(z, 0x9)] ^ S7[g(z, 0x2)];
    cdc4:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
    cdc8:	e59d3058 	ldr	r3, [sp, #88]	; 0x58
    cdcc:	e7982102 	ldr	r2, [r8, r2, lsl #2]
    cdd0:	e0222003 	eor	r2, r2, r3
    cdd4:	e022200c 	eor	r2, r2, ip
    cdd8:	e0222005 	eor	r2, r2, r5
    cddc:	e5862018 	str	r2, [r6, #24]
        K[8 + i * 16] = S5[g(z, 0x3)] ^ S6[g(z, 0x2)] ^ S7[g(z, 0xC)] ^ S8[g(z, 0xD)] ^ S5[g(z, 0x9)];
    cde0:	e7982100 	ldr	r2, [r8, r0, lsl #2]
        K[9 + i * 16] = S5[g(z, 0x1)] ^ S6[g(z, 0x0)] ^ S7[g(z, 0xE)] ^ S8[g(z, 0xF)] ^ S6[g(z, 0xC)];
    cde4:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
        K[8 + i * 16] = S5[g(z, 0x3)] ^ S6[g(z, 0x2)] ^ S7[g(z, 0xC)] ^ S8[g(z, 0xD)] ^ S5[g(z, 0x9)];
    cde8:	e0211002 	eor	r1, r1, r2
        K[9 + i * 16] = S5[g(z, 0x1)] ^ S6[g(z, 0x0)] ^ S7[g(z, 0xE)] ^ S8[g(z, 0xF)] ^ S6[g(z, 0xC)];
    cdec:	e7992100 	ldr	r2, [r9, r0, lsl #2]
        K[8 + i * 16] = S5[g(z, 0x3)] ^ S6[g(z, 0x2)] ^ S7[g(z, 0xC)] ^ S8[g(z, 0xD)] ^ S5[g(z, 0x9)];
    cdf0:	e02ee001 	eor	lr, lr, r1
        K[9 + i * 16] = S5[g(z, 0x1)] ^ S6[g(z, 0x0)] ^ S7[g(z, 0xE)] ^ S8[g(z, 0xF)] ^ S6[g(z, 0xC)];
    cdf4:	e0233002 	eor	r3, r3, r2
    cdf8:	e5863014 	str	r3, [r6, #20]
    cdfc:	e59d301c 	ldr	r3, [sp, #28]
        K[8 + i * 16] = S5[g(z, 0x3)] ^ S6[g(z, 0x2)] ^ S7[g(z, 0xC)] ^ S8[g(z, 0xD)] ^ S5[g(z, 0x9)];
    ce00:	e586e010 	str	lr, [r6, #16]
        if(debug) {
    ce04:	e2831008 	add	r1, r3, #8
    ce08:	e283200b 	add	r2, r3, #11
    ce0c:	1a000315 	bne	da68 <run+0x1418>
            for(int j = 8; j < 12; j++) printf("%08X ", K[j + i*16]);
            printf("\n");
        }

        // Fourth x transformation
        x[0] = z[2] ^ S5[g(z, 0x5)] ^ S6[g(z, 0x7)] ^ S7[g(z, 0x4)] ^ S8[g(z, 0x6)] ^ S7[g(z, 0x0)];
    ce10:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
    ce14:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
        x[1] = z[0] ^ S5[g(x, 0x0)] ^ S6[g(x, 0x2)] ^ S7[g(x, 0x1)] ^ S8[g(x, 0x3)] ^ S8[g(z, 0x2)];
        x[2] = z[1] ^ S5[g(x, 0x7)] ^ S6[g(x, 0x6)] ^ S7[g(x, 0x5)] ^ S8[g(x, 0x4)] ^ S5[g(z, 0x1)];
    ce18:	e59d204c 	ldr	r2, [sp, #76]	; 0x4c
        x[0] = z[2] ^ S5[g(z, 0x5)] ^ S6[g(z, 0x7)] ^ S7[g(z, 0x4)] ^ S8[g(z, 0x6)] ^ S7[g(z, 0x0)];
    ce1c:	e0211003 	eor	r1, r1, r3
        x[2] = z[1] ^ S5[g(x, 0x7)] ^ S6[g(x, 0x6)] ^ S7[g(x, 0x5)] ^ S8[g(x, 0x4)] ^ S5[g(z, 0x1)];
    ce20:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
    ce24:	e0233002 	eor	r3, r3, r2
        x[0] = z[2] ^ S5[g(z, 0x5)] ^ S6[g(z, 0x7)] ^ S7[g(z, 0x4)] ^ S8[g(z, 0x6)] ^ S7[g(z, 0x0)];
    ce28:	e59d2020 	ldr	r2, [sp, #32]
    ce2c:	e7982102 	ldr	r2, [r8, r2, lsl #2]
    ce30:	e0211002 	eor	r1, r1, r2
    ce34:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
    ce38:	e7992102 	ldr	r2, [r9, r2, lsl #2]
    ce3c:	e0211002 	eor	r1, r1, r2
    ce40:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
    ce44:	e7982102 	ldr	r2, [r8, r2, lsl #2]
    ce48:	e0211002 	eor	r1, r1, r2
    ce4c:	e59d2054 	ldr	r2, [sp, #84]	; 0x54
    ce50:	e0211002 	eor	r1, r1, r2
        x[1] = z[0] ^ S5[g(x, 0x0)] ^ S6[g(x, 0x2)] ^ S7[g(x, 0x1)] ^ S8[g(x, 0x3)] ^ S8[g(z, 0x2)];
    ce54:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
    ce58:	e7e7c851 	ubfx	ip, r1, #16, #8
    ce5c:	e79be102 	ldr	lr, [fp, r2, lsl #2]
        x[3] = z[3] ^ S5[g(x, 0xA)] ^ S6[g(x, 0x9)] ^ S7[g(x, 0xB)] ^ S8[g(x, 0x8)] ^ S6[g(z, 0x3)];
    ce60:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
        x[1] = z[0] ^ S5[g(x, 0x0)] ^ S6[g(x, 0x2)] ^ S7[g(x, 0x1)] ^ S8[g(x, 0x3)] ^ S8[g(z, 0x2)];
    ce64:	e798510c 	ldr	r5, [r8, ip, lsl #2]
        x[3] = z[3] ^ S5[g(x, 0xA)] ^ S6[g(x, 0x9)] ^ S7[g(x, 0xB)] ^ S8[g(x, 0x8)] ^ S6[g(z, 0x3)];
    ce68:	e7992102 	ldr	r2, [r9, r2, lsl #2]
        x[1] = z[0] ^ S5[g(x, 0x0)] ^ S6[g(x, 0x2)] ^ S7[g(x, 0x1)] ^ S8[g(x, 0x3)] ^ S8[g(z, 0x2)];
    ce6c:	e7e70451 	ubfx	r0, r1, #8, #8
        x[3] = z[3] ^ S5[g(x, 0xA)] ^ S6[g(x, 0x9)] ^ S7[g(x, 0xB)] ^ S8[g(x, 0x8)] ^ S6[g(z, 0x3)];
    ce70:	e0244002 	eor	r4, r4, r2

        if(debug) {
    ce74:	e59d21fc 	ldr	r2, [sp, #508]	; 0x1fc
        x[1] = z[0] ^ S5[g(x, 0x0)] ^ S6[g(x, 0x2)] ^ S7[g(x, 0x1)] ^ S8[g(x, 0x3)] ^ S8[g(z, 0x2)];
    ce78:	e02ee007 	eor	lr, lr, r7
        x[0] = z[2] ^ S5[g(z, 0x5)] ^ S6[g(z, 0x7)] ^ S7[g(z, 0x4)] ^ S8[g(z, 0x6)] ^ S7[g(z, 0x0)];
    ce7c:	e58d10a8 	str	r1, [sp, #168]	; 0xa8
        if(debug) {
    ce80:	e3520000 	cmp	r2, #0
        x[1] = z[0] ^ S5[g(x, 0x0)] ^ S6[g(x, 0x2)] ^ S7[g(x, 0x1)] ^ S8[g(x, 0x3)] ^ S8[g(z, 0x2)];
    ce84:	e1a02c21 	lsr	r2, r1, #24
    ce88:	e6ef1071 	uxtb	r1, r1
    ce8c:	e58d5020 	str	r5, [sp, #32]
    ce90:	e79ac102 	ldr	ip, [sl, r2, lsl #2]
    ce94:	e79b1101 	ldr	r1, [fp, r1, lsl #2]
    ce98:	e02ee00c 	eor	lr, lr, ip
    ce9c:	e799c100 	ldr	ip, [r9, r0, lsl #2]
    cea0:	e02cc00e 	eor	ip, ip, lr
    cea4:	e02cc005 	eor	ip, ip, r5
    cea8:	e02cc001 	eor	ip, ip, r1
        x[2] = z[1] ^ S5[g(x, 0x7)] ^ S6[g(x, 0x6)] ^ S7[g(x, 0x5)] ^ S8[g(x, 0x4)] ^ S5[g(z, 0x1)];
    ceac:	e7e7e85c 	ubfx	lr, ip, #16, #8
    ceb0:	e6ef107c 	uxtb	r1, ip
        x[1] = z[0] ^ S5[g(x, 0x0)] ^ S6[g(x, 0x2)] ^ S7[g(x, 0x1)] ^ S8[g(x, 0x3)] ^ S8[g(z, 0x2)];
    ceb4:	e58dc0ac 	str	ip, [sp, #172]	; 0xac
        x[2] = z[1] ^ S5[g(x, 0x7)] ^ S6[g(x, 0x6)] ^ S7[g(x, 0x5)] ^ S8[g(x, 0x4)] ^ S5[g(z, 0x1)];
    ceb8:	e79a1101 	ldr	r1, [sl, r1, lsl #2]
    cebc:	e798510e 	ldr	r5, [r8, lr, lsl #2]
    cec0:	e0233001 	eor	r3, r3, r1
    cec4:	e7e7145c 	ubfx	r1, ip, #8, #8
    cec8:	e1a0cc2c 	lsr	ip, ip, #24
    cecc:	e58d5024 	str	r5, [sp, #36]	; 0x24
    ced0:	e79be10c 	ldr	lr, [fp, ip, lsl #2]
    ced4:	e799c101 	ldr	ip, [r9, r1, lsl #2]
    ced8:	e023300c 	eor	r3, r3, ip
    cedc:	e0233005 	eor	r3, r3, r5
    cee0:	e023300e 	eor	r3, r3, lr
        x[3] = z[3] ^ S5[g(x, 0xA)] ^ S6[g(x, 0x9)] ^ S7[g(x, 0xB)] ^ S8[g(x, 0x8)] ^ S6[g(z, 0x3)];
    cee4:	e7e7c453 	ubfx	ip, r3, #8, #8
        x[2] = z[1] ^ S5[g(x, 0x7)] ^ S6[g(x, 0x6)] ^ S7[g(x, 0x5)] ^ S8[g(x, 0x4)] ^ S5[g(z, 0x1)];
    cee8:	e58d30b0 	str	r3, [sp, #176]	; 0xb0
        x[3] = z[3] ^ S5[g(x, 0xA)] ^ S6[g(x, 0x9)] ^ S7[g(x, 0xB)] ^ S8[g(x, 0x8)] ^ S6[g(z, 0x3)];
    ceec:	e79a510c 	ldr	r5, [sl, ip, lsl #2]
    cef0:	e7e7c853 	ubfx	ip, r3, #16, #8
    cef4:	e0244005 	eor	r4, r4, r5
    cef8:	e799c10c 	ldr	ip, [r9, ip, lsl #2]
    cefc:	e024400c 	eor	r4, r4, ip
    cf00:	e58dc028 	str	ip, [sp, #40]	; 0x28
    cf04:	e6efc073 	uxtb	ip, r3
    cf08:	e1a03c23 	lsr	r3, r3, #24
    cf0c:	e798c10c 	ldr	ip, [r8, ip, lsl #2]
    cf10:	e024400c 	eor	r4, r4, ip
    cf14:	e79bc103 	ldr	ip, [fp, r3, lsl #2]
    cf18:	e024400c 	eor	r4, r4, ip
    cf1c:	e58d40b4 	str	r4, [sp, #180]	; 0xb4
        if(debug) {
    cf20:	1a0002af 	bne	d9e4 <run+0x1394>
            printf("Fourth x-transform: ");
            for(int j = 0; j < 4; j++) printf("%08X ", x[j]);
            printf("\n");
        }

        K[12 + i * 16] = S5[g(x, 0x8)] ^ S6[g(x, 0x9)] ^ S7[g(x, 0x7)] ^ S8[g(x, 0x6)] ^ S5[g(x, 0x3)];
    cf24:	e79bc101 	ldr	ip, [fp, r1, lsl #2]
        K[13 + i * 16] = S5[g(x, 0xA)] ^ S6[g(x, 0xB)] ^ S7[g(x, 0x5)] ^ S8[g(x, 0x4)] ^ S6[g(x, 0x7)];
        K[14 + i * 16] = S5[g(x, 0xC)] ^ S6[g(x, 0xD)] ^ S7[g(x, 0x3)] ^ S8[g(x, 0x2)] ^ S7[g(x, 0x8)];
    cf28:	e79b0100 	ldr	r0, [fp, r0, lsl #2]
        K[15 + i * 16] = S5[g(x, 0xE)] ^ S6[g(x, 0xF)] ^ S7[g(x, 0x1)] ^ S8[g(x, 0x0)] ^ S8[g(x, 0xD)];
    cf2c:	e5dd10b5 	ldrb	r1, [sp, #181]	; 0xb5
    cf30:	e79b2102 	ldr	r2, [fp, r2, lsl #2]
        K[14 + i * 16] = S5[g(x, 0xC)] ^ S6[g(x, 0xD)] ^ S7[g(x, 0x3)] ^ S8[g(x, 0x2)] ^ S7[g(x, 0x8)];
    cf34:	e58d0030 	str	r0, [sp, #48]	; 0x30
        K[15 + i * 16] = S5[g(x, 0xE)] ^ S6[g(x, 0xF)] ^ S7[g(x, 0x1)] ^ S8[g(x, 0x0)] ^ S8[g(x, 0xD)];
    cf38:	e79a0101 	ldr	r0, [sl, r1, lsl #2]
    cf3c:	e5dd10b4 	ldrb	r1, [sp, #180]	; 0xb4
        K[12 + i * 16] = S5[g(x, 0x8)] ^ S6[g(x, 0x9)] ^ S7[g(x, 0x7)] ^ S8[g(x, 0x6)] ^ S5[g(x, 0x3)];
    cf40:	e5dd70ac 	ldrb	r7, [sp, #172]	; 0xac
        K[15 + i * 16] = S5[g(x, 0xE)] ^ S6[g(x, 0xF)] ^ S7[g(x, 0x1)] ^ S8[g(x, 0x0)] ^ S8[g(x, 0xD)];
    cf44:	e7991101 	ldr	r1, [r9, r1, lsl #2]
    cf48:	e58d2034 	str	r2, [sp, #52]	; 0x34
        K[13 + i * 16] = S5[g(x, 0xA)] ^ S6[g(x, 0xB)] ^ S7[g(x, 0x5)] ^ S8[g(x, 0x4)] ^ S6[g(x, 0x7)];
    cf4c:	e5dd20b0 	ldrb	r2, [sp, #176]	; 0xb0
        K[15 + i * 16] = S5[g(x, 0xE)] ^ S6[g(x, 0xF)] ^ S7[g(x, 0x1)] ^ S8[g(x, 0x0)] ^ S8[g(x, 0xD)];
    cf50:	e0200001 	eor	r0, r0, r1
        K[12 + i * 16] = S5[g(x, 0x8)] ^ S6[g(x, 0x9)] ^ S7[g(x, 0x7)] ^ S8[g(x, 0x6)] ^ S5[g(x, 0x3)];
    cf54:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
    cf58:	e7981107 	ldr	r1, [r8, r7, lsl #2]
        K[13 + i * 16] = S5[g(x, 0xA)] ^ S6[g(x, 0xB)] ^ S7[g(x, 0x5)] ^ S8[g(x, 0x4)] ^ S6[g(x, 0x7)];
    cf5c:	e799c102 	ldr	ip, [r9, r2, lsl #2]
    cf60:	e7997107 	ldr	r7, [r9, r7, lsl #2]
        K[12 + i * 16] = S5[g(x, 0x8)] ^ S6[g(x, 0x9)] ^ S7[g(x, 0x7)] ^ S8[g(x, 0x6)] ^ S5[g(x, 0x3)];
    cf64:	e5dd60a8 	ldrb	r6, [sp, #168]	; 0xa8
        K[13 + i * 16] = S5[g(x, 0xA)] ^ S6[g(x, 0xB)] ^ S7[g(x, 0x5)] ^ S8[g(x, 0x4)] ^ S6[g(x, 0x7)];
    cf68:	e02cc007 	eor	ip, ip, r7
    cf6c:	e02cc005 	eor	ip, ip, r5
    cf70:	e59d5024 	ldr	r5, [sp, #36]	; 0x24

        if(debug) {
    cf74:	e59d41fc 	ldr	r4, [sp, #508]	; 0x1fc
        K[13 + i * 16] = S5[g(x, 0xA)] ^ S6[g(x, 0xB)] ^ S7[g(x, 0x5)] ^ S8[g(x, 0x4)] ^ S6[g(x, 0x7)];
    cf78:	e02cc005 	eor	ip, ip, r5
    cf7c:	e59d5018 	ldr	r5, [sp, #24]
        if(debug) {
    cf80:	e3540000 	cmp	r4, #0
        K[13 + i * 16] = S5[g(x, 0xA)] ^ S6[g(x, 0xB)] ^ S7[g(x, 0x5)] ^ S8[g(x, 0x4)] ^ S6[g(x, 0x7)];
    cf84:	e02cc00e 	eor	ip, ip, lr
    cf88:	e585c024 	str	ip, [r5, #36]	; 0x24
        K[12 + i * 16] = S5[g(x, 0x8)] ^ S6[g(x, 0x9)] ^ S7[g(x, 0x7)] ^ S8[g(x, 0x6)] ^ S5[g(x, 0x3)];
    cf8c:	e79ac106 	ldr	ip, [sl, r6, lsl #2]
        K[14 + i * 16] = S5[g(x, 0xC)] ^ S6[g(x, 0xD)] ^ S7[g(x, 0x3)] ^ S8[g(x, 0x2)] ^ S7[g(x, 0x8)];
    cf90:	e5dd40b6 	ldrb	r4, [sp, #182]	; 0xb6
    cf94:	e5dd20b7 	ldrb	r2, [sp, #183]	; 0xb7
        K[12 + i * 16] = S5[g(x, 0x8)] ^ S6[g(x, 0x9)] ^ S7[g(x, 0x7)] ^ S8[g(x, 0x6)] ^ S5[g(x, 0x3)];
    cf98:	e021100c 	eor	r1, r1, ip
    cf9c:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
        K[14 + i * 16] = S5[g(x, 0xC)] ^ S6[g(x, 0xD)] ^ S7[g(x, 0x3)] ^ S8[g(x, 0x2)] ^ S7[g(x, 0x8)];
    cfa0:	e799e104 	ldr	lr, [r9, r4, lsl #2]
    cfa4:	e79a2102 	ldr	r2, [sl, r2, lsl #2]
        K[12 + i * 16] = S5[g(x, 0x8)] ^ S6[g(x, 0x9)] ^ S7[g(x, 0x7)] ^ S8[g(x, 0x6)] ^ S5[g(x, 0x3)];
    cfa8:	e02cc001 	eor	ip, ip, r1
        K[14 + i * 16] = S5[g(x, 0xC)] ^ S6[g(x, 0xD)] ^ S7[g(x, 0x3)] ^ S8[g(x, 0x2)] ^ S7[g(x, 0x8)];
    cfac:	e7981106 	ldr	r1, [r8, r6, lsl #2]
    cfb0:	e022200e 	eor	r2, r2, lr
    cfb4:	e0222001 	eor	r2, r2, r1
    cfb8:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
        K[15 + i * 16] = S5[g(x, 0xE)] ^ S6[g(x, 0xF)] ^ S7[g(x, 0x1)] ^ S8[g(x, 0x0)] ^ S8[g(x, 0xD)];
    cfbc:	e59de020 	ldr	lr, [sp, #32]
        K[14 + i * 16] = S5[g(x, 0xC)] ^ S6[g(x, 0xD)] ^ S7[g(x, 0x3)] ^ S8[g(x, 0x2)] ^ S7[g(x, 0x8)];
    cfc0:	e0222001 	eor	r2, r2, r1
        K[15 + i * 16] = S5[g(x, 0xE)] ^ S6[g(x, 0xF)] ^ S7[g(x, 0x1)] ^ S8[g(x, 0x0)] ^ S8[g(x, 0xD)];
    cfc4:	e79b1104 	ldr	r1, [fp, r4, lsl #2]
    cfc8:	e0211000 	eor	r1, r1, r0
    cfcc:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
    cfd0:	e021100e 	eor	r1, r1, lr
    cfd4:	e0211000 	eor	r1, r1, r0
    cfd8:	e585102c 	str	r1, [r5, #44]	; 0x2c
        K[12 + i * 16] = S5[g(x, 0x8)] ^ S6[g(x, 0x9)] ^ S7[g(x, 0x7)] ^ S8[g(x, 0x6)] ^ S5[g(x, 0x3)];
    cfdc:	e79a1103 	ldr	r1, [sl, r3, lsl #2]
        K[14 + i * 16] = S5[g(x, 0xC)] ^ S6[g(x, 0xD)] ^ S7[g(x, 0x3)] ^ S8[g(x, 0x2)] ^ S7[g(x, 0x8)];
    cfe0:	e7983103 	ldr	r3, [r8, r3, lsl #2]
        K[12 + i * 16] = S5[g(x, 0x8)] ^ S6[g(x, 0x9)] ^ S7[g(x, 0x7)] ^ S8[g(x, 0x6)] ^ S5[g(x, 0x3)];
    cfe4:	e021100c 	eor	r1, r1, ip
    cfe8:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
        K[14 + i * 16] = S5[g(x, 0xC)] ^ S6[g(x, 0xD)] ^ S7[g(x, 0x3)] ^ S8[g(x, 0x2)] ^ S7[g(x, 0x8)];
    cfec:	e0222003 	eor	r2, r2, r3
    cff0:	e59d301c 	ldr	r3, [sp, #28]
        K[12 + i * 16] = S5[g(x, 0x8)] ^ S6[g(x, 0x9)] ^ S7[g(x, 0x7)] ^ S8[g(x, 0x6)] ^ S5[g(x, 0x3)];
    cff4:	e021100c 	eor	r1, r1, ip
    cff8:	e5851020 	str	r1, [r5, #32]
    return ((uint8_t *)key)[K_MAP[i]];
    cffc:	e283100c 	add	r1, r3, #12
        K[14 + i * 16] = S5[g(x, 0xC)] ^ S6[g(x, 0xD)] ^ S7[g(x, 0x3)] ^ S8[g(x, 0x2)] ^ S7[g(x, 0x8)];
    d000:	e5852028 	str	r2, [r5, #40]	; 0x28
        if(debug) {
    d004:	e283200f 	add	r2, r3, #15
    d008:	1a0001f4 	bne	d7e0 <run+0x1190>
    for (int i = 0; i < 2; ++i) {
    d00c:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
    d010:	e3530001 	cmp	r3, #1
    d014:	e59d301c 	ldr	r3, [sp, #28]
    d018:	e2833010 	add	r3, r3, #16
    d01c:	e58d301c 	str	r3, [sp, #28]
    d020:	e59d3018 	ldr	r3, [sp, #24]
    d024:	e2833040 	add	r3, r3, #64	; 0x40
    d028:	e58d3018 	str	r3, [sp, #24]
    d02c:	1a000146 	bne	d54c <run+0xefc>
    //     for(int i = 0; i < 32; i++) {
    //         printf("K[%2d]: %08X\n", i, K[i]);
    //     }
    // }

    uint32_t L[ROUND_COUNT + 1] = {0};
    d030:	e3a02040 	mov	r2, #64	; 0x40
    d034:	e3a01000 	mov	r1, #0
    d038:	e28d00cc 	add	r0, sp, #204	; 0xcc
    d03c:	eb0007ed 	bl	eff8 <memset>
    L[0] = data.msb;
    d040:	e59d306c 	ldr	r3, [sp, #108]	; 0x6c
    uint32_t R[ROUND_COUNT + 1] = {0};
    d044:	e3a02040 	mov	r2, #64	; 0x40
    d048:	e3a01000 	mov	r1, #0
    d04c:	e28d0e11 	add	r0, sp, #272	; 0x110
    L[0] = data.msb;
    d050:	e58d30c8 	str	r3, [sp, #200]	; 0xc8
    uint32_t R[ROUND_COUNT + 1] = {0};
    d054:	eb0007e7 	bl	eff8 <memset>
    R[0] = data.lsb;

    if(debug) printf("\n=== Starting Rounds ===\n");
    d058:	e59d31fc 	ldr	r3, [sp, #508]	; 0x1fc
    d05c:	e3530000 	cmp	r3, #0
    d060:	1a0001c1 	bne	d76c <run+0x111c>
    d064:	e59d2064 	ldr	r2, [sp, #100]	; 0x64
    d068:	e28d7f43 	add	r7, sp, #268	; 0x10c
    d06c:	e59f35f8 	ldr	r3, [pc, #1528]	; d66c <run+0x101c>
            printf("Third z-transform: ");
    d070:	e3a04001 	mov	r4, #1
    d074:	e59d5068 	ldr	r5, [sp, #104]	; 0x68
    d078:	e7923003 	ldr	r3, [r2, r3]
        L[i + 1] = R[i];
        R[i + 1] = L[i] ^ f;
        
        if(debug) {
            printf("Round %2d output:\n", i);
            printf("L[%2d] = R[%2d] = %08X\n", i+1, i, L[i+1]);
    d07c:	e59d6070 	ldr	r6, [sp, #112]	; 0x70
    d080:	e58d3020 	str	r3, [sp, #32]
    d084:	e59f35e4 	ldr	r3, [pc, #1508]	; d670 <run+0x1020>
    d088:	e7923003 	ldr	r3, [r2, r3]
    d08c:	e58d3024 	str	r3, [sp, #36]	; 0x24
    d090:	e59f35dc 	ldr	r3, [pc, #1500]	; d674 <run+0x1024>
    d094:	e7923003 	ldr	r3, [r2, r3]
    d098:	e58d3028 	str	r3, [sp, #40]	; 0x28
    d09c:	e59f35d4 	ldr	r3, [pc, #1492]	; d678 <run+0x1028>
    d0a0:	e7923003 	ldr	r3, [r2, r3]
    d0a4:	e58d7018 	str	r7, [sp, #24]
    d0a8:	e58d302c 	str	r3, [sp, #44]	; 0x2c
        switch (rIndex % 3) {
    d0ac:	e30a3aab 	movw	r3, #43691	; 0xaaab
    d0b0:	e34a3aaa 	movt	r3, #43690	; 0xaaaa
    d0b4:	e58d301c 	str	r3, [sp, #28]
            printf("Round %2d output:\n", i);
    d0b8:	e59f35bc 	ldr	r3, [pc, #1468]	; d67c <run+0x102c>
    d0bc:	e08f3003 	add	r3, pc, r3
    d0c0:	e58d3034 	str	r3, [sp, #52]	; 0x34
            printf("L[%2d] = R[%2d] = %08X\n", i+1, i, L[i+1]);
    d0c4:	e59f35b4 	ldr	r3, [pc, #1460]	; d680 <run+0x1030>
    d0c8:	e08f3003 	add	r3, pc, r3
    d0cc:	e58d3038 	str	r3, [sp, #56]	; 0x38
    d0d0:	ea000021 	b	d15c <run+0xb0c>
    return ((a) + b); // % MOD_2_32;
    d0d4:	e0899006 	add	r9, r9, r6
    return (x << s) | (x >> (32 - s));
    d0d8:	e26aa020 	rsb	sl, sl, #32
                f = sumMod2_32b(subtractMod2_32b(S1[Ia] ^ S2[Ib], S3[Ic]), S4[Id]);
    d0dc:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
    return (x << s) | (x >> (32 - s));
    d0e0:	e1a09a79 	ror	r9, r9, sl
                if(debug) printf("Split I: %02X %02X %02X %02X\n", Ia, Ib, Ic, Id);
    d0e4:	e7e73859 	ubfx	r3, r9, #16, #8
                f = sumMod2_32b(subtractMod2_32b(S1[Ia] ^ S2[Ib], S3[Ic]), S4[Id]);
    d0e8:	e59d1020 	ldr	r1, [sp, #32]
    d0ec:	e7923103 	ldr	r3, [r2, r3, lsl #2]
    *Ia = (I >> 24) & 0xFF;
    d0f0:	e1a02c29 	lsr	r2, r9, #24
                f = sumMod2_32b(subtractMod2_32b(S1[Ia] ^ S2[Ib], S3[Ic]), S4[Id]);
    d0f4:	e7912102 	ldr	r2, [r1, r2, lsl #2]
    return (MOD_2_32_MINUS_1 + a) - b + 1;
    d0f8:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
                f = sumMod2_32b(subtractMod2_32b(S1[Ia] ^ S2[Ib], S3[Ic]), S4[Id]);
    d0fc:	e0233002 	eor	r3, r3, r2
                if(debug) printf("Split I: %02X %02X %02X %02X\n", Ia, Ib, Ic, Id);
    d100:	e7e72459 	ubfx	r2, r9, #8, #8
    d104:	e6ef9079 	uxtb	r9, r9
    return (MOD_2_32_MINUS_1 + a) - b + 1;
    d108:	e7912102 	ldr	r2, [r1, r2, lsl #2]
    d10c:	e0433002 	sub	r3, r3, r2
    return ((a) + b); // % MOD_2_32;
    d110:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
    d114:	e7922109 	ldr	r2, [r2, r9, lsl #2]
    d118:	e0833002 	add	r3, r3, r2
        R[i + 1] = L[i] ^ f;
    d11c:	e5952000 	ldr	r2, [r5]
        L[i + 1] = R[i];
    d120:	e5856004 	str	r6, [r5, #4]
    d124:	e1a06004 	mov	r6, r4
        R[i + 1] = L[i] ^ f;
    d128:	e0233002 	eor	r3, r3, r2
    d12c:	e59d2018 	ldr	r2, [sp, #24]
    d130:	e5823004 	str	r3, [r2, #4]
    for (int i = 0; i < ROUND_COUNT; ++i) {
    d134:	e59d3018 	ldr	r3, [sp, #24]
    d138:	e2844001 	add	r4, r4, #1
    d13c:	e3540011 	cmp	r4, #17
    d140:	e2855004 	add	r5, r5, #4
    d144:	e2833004 	add	r3, r3, #4
    d148:	e58d3018 	str	r3, [sp, #24]
    d14c:	0a00012b 	beq	d600 <run+0xfb0>
                I = cyclicShift(Kmi ^ R[i], Kri);
    d150:	e28d3e1d 	add	r3, sp, #464	; 0x1d0
    d154:	e0836106 	add	r6, r3, r6, lsl #2
    d158:	e51660c4 	ldr	r6, [r6, #-196]	; 0xffffff3c
        int rIndex = reverse ? (ROUND_COUNT - 1 - i) : i;
    d15c:	e59d31f8 	ldr	r3, [sp, #504]	; 0x1f8
    d160:	e2448001 	sub	r8, r4, #1
    d164:	e3530000 	cmp	r3, #0
        if(debug) {
    d168:	e59d31fc 	ldr	r3, [sp, #508]	; 0x1fc
    d16c:	12647010 	rsbne	r7, r4, #16
    d170:	01a07008 	moveq	r7, r8
    d174:	e3530000 	cmp	r3, #0
        uint32_t Kmi = K[rIndex];
    d178:	e28d3e1d 	add	r3, sp, #464	; 0x1d0
    d17c:	e0833107 	add	r3, r3, r7, lsl #2
        uint8_t Kri = K[16 + rIndex] & 0x1F;
    d180:	e287b010 	add	fp, r7, #16
        uint32_t Kmi = K[rIndex];
    d184:	e5139080 	ldr	r9, [r3, #-128]	; 0xffffff80
        uint8_t Kri = K[16 + rIndex] & 0x1F;
    d188:	e28d3e1d 	add	r3, sp, #464	; 0x1d0
    d18c:	e083310b 	add	r3, r3, fp, lsl #2
    d190:	e5133080 	ldr	r3, [r3, #-128]	; 0xffffff80
    d194:	e203a01f 	and	sl, r3, #31
        if(debug) {
    d198:	1a00001e 	bne	d218 <run+0xbc8>
        switch (rIndex % 3) {
    d19c:	e59d301c 	ldr	r3, [sp, #28]
    d1a0:	e0832793 	umull	r2, r3, r3, r7
    d1a4:	e3a02003 	mov	r2, #3
    d1a8:	e1a030a3 	lsr	r3, r3, #1
    d1ac:	e0637392 	mls	r3, r2, r3, r7
    d1b0:	e3530001 	cmp	r3, #1
    d1b4:	0a000076 	beq	d394 <run+0xd44>
    d1b8:	e3530002 	cmp	r3, #2
    d1bc:	1affffc4 	bne	d0d4 <run+0xa84>
                if(debug) printf("Case 2: I = cyclicShift(subtractMod2_32b(%08X, %08X), %d) = %08X\n", 
    d1c0:	e59d31fc 	ldr	r3, [sp, #508]	; 0x1fc
    return (MOD_2_32_MINUS_1 + a) - b + 1;
    d1c4:	e0497006 	sub	r7, r9, r6
                if(debug) printf("Case 2: I = cyclicShift(subtractMod2_32b(%08X, %08X), %d) = %08X\n", 
    d1c8:	e3530000 	cmp	r3, #0
    return (x << s) | (x >> (32 - s));
    d1cc:	e26a3020 	rsb	r3, sl, #32
    d1d0:	e1a07377 	ror	r7, r7, r3
                if(debug) printf("Case 2: I = cyclicShift(subtractMod2_32b(%08X, %08X), %d) = %08X\n", 
    d1d4:	1a0000b0 	bne	d49c <run+0xe4c>
                if(debug) printf("Split I: %02X %02X %02X %02X\n", Ia, Ib, Ic, Id);
    d1d8:	e7e73857 	ubfx	r3, r7, #16, #8
    return ((a) + b); // % MOD_2_32;
    d1dc:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
    d1e0:	e59d1020 	ldr	r1, [sp, #32]
    d1e4:	e7923103 	ldr	r3, [r2, r3, lsl #2]
    *Ia = (I >> 24) & 0xFF;
    d1e8:	e1a02c27 	lsr	r2, r7, #24
    return ((a) + b); // % MOD_2_32;
    d1ec:	e7912102 	ldr	r2, [r1, r2, lsl #2]
                f = subtractMod2_32b(sumMod2_32b(S1[Ia], S2[Ib]) ^ S3[Ic], S4[Id]);
    d1f0:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
    return ((a) + b); // % MOD_2_32;
    d1f4:	e0833002 	add	r3, r3, r2
                if(debug) printf("Split I: %02X %02X %02X %02X\n", Ia, Ib, Ic, Id);
    d1f8:	e7e72457 	ubfx	r2, r7, #8, #8
    d1fc:	e6ef7077 	uxtb	r7, r7
                f = subtractMod2_32b(sumMod2_32b(S1[Ia], S2[Ib]) ^ S3[Ic], S4[Id]);
    d200:	e7912102 	ldr	r2, [r1, r2, lsl #2]
    d204:	e0233002 	eor	r3, r3, r2
    return (MOD_2_32_MINUS_1 + a) - b + 1;
    d208:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
    d20c:	e7922107 	ldr	r2, [r2, r7, lsl #2]
    d210:	e0433002 	sub	r3, r3, r2
                if(debug) {
    d214:	eaffffc0 	b	d11c <run+0xacc>
            printf("\nRound %2d:\n", i);
    d218:	e59f0464 	ldr	r0, [pc, #1124]	; d684 <run+0x1034>
    d21c:	e1a01008 	mov	r1, r8
    d220:	e58d3030 	str	r3, [sp, #48]	; 0x30
    d224:	e08f0000 	add	r0, pc, r0
    d228:	eb001075 	bl	11404 <tfp_printf>
            printf("Using K[%2d] = %08X, K[%2d] = %08X (shift: %d)\n", 
    d22c:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
    d230:	e1a01007 	mov	r1, r7
    d234:	e59f044c 	ldr	r0, [pc, #1100]	; d688 <run+0x1038>
    d238:	e1a02009 	mov	r2, r9
    d23c:	e88d0408 	stm	sp, {r3, sl}
    d240:	e08f0000 	add	r0, pc, r0
    d244:	e1a0300b 	mov	r3, fp
    d248:	eb00106d 	bl	11404 <tfp_printf>
            printf("Input L: %08X R: %08X\n", L[i], R[i]);
    d24c:	e59f0438 	ldr	r0, [pc, #1080]	; d68c <run+0x103c>
    d250:	e1a02006 	mov	r2, r6
    d254:	e5951000 	ldr	r1, [r5]
    d258:	e08f0000 	add	r0, pc, r0
    d25c:	eb001068 	bl	11404 <tfp_printf>
        switch (rIndex % 3) {
    d260:	e59d301c 	ldr	r3, [sp, #28]
    d264:	e0832793 	umull	r2, r3, r3, r7
    d268:	e3a02003 	mov	r2, #3
    d26c:	e1a030a3 	lsr	r3, r3, #1
    d270:	e0637392 	mls	r3, r2, r3, r7
    d274:	e3530001 	cmp	r3, #1
    d278:	0a000058 	beq	d3e0 <run+0xd90>
    d27c:	e3530002 	cmp	r3, #2
    d280:	0affffce 	beq	d1c0 <run+0xb70>
    return ((a) + b); // % MOD_2_32;
    d284:	e0897006 	add	r7, r9, r6
    return (x << s) | (x >> (32 - s));
    d288:	e26a3020 	rsb	r3, sl, #32
                if(debug) printf("Case 0: I = cyclicShift(sumMod2_32b(%08X, %08X), %d) = %08X\n", 
    d28c:	e59f03fc 	ldr	r0, [pc, #1020]	; d690 <run+0x1040>
    d290:	e1a01009 	mov	r1, r9
    return (x << s) | (x >> (32 - s));
    d294:	e1a07377 	ror	r7, r7, r3
                if(debug) printf("Case 0: I = cyclicShift(sumMod2_32b(%08X, %08X), %d) = %08X\n", 
    d298:	e1a02006 	mov	r2, r6
    d29c:	e08f0000 	add	r0, pc, r0
    d2a0:	e1a0300a 	mov	r3, sl
    d2a4:	e58d7000 	str	r7, [sp]
                if(debug) printf("Split I: %02X %02X %02X %02X\n", Ia, Ib, Ic, Id);
    d2a8:	e7e7a857 	ubfx	sl, r7, #16, #8
                if(debug) printf("Case 0: I = cyclicShift(sumMod2_32b(%08X, %08X), %d) = %08X\n", 
    d2ac:	eb001054 	bl	11404 <tfp_printf>
                if(debug) printf("Split I: %02X %02X %02X %02X\n", Ia, Ib, Ic, Id);
    d2b0:	e59f03dc 	ldr	r0, [pc, #988]	; d694 <run+0x1044>
    d2b4:	e1a0200a 	mov	r2, sl
    *Ia = (I >> 24) & 0xFF;
    d2b8:	e1a09c27 	lsr	r9, r7, #24
                if(debug) printf("Split I: %02X %02X %02X %02X\n", Ia, Ib, Ic, Id);
    d2bc:	e7e7b457 	ubfx	fp, r7, #8, #8
    d2c0:	e6ef7077 	uxtb	r7, r7
    d2c4:	e08f0000 	add	r0, pc, r0
    d2c8:	e1a0300b 	mov	r3, fp
    d2cc:	e58d7000 	str	r7, [sp]
    d2d0:	e1a01009 	mov	r1, r9
    d2d4:	eb00104a 	bl	11404 <tfp_printf>
                f = sumMod2_32b(subtractMod2_32b(S1[Ia] ^ S2[Ib], S3[Ic]), S4[Id]);
    d2d8:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
                    printf("S-box lookups: S1[%02X]=%08X S2[%02X]=%08X S3[%02X]=%08X S4[%02X]=%08X\n",
    d2dc:	e58d700c 	str	r7, [sp, #12]
                f = sumMod2_32b(subtractMod2_32b(S1[Ia] ^ S2[Ib], S3[Ic]), S4[Id]);
    d2e0:	e7930107 	ldr	r0, [r3, r7, lsl #2]
    d2e4:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
                    printf("S-box lookups: S1[%02X]=%08X S2[%02X]=%08X S3[%02X]=%08X S4[%02X]=%08X\n",
    d2e8:	e58d0010 	str	r0, [sp, #16]
                f = sumMod2_32b(subtractMod2_32b(S1[Ia] ^ S2[Ib], S3[Ic]), S4[Id]);
    d2ec:	e793c10b 	ldr	ip, [r3, fp, lsl #2]
    d2f0:	e59d3020 	ldr	r3, [sp, #32]
                    printf("S-box lookups: S1[%02X]=%08X S2[%02X]=%08X S3[%02X]=%08X S4[%02X]=%08X\n",
    d2f4:	e58db004 	str	fp, [sp, #4]
                f = sumMod2_32b(subtractMod2_32b(S1[Ia] ^ S2[Ib], S3[Ic]), S4[Id]);
    d2f8:	e7932109 	ldr	r2, [r3, r9, lsl #2]
    d2fc:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
                    printf("S-box lookups: S1[%02X]=%08X S2[%02X]=%08X S3[%02X]=%08X S4[%02X]=%08X\n",
    d300:	e58dc008 	str	ip, [sp, #8]
                f = sumMod2_32b(subtractMod2_32b(S1[Ia] ^ S2[Ib], S3[Ic]), S4[Id]);
    d304:	e793110a 	ldr	r1, [r3, sl, lsl #2]
                    printf("S-box lookups: S1[%02X]=%08X S2[%02X]=%08X S3[%02X]=%08X S4[%02X]=%08X\n",
    d308:	e1a0300a 	mov	r3, sl
                f = sumMod2_32b(subtractMod2_32b(S1[Ia] ^ S2[Ib], S3[Ic]), S4[Id]);
    d30c:	e0227001 	eor	r7, r2, r1
    return (MOD_2_32_MINUS_1 + a) - b + 1;
    d310:	e047700c 	sub	r7, r7, ip
    return ((a) + b); // % MOD_2_32;
    d314:	e0877000 	add	r7, r7, r0
                    printf("S-box lookups: S1[%02X]=%08X S2[%02X]=%08X S3[%02X]=%08X S4[%02X]=%08X\n",
    d318:	e59f0378 	ldr	r0, [pc, #888]	; d698 <run+0x1048>
    d31c:	e58d1000 	str	r1, [sp]
    d320:	e1a01009 	mov	r1, r9
    d324:	e08f0000 	add	r0, pc, r0
    d328:	eb001035 	bl	11404 <tfp_printf>
                    printf("f calculation: %08X\n", f);
    d32c:	e59f0368 	ldr	r0, [pc, #872]	; d69c <run+0x104c>
    d330:	e1a01007 	mov	r1, r7
    d334:	e08f0000 	add	r0, pc, r0
    d338:	eb001031 	bl	11404 <tfp_printf>
        R[i + 1] = L[i] ^ f;
    d33c:	e5959000 	ldr	r9, [r5]
            printf("Round %2d output:\n", i);
    d340:	e1a01008 	mov	r1, r8
        R[i + 1] = L[i] ^ f;
    d344:	e59d3018 	ldr	r3, [sp, #24]
    d348:	e027a009 	eor	sl, r7, r9
            printf("Round %2d output:\n", i);
    d34c:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
        L[i + 1] = R[i];
    d350:	e5856004 	str	r6, [r5, #4]
        R[i + 1] = L[i] ^ f;
    d354:	e583a004 	str	sl, [r3, #4]
            printf("Round %2d output:\n", i);
    d358:	eb001029 	bl	11404 <tfp_printf>
            printf("L[%2d] = R[%2d] = %08X\n", i+1, i, L[i+1]);
    d35c:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
    d360:	e1a03006 	mov	r3, r6
    d364:	e1a02008 	mov	r2, r8
    d368:	e1a01004 	mov	r1, r4
        L[i + 1] = R[i];
    d36c:	e1a06004 	mov	r6, r4
            printf("L[%2d] = R[%2d] = %08X\n", i+1, i, L[i+1]);
    d370:	eb001023 	bl	11404 <tfp_printf>
            printf("R[%2d] = L[%2d] ^ f = %08X ^ %08X = %08X\n", 
    d374:	e59f0324 	ldr	r0, [pc, #804]	; d6a0 <run+0x1050>
    d378:	e1a03009 	mov	r3, r9
    d37c:	e1a02008 	mov	r2, r8
    d380:	e1a01004 	mov	r1, r4
    d384:	e08f0000 	add	r0, pc, r0
    d388:	e88d0480 	stm	sp, {r7, sl}
    d38c:	eb00101c 	bl	11404 <tfp_printf>
    d390:	eaffff67 	b	d134 <run+0xae4>
                I = cyclicShift(Kmi ^ R[i], Kri);
    d394:	e0299006 	eor	r9, r9, r6
    return (x << s) | (x >> (32 - s));
    d398:	e26aa020 	rsb	sl, sl, #32
    return ((a) + b); // % MOD_2_32;
    d39c:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
    return (x << s) | (x >> (32 - s));
    d3a0:	e1a09a79 	ror	r9, r9, sl
                if(debug) printf("Split I: %02X %02X %02X %02X\n", Ia, Ib, Ic, Id);
    d3a4:	e7e73459 	ubfx	r3, r9, #8, #8
    return ((a) + b); // % MOD_2_32;
    d3a8:	e59d1020 	ldr	r1, [sp, #32]
    d3ac:	e7923103 	ldr	r3, [r2, r3, lsl #2]
    *Ia = (I >> 24) & 0xFF;
    d3b0:	e1a02c29 	lsr	r2, r9, #24
    return ((a) + b); // % MOD_2_32;
    d3b4:	e7912102 	ldr	r2, [r1, r2, lsl #2]
    d3b8:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
    d3bc:	e0833002 	add	r3, r3, r2
                if(debug) printf("Split I: %02X %02X %02X %02X\n", Ia, Ib, Ic, Id);
    d3c0:	e7e72859 	ubfx	r2, r9, #16, #8
    d3c4:	e6ef9079 	uxtb	r9, r9
    return ((a) + b); // % MOD_2_32;
    d3c8:	e7912102 	ldr	r2, [r1, r2, lsl #2]
    d3cc:	e0433002 	sub	r3, r3, r2
                f = sumMod2_32b(subtractMod2_32b(S1[Ia], S2[Ib]), S3[Ic]) ^ S4[Id];
    d3d0:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
    d3d4:	e7922109 	ldr	r2, [r2, r9, lsl #2]
    d3d8:	e0233002 	eor	r3, r3, r2
                if(debug) {
    d3dc:	eaffff4e 	b	d11c <run+0xacc>
                I = cyclicShift(Kmi ^ R[i], Kri);
    d3e0:	e0297006 	eor	r7, r9, r6
    return (x << s) | (x >> (32 - s));
    d3e4:	e26a3020 	rsb	r3, sl, #32
                if(debug) printf("Case 1: I = cyclicShift(%08X ^ %08X, %d) = %08X\n", 
    d3e8:	e59f02b4 	ldr	r0, [pc, #692]	; d6a4 <run+0x1054>
    d3ec:	e1a01009 	mov	r1, r9
    return (x << s) | (x >> (32 - s));
    d3f0:	e1a07377 	ror	r7, r7, r3
                if(debug) printf("Case 1: I = cyclicShift(%08X ^ %08X, %d) = %08X\n", 
    d3f4:	e1a02006 	mov	r2, r6
    d3f8:	e58d7000 	str	r7, [sp]
    d3fc:	e1a0300a 	mov	r3, sl
    d400:	e08f0000 	add	r0, pc, r0
                if(debug) printf("Split I: %02X %02X %02X %02X\n", Ia, Ib, Ic, Id);
    d404:	e7e7a857 	ubfx	sl, r7, #16, #8
                if(debug) printf("Case 1: I = cyclicShift(%08X ^ %08X, %d) = %08X\n", 
    d408:	eb000ffd 	bl	11404 <tfp_printf>
                if(debug) printf("Split I: %02X %02X %02X %02X\n", Ia, Ib, Ic, Id);
    d40c:	e59f0294 	ldr	r0, [pc, #660]	; d6a8 <run+0x1058>
    d410:	e1a0200a 	mov	r2, sl
    *Ia = (I >> 24) & 0xFF;
    d414:	e1a09c27 	lsr	r9, r7, #24
                if(debug) printf("Split I: %02X %02X %02X %02X\n", Ia, Ib, Ic, Id);
    d418:	e7e7b457 	ubfx	fp, r7, #8, #8
    d41c:	e6ef7077 	uxtb	r7, r7
    d420:	e58d7000 	str	r7, [sp]
    d424:	e1a0300b 	mov	r3, fp
    d428:	e08f0000 	add	r0, pc, r0
    d42c:	e1a01009 	mov	r1, r9
    d430:	eb000ff3 	bl	11404 <tfp_printf>
                f = sumMod2_32b(subtractMod2_32b(S1[Ia], S2[Ib]), S3[Ic]) ^ S4[Id];
    d434:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
    d438:	e59d2020 	ldr	r2, [sp, #32]
    d43c:	e7931107 	ldr	r1, [r3, r7, lsl #2]
    d440:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    d444:	e7922109 	ldr	r2, [r2, r9, lsl #2]
    d448:	e793310b 	ldr	r3, [r3, fp, lsl #2]
                    printf("S-box lookups: S1[%02X]=%08X S2[%02X]=%08X S3[%02X]=%08X S4[%02X]=%08X\n",
    d44c:	e58d700c 	str	r7, [sp, #12]
    d450:	e58d3008 	str	r3, [sp, #8]
    return ((a) + b); // % MOD_2_32;
    d454:	e0827003 	add	r7, r2, r3
                f = sumMod2_32b(subtractMod2_32b(S1[Ia], S2[Ib]), S3[Ic]) ^ S4[Id];
    d458:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
                    printf("S-box lookups: S1[%02X]=%08X S2[%02X]=%08X S3[%02X]=%08X S4[%02X]=%08X\n",
    d45c:	e58d1010 	str	r1, [sp, #16]
                f = sumMod2_32b(subtractMod2_32b(S1[Ia], S2[Ib]), S3[Ic]) ^ S4[Id];
    d460:	e793010a 	ldr	r0, [r3, sl, lsl #2]
                    printf("S-box lookups: S1[%02X]=%08X S2[%02X]=%08X S3[%02X]=%08X S4[%02X]=%08X\n",
    d464:	e1a0300a 	mov	r3, sl
    d468:	e58db004 	str	fp, [sp, #4]
    d46c:	e58d0000 	str	r0, [sp]
    return ((a) + b); // % MOD_2_32;
    d470:	e0477000 	sub	r7, r7, r0
                    printf("S-box lookups: S1[%02X]=%08X S2[%02X]=%08X S3[%02X]=%08X S4[%02X]=%08X\n",
    d474:	e59f0230 	ldr	r0, [pc, #560]	; d6ac <run+0x105c>
                f = sumMod2_32b(subtractMod2_32b(S1[Ia], S2[Ib]), S3[Ic]) ^ S4[Id];
    d478:	e0277001 	eor	r7, r7, r1
                    printf("S-box lookups: S1[%02X]=%08X S2[%02X]=%08X S3[%02X]=%08X S4[%02X]=%08X\n",
    d47c:	e1a01009 	mov	r1, r9
    d480:	e08f0000 	add	r0, pc, r0
    d484:	eb000fde 	bl	11404 <tfp_printf>
                    printf("f calculation: %08X\n", f);
    d488:	e59f0220 	ldr	r0, [pc, #544]	; d6b0 <run+0x1060>
    d48c:	e1a01007 	mov	r1, r7
    d490:	e08f0000 	add	r0, pc, r0
    d494:	eb000fda 	bl	11404 <tfp_printf>
    d498:	eaffffa7 	b	d33c <run+0xcec>
                if(debug) printf("Case 2: I = cyclicShift(subtractMod2_32b(%08X, %08X), %d) = %08X\n", 
    d49c:	e59f0210 	ldr	r0, [pc, #528]	; d6b4 <run+0x1064>
    d4a0:	e1a0300a 	mov	r3, sl
    d4a4:	e58d7000 	str	r7, [sp]
    d4a8:	e1a01009 	mov	r1, r9
    d4ac:	e08f0000 	add	r0, pc, r0
    d4b0:	e1a02006 	mov	r2, r6
                if(debug) printf("Split I: %02X %02X %02X %02X\n", Ia, Ib, Ic, Id);
    d4b4:	e7e7a857 	ubfx	sl, r7, #16, #8
                if(debug) printf("Case 2: I = cyclicShift(subtractMod2_32b(%08X, %08X), %d) = %08X\n", 
    d4b8:	eb000fd1 	bl	11404 <tfp_printf>
                if(debug) printf("Split I: %02X %02X %02X %02X\n", Ia, Ib, Ic, Id);
    d4bc:	e59f01f4 	ldr	r0, [pc, #500]	; d6b8 <run+0x1068>
    d4c0:	e1a0200a 	mov	r2, sl
    *Ia = (I >> 24) & 0xFF;
    d4c4:	e1a09c27 	lsr	r9, r7, #24
                if(debug) printf("Split I: %02X %02X %02X %02X\n", Ia, Ib, Ic, Id);
    d4c8:	e7e7b457 	ubfx	fp, r7, #8, #8
    d4cc:	e6ef7077 	uxtb	r7, r7
    d4d0:	e58d7000 	str	r7, [sp]
    d4d4:	e1a0300b 	mov	r3, fp
    d4d8:	e08f0000 	add	r0, pc, r0
    d4dc:	e1a01009 	mov	r1, r9
    d4e0:	eb000fc7 	bl	11404 <tfp_printf>
                f = subtractMod2_32b(sumMod2_32b(S1[Ia], S2[Ib]) ^ S3[Ic], S4[Id]);
    d4e4:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
                    printf("S-box lookups: S1[%02X]=%08X S2[%02X]=%08X S3[%02X]=%08X S4[%02X]=%08X\n",
    d4e8:	e58d700c 	str	r7, [sp, #12]
                f = subtractMod2_32b(sumMod2_32b(S1[Ia], S2[Ib]) ^ S3[Ic], S4[Id]);
    d4ec:	e7930107 	ldr	r0, [r3, r7, lsl #2]
    d4f0:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
                    printf("S-box lookups: S1[%02X]=%08X S2[%02X]=%08X S3[%02X]=%08X S4[%02X]=%08X\n",
    d4f4:	e58d0010 	str	r0, [sp, #16]
                f = subtractMod2_32b(sumMod2_32b(S1[Ia], S2[Ib]) ^ S3[Ic], S4[Id]);
    d4f8:	e793c10b 	ldr	ip, [r3, fp, lsl #2]
    d4fc:	e59d3020 	ldr	r3, [sp, #32]
                    printf("S-box lookups: S1[%02X]=%08X S2[%02X]=%08X S3[%02X]=%08X S4[%02X]=%08X\n",
    d500:	e58db004 	str	fp, [sp, #4]
                f = subtractMod2_32b(sumMod2_32b(S1[Ia], S2[Ib]) ^ S3[Ic], S4[Id]);
    d504:	e7932109 	ldr	r2, [r3, r9, lsl #2]
    d508:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
                    printf("S-box lookups: S1[%02X]=%08X S2[%02X]=%08X S3[%02X]=%08X S4[%02X]=%08X\n",
    d50c:	e58dc008 	str	ip, [sp, #8]
                f = subtractMod2_32b(sumMod2_32b(S1[Ia], S2[Ib]) ^ S3[Ic], S4[Id]);
    d510:	e793110a 	ldr	r1, [r3, sl, lsl #2]
                    printf("S-box lookups: S1[%02X]=%08X S2[%02X]=%08X S3[%02X]=%08X S4[%02X]=%08X\n",
    d514:	e1a0300a 	mov	r3, sl
    return ((a) + b); // % MOD_2_32;
    d518:	e0817002 	add	r7, r1, r2
                f = subtractMod2_32b(sumMod2_32b(S1[Ia], S2[Ib]) ^ S3[Ic], S4[Id]);
    d51c:	e027700c 	eor	r7, r7, ip
    return (MOD_2_32_MINUS_1 + a) - b + 1;
    d520:	e0477000 	sub	r7, r7, r0
                    printf("S-box lookups: S1[%02X]=%08X S2[%02X]=%08X S3[%02X]=%08X S4[%02X]=%08X\n",
    d524:	e59f0190 	ldr	r0, [pc, #400]	; d6bc <run+0x106c>
    d528:	e58d1000 	str	r1, [sp]
    d52c:	e1a01009 	mov	r1, r9
    d530:	e08f0000 	add	r0, pc, r0
    d534:	eb000fb2 	bl	11404 <tfp_printf>
                    printf("f calculation: %08X\n", f);
    d538:	e59f0180 	ldr	r0, [pc, #384]	; d6c0 <run+0x1070>
    d53c:	e1a01007 	mov	r1, r7
    d540:	e08f0000 	add	r0, pc, r0
    d544:	eb000fae 	bl	11404 <tfp_printf>
    d548:	eaffff7b 	b	d33c <run+0xcec>
    d54c:	e3a03001 	mov	r3, #1
    d550:	e58d3038 	str	r3, [sp, #56]	; 0x38
        if(debug) printf("\n-- Key Schedule Round %d --\n", i);
    d554:	e59d31fc 	ldr	r3, [sp, #508]	; 0x1fc
    d558:	e3530000 	cmp	r3, #0
    d55c:	0afffc7b 	beq	c750 <run+0x100>
    d560:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
    d564:	e59d007c 	ldr	r0, [sp, #124]	; 0x7c
            for(int j = 0; j < 4; j++) printf("%08X ", x[j]);
    d568:	e59f4154 	ldr	r4, [pc, #340]	; d6c4 <run+0x1074>
        if(debug) printf("\n-- Key Schedule Round %d --\n", i);
    d56c:	eb000fa4 	bl	11404 <tfp_printf>
            printf("Pre-transform x: ");
    d570:	e59f0150 	ldr	r0, [pc, #336]	; d6c8 <run+0x1078>
    d574:	e59d5074 	ldr	r5, [sp, #116]	; 0x74
    d578:	e08f0000 	add	r0, pc, r0
            for(int j = 0; j < 4; j++) printf("%08X ", x[j]);
    d57c:	e08f4004 	add	r4, pc, r4
            printf("Pre-transform x: ");
    d580:	eb000f9f 	bl	11404 <tfp_printf>
    d584:	e59d6078 	ldr	r6, [sp, #120]	; 0x78
            for(int j = 0; j < 4; j++) printf("%08X ", x[j]);
    d588:	e4951004 	ldr	r1, [r5], #4
    d58c:	e1a00004 	mov	r0, r4
    d590:	eb000f9b 	bl	11404 <tfp_printf>
    d594:	e1560005 	cmp	r6, r5
    d598:	1afffffa 	bne	d588 <run+0xf38>
            printf("\n");
    d59c:	e59f0128 	ldr	r0, [pc, #296]	; d6cc <run+0x107c>
            for(int j = 0x8; j <= 0xF; j++) printf("%02X ", g(x, j));
    d5a0:	e59f4128 	ldr	r4, [pc, #296]	; d6d0 <run+0x1080>
            printf("\n");
    d5a4:	e08f0000 	add	r0, pc, r0
            for(int j = 0x8; j <= 0xF; j++) printf("%02X ", g(x, j));
    d5a8:	e08f4004 	add	r4, pc, r4
            printf("\n");
    d5ac:	eb000f94 	bl	11404 <tfp_printf>
            printf("g(x) values: ");
    d5b0:	e59f011c 	ldr	r0, [pc, #284]	; d6d4 <run+0x1084>
    d5b4:	e08f0000 	add	r0, pc, r0
    d5b8:	eb000f91 	bl	11404 <tfp_printf>
            for(int j = 0x8; j <= 0xF; j++) printf("%02X ", g(x, j));
    d5bc:	e59d3080 	ldr	r3, [sp, #128]	; 0x80
            printf("g(x) values: ");
    d5c0:	e59d6084 	ldr	r6, [sp, #132]	; 0x84
    d5c4:	e2835008 	add	r5, r3, #8
    d5c8:	e3a0300b 	mov	r3, #11
    d5cc:	ea000000 	b	d5d4 <run+0xf84>
    return ((uint8_t *)key)[K_MAP[i]];
    d5d0:	e5f53001 	ldrb	r3, [r5, #1]!
    d5d4:	e2833e1d 	add	r3, r3, #464	; 0x1d0
            for(int j = 0x8; j <= 0xF; j++) printf("%02X ", g(x, j));
    d5d8:	e1a00004 	mov	r0, r4
    return ((uint8_t *)key)[K_MAP[i]];
    d5dc:	e08d3003 	add	r3, sp, r3
            for(int j = 0x8; j <= 0xF; j++) printf("%02X ", g(x, j));
    d5e0:	e5531128 	ldrb	r1, [r3, #-296]	; 0xfffffed8
    d5e4:	eb000f86 	bl	11404 <tfp_printf>
    d5e8:	e1560005 	cmp	r6, r5
    d5ec:	1afffff7 	bne	d5d0 <run+0xf80>
            printf("\n");
    d5f0:	e59f00e0 	ldr	r0, [pc, #224]	; d6d8 <run+0x1088>
    d5f4:	e08f0000 	add	r0, pc, r0
    d5f8:	eb000f81 	bl	11404 <tfp_printf>
    d5fc:	eafffc53 	b	c750 <run+0x100>
    }

    data.msb = R[ROUND_COUNT];
    data.lsb = L[ROUND_COUNT];

    if(debug) {
    d600:	e59d31fc 	ldr	r3, [sp, #508]	; 0x1fc
    data.msb = R[ROUND_COUNT];
    d604:	e59d514c 	ldr	r5, [sp, #332]	; 0x14c
    data.lsb = L[ROUND_COUNT];
    d608:	e59d4108 	ldr	r4, [sp, #264]	; 0x108
    if(debug) {
    d60c:	e3530000 	cmp	r3, #0
    d610:	1a000005 	bne	d62c <run+0xfdc>
        printf("\n=== Final Output ===\n");
        printf("MSB: %08X LSB: %08X\n", data.msb, data.lsb);
    }

    return data;
    d614:	e59d3060 	ldr	r3, [sp, #96]	; 0x60
    d618:	e5835000 	str	r5, [r3]
}
    d61c:	e1a00003 	mov	r0, r3
    return data;
    d620:	e5834004 	str	r4, [r3, #4]
}
    d624:	e28ddf75 	add	sp, sp, #468	; 0x1d4
    d628:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        printf("\n=== Final Output ===\n");
    d62c:	e59f00a8 	ldr	r0, [pc, #168]	; d6dc <run+0x108c>
    d630:	e08f0000 	add	r0, pc, r0
    d634:	eb000f72 	bl	11404 <tfp_printf>
        printf("MSB: %08X LSB: %08X\n", data.msb, data.lsb);
    d638:	e59f00a0 	ldr	r0, [pc, #160]	; d6e0 <run+0x1090>
    d63c:	e1a02004 	mov	r2, r4
    d640:	e1a01005 	mov	r1, r5
    d644:	e08f0000 	add	r0, pc, r0
    d648:	eb000f6d 	bl	11404 <tfp_printf>
    d64c:	eafffff0 	b	d614 <run+0xfc4>
    d650:	0002f354 	.word	0x0002f354
    d654:	000077a4 	.word	0x000077a4
    d658:	0000abd4 	.word	0x0000abd4
    d65c:	0000004c 	.word	0x0000004c
    d660:	00000014 	.word	0x00000014
    d664:	00000028 	.word	0x00000028
    d668:	0000000c 	.word	0x0000000c
    d66c:	00000024 	.word	0x00000024
    d670:	00000048 	.word	0x00000048
    d674:	00000000 	.word	0x00000000
    d678:	00000040 	.word	0x00000040
    d67c:	0000a434 	.word	0x0000a434
    d680:	0000a43c 	.word	0x0000a43c
    d684:	0000a180 	.word	0x0000a180
    d688:	0000a174 	.word	0x0000a174
    d68c:	0000a18c 	.word	0x0000a18c
    d690:	0000a2ac 	.word	0x0000a2ac
    d694:	0000a17c 	.word	0x0000a17c
    d698:	0000a13c 	.word	0x0000a13c
    d69c:	0000a174 	.word	0x0000a174
    d6a0:	0000a198 	.word	0x0000a198
    d6a4:	0000a188 	.word	0x0000a188
    d6a8:	0000a018 	.word	0x0000a018
    d6ac:	00009fe0 	.word	0x00009fe0
    d6b0:	0000a018 	.word	0x0000a018
    d6b4:	00009f50 	.word	0x00009f50
    d6b8:	00009f68 	.word	0x00009f68
    d6bc:	00009f30 	.word	0x00009f30
    d6c0:	00009f68 	.word	0x00009f68
    d6c4:	00009d6c 	.word	0x00009d6c
    d6c8:	00009d5c 	.word	0x00009d5c
    d6cc:	00009c8c 	.word	0x00009c8c
    d6d0:	00009d58 	.word	0x00009d58
    d6d4:	00009d3c 	.word	0x00009d3c
    d6d8:	00009c3c 	.word	0x00009c3c
    d6dc:	00009e90 	.word	0x00009e90
    d6e0:	00009e94 	.word	0x00009e94
    d6e4:	00009c18 	.word	0x00009c18
    d6e8:	00009ac0 	.word	0x00009ac0
    d6ec:	00009ae4 	.word	0x00009ae4
    d6f0:	00009acc 	.word	0x00009acc
    d6f4:	00009abc 	.word	0x00009abc
    d6f8:	00009acc 	.word	0x00009acc
    d6fc:	00009b34 	.word	0x00009b34
    d700:	00009afc 	.word	0x00009afc
    d704:	00009a18 	.word	0x00009a18
    d708:	00009ad8 	.word	0x00009ad8
    d70c:	00009ab4 	.word	0x00009ab4
    d710:	0000999c 	.word	0x0000999c
    d714:	00009a84 	.word	0x00009a84
    d718:	00009a24 	.word	0x00009a24
    d71c:	00009944 	.word	0x00009944
    d720:	000099e4 	.word	0x000099e4
    d724:	000099ac 	.word	0x000099ac
    d728:	000098bc 	.word	0x000098bc
    d72c:	000064f4 	.word	0x000064f4
    d730:	0000999c 	.word	0x0000999c
    d734:	00009970 	.word	0x00009970
    d738:	00009858 	.word	0x00009858
    d73c:	00009984 	.word	0x00009984
    d740:	000098f8 	.word	0x000098f8
    d744:	00009818 	.word	0x00009818
    d748:	000098ac 	.word	0x000098ac
    d74c:	00009874 	.word	0x00009874
    d750:	00009780 	.word	0x00009780
    d754:	00009894 	.word	0x00009894
    d758:	0000981c 	.word	0x0000981c
    d75c:	00009704 	.word	0x00009704
    d760:	000097c0 	.word	0x000097c0
    d764:	00009788 	.word	0x00009788
    d768:	000096a4 	.word	0x000096a4
    if(debug) printf("\n=== Starting Rounds ===\n");
    d76c:	e51f0090 	ldr	r0, [pc, #-144]	; d6e4 <run+0x1094>
    d770:	e08f0000 	add	r0, pc, r0
    d774:	eb000f22 	bl	11404 <tfp_printf>
    d778:	eafffe39 	b	d064 <run+0xa14>
        printf("\n=== Starting run() ===\n");
    d77c:	e51f009c 	ldr	r0, [pc, #-156]	; d6e8 <run+0x1098>
    d780:	e2446004 	sub	r6, r4, #4
            printf("%08X", key[i]);
    d784:	e51f50a0 	ldr	r5, [pc, #-160]	; d6ec <run+0x109c>
    d788:	e284400c 	add	r4, r4, #12
        printf("\n=== Starting run() ===\n");
    d78c:	e08f0000 	add	r0, pc, r0
            printf("%08X", key[i]);
    d790:	e08f5005 	add	r5, pc, r5
        printf("\n=== Starting run() ===\n");
    d794:	eb000f1a 	bl	11404 <tfp_printf>
        printf("Input Key: ");
    d798:	e51f00b0 	ldr	r0, [pc, #-176]	; d6f0 <run+0x10a0>
    d79c:	e08f0000 	add	r0, pc, r0
    d7a0:	eb000f17 	bl	11404 <tfp_printf>
            printf("%08X", key[i]);
    d7a4:	e5b61004 	ldr	r1, [r6, #4]!
    d7a8:	e1a00005 	mov	r0, r5
    d7ac:	eb000f14 	bl	11404 <tfp_printf>
        for (int i = 0; i < 4; i++) {
    d7b0:	e1540006 	cmp	r4, r6
    d7b4:	1afffffa 	bne	d7a4 <run+0x1154>
        printf("\nInput Block - MSB: %08X LSB: %08X\n", data.msb, data.lsb);
    d7b8:	e51f00cc 	ldr	r0, [pc, #-204]	; d6f4 <run+0x10a4>
    d7bc:	e59d106c 	ldr	r1, [sp, #108]	; 0x6c
    d7c0:	e08f0000 	add	r0, pc, r0
    d7c4:	e59d2070 	ldr	r2, [sp, #112]	; 0x70
    d7c8:	eb000f0d 	bl	11404 <tfp_printf>
        printf("Reverse mode: %d\n", reverse);
    d7cc:	e51f00dc 	ldr	r0, [pc, #-220]	; d6f8 <run+0x10a8>
    d7d0:	e59d11f8 	ldr	r1, [sp, #504]	; 0x1f8
    d7d4:	e08f0000 	add	r0, pc, r0
    d7d8:	eb000f09 	bl	11404 <tfp_printf>
    d7dc:	eafffbb9 	b	c6c8 <run+0x78>
            printf("K[%d-%d]: ", i*16+12, i*16+15);
    d7e0:	e51f00ec 	ldr	r0, [pc, #-236]	; d6fc <run+0x10ac>
            for(int j = 12; j < 16; j++) printf("%08X ", K[j + i*16]);
    d7e4:	e51f50ec 	ldr	r5, [pc, #-236]	; d700 <run+0x10b0>
            printf("K[%d-%d]: ", i*16+12, i*16+15);
    d7e8:	e08f0000 	add	r0, pc, r0
            for(int j = 12; j < 16; j++) printf("%08X ", K[j + i*16]);
    d7ec:	e08f5005 	add	r5, pc, r5
            printf("K[%d-%d]: ", i*16+12, i*16+15);
    d7f0:	eb000f03 	bl	11404 <tfp_printf>
            for(int j = 12; j < 16; j++) printf("%08X ", K[j + i*16]);
    d7f4:	e59d3018 	ldr	r3, [sp, #24]
    d7f8:	e2836020 	add	r6, r3, #32
    d7fc:	e2834030 	add	r4, r3, #48	; 0x30
    d800:	e4961004 	ldr	r1, [r6], #4
    d804:	e1a00005 	mov	r0, r5
    d808:	eb000efd 	bl	11404 <tfp_printf>
    d80c:	e1540006 	cmp	r4, r6
    d810:	1afffffa 	bne	d800 <run+0x11b0>
            printf("\n");
    d814:	e51f0118 	ldr	r0, [pc, #-280]	; d704 <run+0x10b4>
    d818:	e08f0000 	add	r0, pc, r0
    d81c:	eb000ef8 	bl	11404 <tfp_printf>
    d820:	eafffdf9 	b	d00c <run+0x9bc>
            printf("Post z-transform: ");
    d824:	e58d3094 	str	r3, [sp, #148]	; 0x94
    d828:	e51f0128 	ldr	r0, [pc, #-296]	; d708 <run+0x10b8>
            for(int j = 0; j < 4; j++) printf("%08X ", z[j]);
    d82c:	e51f3128 	ldr	r3, [pc, #-296]	; d70c <run+0x10bc>
            printf("Post z-transform: ");
    d830:	e08f0000 	add	r0, pc, r0
            for(int j = 0; j < 4; j++) printf("%08X ", z[j]);
    d834:	e08f3003 	add	r3, pc, r3
    d838:	e58d2098 	str	r2, [sp, #152]	; 0x98
    d83c:	e58d3088 	str	r3, [sp, #136]	; 0x88
            printf("Post z-transform: ");
    d840:	eb000eef 	bl	11404 <tfp_printf>
    d844:	e58d5090 	str	r5, [sp, #144]	; 0x90
    d848:	e28d00bc 	add	r0, sp, #188	; 0xbc
    d84c:	e59d5088 	ldr	r5, [sp, #136]	; 0x88
    d850:	e1a01006 	mov	r1, r6
    d854:	e58d608c 	str	r6, [sp, #140]	; 0x8c
    d858:	e59d6068 	ldr	r6, [sp, #104]	; 0x68
    d85c:	e58d409c 	str	r4, [sp, #156]	; 0x9c
    d860:	e1a04000 	mov	r4, r0
            for(int j = 0; j < 4; j++) printf("%08X ", z[j]);
    d864:	e1a00005 	mov	r0, r5
    d868:	eb000ee5 	bl	11404 <tfp_printf>
    d86c:	e1560004 	cmp	r6, r4
    d870:	0a000004 	beq	d888 <run+0x1238>
    d874:	e4941004 	ldr	r1, [r4], #4
    d878:	e1a00005 	mov	r0, r5
    d87c:	eb000ee0 	bl	11404 <tfp_printf>
    d880:	e1560004 	cmp	r6, r4
    d884:	1afffffa 	bne	d874 <run+0x1224>
            printf("\n");
    d888:	e51f0180 	ldr	r0, [pc, #-384]	; d710 <run+0x10c0>
    d88c:	e59d3094 	ldr	r3, [sp, #148]	; 0x94
    d890:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
    d894:	e08f0000 	add	r0, pc, r0
    d898:	e59d608c 	ldr	r6, [sp, #140]	; 0x8c
    d89c:	e58d2088 	str	r2, [sp, #136]	; 0x88
    d8a0:	e58d308c 	str	r3, [sp, #140]	; 0x8c
    d8a4:	e59d5090 	ldr	r5, [sp, #144]	; 0x90
    d8a8:	e59d409c 	ldr	r4, [sp, #156]	; 0x9c
    d8ac:	eb000ed4 	bl	11404 <tfp_printf>
    d8b0:	e1cd28d8 	ldrd	r2, [sp, #136]	; 0x88
    d8b4:	eafffbfd 	b	c8b0 <run+0x260>
            printf("Second x-transform: ");
    d8b8:	e51f01ac 	ldr	r0, [pc, #-428]	; d714 <run+0x10c4>
            for(int j = 0; j < 4; j++) printf("%08X ", x[j]);
    d8bc:	e51f41ac 	ldr	r4, [pc, #-428]	; d718 <run+0x10c8>
            printf("Second x-transform: ");
    d8c0:	e08f0000 	add	r0, pc, r0
            for(int j = 0; j < 4; j++) printf("%08X ", x[j]);
    d8c4:	e08f4004 	add	r4, pc, r4
            printf("Second x-transform: ");
    d8c8:	eb000ecd 	bl	11404 <tfp_printf>
            for(int j = 0; j < 4; j++) printf("%08X ", x[j]);
    d8cc:	e59d5074 	ldr	r5, [sp, #116]	; 0x74
    d8d0:	e59d6078 	ldr	r6, [sp, #120]	; 0x78
    d8d4:	e4951004 	ldr	r1, [r5], #4
    d8d8:	e1a00004 	mov	r0, r4
    d8dc:	eb000ec8 	bl	11404 <tfp_printf>
    d8e0:	e1560005 	cmp	r6, r5
    d8e4:	1afffffa 	bne	d8d4 <run+0x1284>
            printf("\n");
    d8e8:	e51f01d4 	ldr	r0, [pc, #-468]	; d71c <run+0x10cc>
    d8ec:	e08f0000 	add	r0, pc, r0
    d8f0:	eb000ec3 	bl	11404 <tfp_printf>
        K[4 + i * 16] = S5[g(x, 0x3)] ^ S6[g(x, 0x2)] ^ S7[g(x, 0xC)] ^ S8[g(x, 0xD)] ^ S5[g(x, 0x8)];
    d8f4:	e5dd30a9 	ldrb	r3, [sp, #169]	; 0xa9
        K[5 + i * 16] = S5[g(x, 0x1)] ^ S6[g(x, 0x0)] ^ S7[g(x, 0xE)] ^ S8[g(x, 0xF)] ^ S6[g(x, 0xD)];
    d8f8:	e5ddc0aa 	ldrb	ip, [sp, #170]	; 0xaa
        K[4 + i * 16] = S5[g(x, 0x3)] ^ S6[g(x, 0x2)] ^ S7[g(x, 0xC)] ^ S8[g(x, 0xD)] ^ S5[g(x, 0x8)];
    d8fc:	e7993103 	ldr	r3, [r9, r3, lsl #2]
        K[5 + i * 16] = S5[g(x, 0x1)] ^ S6[g(x, 0x0)] ^ S7[g(x, 0xE)] ^ S8[g(x, 0xF)] ^ S6[g(x, 0xD)];
    d900:	e5dd00ab 	ldrb	r0, [sp, #171]	; 0xab
        K[4 + i * 16] = S5[g(x, 0x3)] ^ S6[g(x, 0x2)] ^ S7[g(x, 0xC)] ^ S8[g(x, 0xD)] ^ S5[g(x, 0x8)];
    d904:	e58d3024 	str	r3, [sp, #36]	; 0x24
        K[6 + i * 16] = S5[g(x, 0x7)] ^ S6[g(x, 0x6)] ^ S7[g(x, 0x8)] ^ S8[g(x, 0x9)] ^ S7[g(x, 0x3)];
    d908:	e5dd30ad 	ldrb	r3, [sp, #173]	; 0xad
    d90c:	e5dde0b2 	ldrb	lr, [sp, #178]	; 0xb2
    d910:	e7993103 	ldr	r3, [r9, r3, lsl #2]
        K[7 + i * 16] = S5[g(x, 0x5)] ^ S6[g(x, 0x4)] ^ S7[g(x, 0xA)] ^ S8[g(x, 0xB)] ^ S8[g(x, 0x7)];
    d914:	e5dd50ae 	ldrb	r5, [sp, #174]	; 0xae
        K[6 + i * 16] = S5[g(x, 0x7)] ^ S6[g(x, 0x6)] ^ S7[g(x, 0x8)] ^ S8[g(x, 0x9)] ^ S7[g(x, 0x3)];
    d918:	e58d3028 	str	r3, [sp, #40]	; 0x28
        K[7 + i * 16] = S5[g(x, 0x5)] ^ S6[g(x, 0x4)] ^ S7[g(x, 0xA)] ^ S8[g(x, 0xB)] ^ S8[g(x, 0x7)];
    d91c:	e5dd20af 	ldrb	r2, [sp, #175]	; 0xaf
        K[4 + i * 16] = S5[g(x, 0x3)] ^ S6[g(x, 0x2)] ^ S7[g(x, 0xC)] ^ S8[g(x, 0xD)] ^ S5[g(x, 0x8)];
    d920:	e5dd30b3 	ldrb	r3, [sp, #179]	; 0xb3
        K[7 + i * 16] = S5[g(x, 0x5)] ^ S6[g(x, 0x4)] ^ S7[g(x, 0xA)] ^ S8[g(x, 0xB)] ^ S8[g(x, 0x7)];
    d924:	e5dd40b1 	ldrb	r4, [sp, #177]	; 0xb1
    d928:	eafffc62 	b	cab8 <run+0x468>
            printf("K[%d-%d]: ", i*16, i*16+3);
    d92c:	e51f0214 	ldr	r0, [pc, #-532]	; d720 <run+0x10d0>
    d930:	e1a01003 	mov	r1, r3
            for(int j = 0; j < 4; j++) printf("%08X ", K[j + i*16]);
    d934:	e51f7218 	ldr	r7, [pc, #-536]	; d724 <run+0x10d4>
            printf("K[%d-%d]: ", i*16, i*16+3);
    d938:	e08f0000 	add	r0, pc, r0
            for(int j = 0; j < 4; j++) printf("%08X ", K[j + i*16]);
    d93c:	e08f7007 	add	r7, pc, r7
            printf("K[%d-%d]: ", i*16, i*16+3);
    d940:	eb000eaf 	bl	11404 <tfp_printf>
            for(int j = 0; j < 4; j++) printf("%08X ", K[j + i*16]);
    d944:	e59d3018 	ldr	r3, [sp, #24]
    d948:	e58d4034 	str	r4, [sp, #52]	; 0x34
    d94c:	e1a04007 	mov	r4, r7
    d950:	e2435010 	sub	r5, r3, #16
    d954:	e1a07003 	mov	r7, r3
    d958:	e4951004 	ldr	r1, [r5], #4
    d95c:	e1a00004 	mov	r0, r4
    d960:	eb000ea7 	bl	11404 <tfp_printf>
    d964:	e1570005 	cmp	r7, r5
    d968:	1afffffa 	bne	d958 <run+0x1308>
            printf("\n");
    d96c:	e51f024c 	ldr	r0, [pc, #-588]	; d728 <run+0x10d8>
    d970:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
    d974:	e08f0000 	add	r0, pc, r0
    d978:	e51f7254 	ldr	r7, [pc, #-596]	; d72c <run+0x10dc>
    d97c:	eb000ea0 	bl	11404 <tfp_printf>
            printf("Pre-second-x g(z) values: ");
    d980:	e51f0258 	ldr	r0, [pc, #-600]	; d730 <run+0x10e0>
            for(int j = 0x0; j <= 0x7; j++) printf("%02X ", g(z, j));
    d984:	e51f5258 	ldr	r5, [pc, #-600]	; d734 <run+0x10e4>
    d988:	e08f7007 	add	r7, pc, r7
            printf("Pre-second-x g(z) values: ");
    d98c:	e08f0000 	add	r0, pc, r0
            for(int j = 0x0; j <= 0x7; j++) printf("%02X ", g(z, j));
    d990:	e08f5005 	add	r5, pc, r5
            printf("Pre-second-x g(z) values: ");
    d994:	eb000e9a 	bl	11404 <tfp_printf>
    d998:	e58d4034 	str	r4, [sp, #52]	; 0x34
    d99c:	e2872007 	add	r2, r7, #7
    d9a0:	e1a04005 	mov	r4, r5
    d9a4:	e3a03003 	mov	r3, #3
    d9a8:	e1a05002 	mov	r5, r2
    d9ac:	ea000000 	b	d9b4 <run+0x1364>
    return ((uint8_t *)key)[K_MAP[i]];
    d9b0:	e5f73001 	ldrb	r3, [r7, #1]!
    d9b4:	e2833e1d 	add	r3, r3, #464	; 0x1d0
            for(int j = 0x0; j <= 0x7; j++) printf("%02X ", g(z, j));
    d9b8:	e1a00004 	mov	r0, r4
    return ((uint8_t *)key)[K_MAP[i]];
    d9bc:	e08d3003 	add	r3, sp, r3
            for(int j = 0x0; j <= 0x7; j++) printf("%02X ", g(z, j));
    d9c0:	e5531118 	ldrb	r1, [r3, #-280]	; 0xfffffee8
    d9c4:	eb000e8e 	bl	11404 <tfp_printf>
    d9c8:	e1550007 	cmp	r5, r7
    d9cc:	1afffff7 	bne	d9b0 <run+0x1360>
            printf("\n");
    d9d0:	e51f02a0 	ldr	r0, [pc, #-672]	; d738 <run+0x10e8>
    d9d4:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
    d9d8:	e08f0000 	add	r0, pc, r0
    d9dc:	eb000e88 	bl	11404 <tfp_printf>
    d9e0:	eafffbed 	b	c99c <run+0x34c>
            printf("Fourth x-transform: ");
    d9e4:	e51f02b0 	ldr	r0, [pc, #-688]	; d73c <run+0x10ec>
            for(int j = 0; j < 4; j++) printf("%08X ", x[j]);
    d9e8:	e51f42b0 	ldr	r4, [pc, #-688]	; d740 <run+0x10f0>
            printf("Fourth x-transform: ");
    d9ec:	e08f0000 	add	r0, pc, r0
            for(int j = 0; j < 4; j++) printf("%08X ", x[j]);
    d9f0:	e08f4004 	add	r4, pc, r4
            printf("Fourth x-transform: ");
    d9f4:	eb000e82 	bl	11404 <tfp_printf>
            for(int j = 0; j < 4; j++) printf("%08X ", x[j]);
    d9f8:	e59d5074 	ldr	r5, [sp, #116]	; 0x74
    d9fc:	e59d6078 	ldr	r6, [sp, #120]	; 0x78
    da00:	e4951004 	ldr	r1, [r5], #4
    da04:	e1a00004 	mov	r0, r4
    da08:	eb000e7d 	bl	11404 <tfp_printf>
    da0c:	e1560005 	cmp	r6, r5
    da10:	1afffffa 	bne	da00 <run+0x13b0>
            printf("\n");
    da14:	e51f02d8 	ldr	r0, [pc, #-728]	; d744 <run+0x10f4>
    da18:	e08f0000 	add	r0, pc, r0
    da1c:	eb000e78 	bl	11404 <tfp_printf>
        K[12 + i * 16] = S5[g(x, 0x8)] ^ S6[g(x, 0x9)] ^ S7[g(x, 0x7)] ^ S8[g(x, 0x6)] ^ S5[g(x, 0x3)];
    da20:	e5dd30b2 	ldrb	r3, [sp, #178]	; 0xb2
    da24:	e5dd10ad 	ldrb	r1, [sp, #173]	; 0xad
    da28:	e7993103 	ldr	r3, [r9, r3, lsl #2]
        K[14 + i * 16] = S5[g(x, 0xC)] ^ S6[g(x, 0xD)] ^ S7[g(x, 0x3)] ^ S8[g(x, 0x2)] ^ S7[g(x, 0x8)];
    da2c:	e5dd00a9 	ldrb	r0, [sp, #169]	; 0xa9
        K[12 + i * 16] = S5[g(x, 0x8)] ^ S6[g(x, 0x9)] ^ S7[g(x, 0x7)] ^ S8[g(x, 0x6)] ^ S5[g(x, 0x3)];
    da30:	e58d3028 	str	r3, [sp, #40]	; 0x28
        K[13 + i * 16] = S5[g(x, 0xA)] ^ S6[g(x, 0xB)] ^ S7[g(x, 0x5)] ^ S8[g(x, 0x4)] ^ S6[g(x, 0x7)];
    da34:	e5dd30b1 	ldrb	r3, [sp, #177]	; 0xb1
        K[15 + i * 16] = S5[g(x, 0xE)] ^ S6[g(x, 0xF)] ^ S7[g(x, 0x1)] ^ S8[g(x, 0x0)] ^ S8[g(x, 0xD)];
    da38:	e5dd20ab 	ldrb	r2, [sp, #171]	; 0xab
        K[13 + i * 16] = S5[g(x, 0xA)] ^ S6[g(x, 0xB)] ^ S7[g(x, 0x5)] ^ S8[g(x, 0x4)] ^ S6[g(x, 0x7)];
    da3c:	e79a5103 	ldr	r5, [sl, r3, lsl #2]
    da40:	e5dd30ae 	ldrb	r3, [sp, #174]	; 0xae
    da44:	e7983103 	ldr	r3, [r8, r3, lsl #2]
    da48:	e58d3024 	str	r3, [sp, #36]	; 0x24
    da4c:	e5dd30af 	ldrb	r3, [sp, #175]	; 0xaf
    da50:	e79be103 	ldr	lr, [fp, r3, lsl #2]
        K[15 + i * 16] = S5[g(x, 0xE)] ^ S6[g(x, 0xF)] ^ S7[g(x, 0x1)] ^ S8[g(x, 0x0)] ^ S8[g(x, 0xD)];
    da54:	e5dd30aa 	ldrb	r3, [sp, #170]	; 0xaa
    da58:	e7983103 	ldr	r3, [r8, r3, lsl #2]
    da5c:	e58d3020 	str	r3, [sp, #32]
        K[12 + i * 16] = S5[g(x, 0x8)] ^ S6[g(x, 0x9)] ^ S7[g(x, 0x7)] ^ S8[g(x, 0x6)] ^ S5[g(x, 0x3)];
    da60:	e5dd30b3 	ldrb	r3, [sp, #179]	; 0xb3
    da64:	eafffd2e 	b	cf24 <run+0x8d4>
            printf("K[%d-%d]: ", i*16+8, i*16+11);
    da68:	e51f0328 	ldr	r0, [pc, #-808]	; d748 <run+0x10f8>
            for(int j = 8; j < 12; j++) printf("%08X ", K[j + i*16]);
    da6c:	e51f6328 	ldr	r6, [pc, #-808]	; d74c <run+0x10fc>
            printf("K[%d-%d]: ", i*16+8, i*16+11);
    da70:	e08f0000 	add	r0, pc, r0
            for(int j = 8; j < 12; j++) printf("%08X ", K[j + i*16]);
    da74:	e08f6006 	add	r6, pc, r6
            printf("K[%d-%d]: ", i*16+8, i*16+11);
    da78:	eb000e61 	bl	11404 <tfp_printf>
            for(int j = 8; j < 12; j++) printf("%08X ", K[j + i*16]);
    da7c:	e59d3018 	ldr	r3, [sp, #24]
    da80:	e58d403c 	str	r4, [sp, #60]	; 0x3c
    da84:	e1a04006 	mov	r4, r6
    da88:	e2835010 	add	r5, r3, #16
    da8c:	e2833020 	add	r3, r3, #32
    da90:	e1a06003 	mov	r6, r3
    da94:	e4951004 	ldr	r1, [r5], #4
    da98:	e1a00004 	mov	r0, r4
    da9c:	eb000e58 	bl	11404 <tfp_printf>
    daa0:	e1560005 	cmp	r6, r5
    daa4:	1afffffa 	bne	da94 <run+0x1444>
            printf("\n");
    daa8:	e51f0360 	ldr	r0, [pc, #-864]	; d750 <run+0x1100>
    daac:	e59d403c 	ldr	r4, [sp, #60]	; 0x3c
    dab0:	e08f0000 	add	r0, pc, r0
    dab4:	eb000e52 	bl	11404 <tfp_printf>
    dab8:	eafffcd4 	b	ce10 <run+0x7c0>
            printf("Third z-transform: ");
    dabc:	e58d3090 	str	r3, [sp, #144]	; 0x90
    dac0:	e51f0374 	ldr	r0, [pc, #-884]	; d754 <run+0x1104>
            for(int j = 0; j < 4; j++) printf("%08X ", z[j]);
    dac4:	e51f3374 	ldr	r3, [pc, #-884]	; d758 <run+0x1108>
            printf("Third z-transform: ");
    dac8:	e08f0000 	add	r0, pc, r0
            for(int j = 0; j < 4; j++) printf("%08X ", z[j]);
    dacc:	e08f3003 	add	r3, pc, r3
    dad0:	e58d2088 	str	r2, [sp, #136]	; 0x88
    dad4:	e58d3058 	str	r3, [sp, #88]	; 0x58
            printf("Third z-transform: ");
    dad8:	eb000e49 	bl	11404 <tfp_printf>
    dadc:	e58d508c 	str	r5, [sp, #140]	; 0x8c
    dae0:	e28d00bc 	add	r0, sp, #188	; 0xbc
    dae4:	e59d5058 	ldr	r5, [sp, #88]	; 0x58
    dae8:	e1a01007 	mov	r1, r7
    daec:	e58d705c 	str	r7, [sp, #92]	; 0x5c
    daf0:	e59d7068 	ldr	r7, [sp, #104]	; 0x68
    daf4:	e58d4094 	str	r4, [sp, #148]	; 0x94
    daf8:	e1a04000 	mov	r4, r0
            for(int j = 0; j < 4; j++) printf("%08X ", z[j]);
    dafc:	e1a00005 	mov	r0, r5
    db00:	eb000e3f 	bl	11404 <tfp_printf>
    db04:	e1570004 	cmp	r7, r4
    db08:	0a000004 	beq	db20 <run+0x14d0>
    db0c:	e4941004 	ldr	r1, [r4], #4
    db10:	e1a00005 	mov	r0, r5
    db14:	eb000e3a 	bl	11404 <tfp_printf>
    db18:	e1570004 	cmp	r7, r4
    db1c:	1afffffa 	bne	db0c <run+0x14bc>
            printf("\n");
    db20:	e51f03cc 	ldr	r0, [pc, #-972]	; d75c <run+0x110c>
    db24:	e59d2088 	ldr	r2, [sp, #136]	; 0x88
    db28:	e59d3090 	ldr	r3, [sp, #144]	; 0x90
    db2c:	e08f0000 	add	r0, pc, r0
    db30:	e59d705c 	ldr	r7, [sp, #92]	; 0x5c
    db34:	e58d3058 	str	r3, [sp, #88]	; 0x58
    db38:	e58d205c 	str	r2, [sp, #92]	; 0x5c
    db3c:	e59d508c 	ldr	r5, [sp, #140]	; 0x8c
    db40:	e59d4094 	ldr	r4, [sp, #148]	; 0x94
    db44:	eb000e2e 	bl	11404 <tfp_printf>
    db48:	e59d205c 	ldr	r2, [sp, #92]	; 0x5c
    db4c:	e59d3058 	ldr	r3, [sp, #88]	; 0x58
    db50:	eafffc6a 	b	cd00 <run+0x6b0>
            printf("K[%d-%d]: ", i*16+4, i*16+7);
    db54:	e51f03fc 	ldr	r0, [pc, #-1020]	; d760 <run+0x1110>
            for(int j = 4; j < 8; j++) printf("%08X ", K[j + i*16]);
    db58:	e51f43fc 	ldr	r4, [pc, #-1020]	; d764 <run+0x1114>
            printf("K[%d-%d]: ", i*16+4, i*16+7);
    db5c:	e08f0000 	add	r0, pc, r0
            for(int j = 4; j < 8; j++) printf("%08X ", K[j + i*16]);
    db60:	e08f4004 	add	r4, pc, r4
            printf("K[%d-%d]: ", i*16+4, i*16+7);
    db64:	eb000e26 	bl	11404 <tfp_printf>
    db68:	e59d3018 	ldr	r3, [sp, #24]
    db6c:	e1a06003 	mov	r6, r3
    db70:	e2835010 	add	r5, r3, #16
            for(int j = 4; j < 8; j++) printf("%08X ", K[j + i*16]);
    db74:	e4961004 	ldr	r1, [r6], #4
    db78:	e1a00004 	mov	r0, r4
    db7c:	eb000e20 	bl	11404 <tfp_printf>
    db80:	e1550006 	cmp	r5, r6
    db84:	1afffffa 	bne	db74 <run+0x1524>
            printf("\n");
    db88:	e51f0428 	ldr	r0, [pc, #-1064]	; d768 <run+0x1118>
    db8c:	e08f0000 	add	r0, pc, r0
    db90:	eb000e1b 	bl	11404 <tfp_printf>
        z[0] = x[0] ^ S5[g(x, 0xD)] ^ S6[g(x, 0xF)] ^ S7[g(x, 0xC)] ^ S8[g(x, 0xE)] ^ S7[g(x, 0x8)];
    db94:	e5dd30b7 	ldrb	r3, [sp, #183]	; 0xb7
    db98:	e5dd50b6 	ldrb	r5, [sp, #182]	; 0xb6
    db9c:	e7983103 	ldr	r3, [r8, r3, lsl #2]
    dba0:	e5dd70b5 	ldrb	r7, [sp, #181]	; 0xb5
    dba4:	e58d302c 	str	r3, [sp, #44]	; 0x2c
    dba8:	e5dd30b3 	ldrb	r3, [sp, #179]	; 0xb3
        z[1] = x[2] ^ S5[g(z, 0x0)] ^ S6[g(z, 0x2)] ^ S7[g(z, 0x1)] ^ S8[g(z, 0x3)] ^ S8[g(x, 0xA)];
    dbac:	e5dd40b1 	ldrb	r4, [sp, #177]	; 0xb1
        z[0] = x[0] ^ S5[g(x, 0xD)] ^ S6[g(x, 0xF)] ^ S7[g(x, 0xC)] ^ S8[g(x, 0xE)] ^ S7[g(x, 0x8)];
    dbb0:	e798c103 	ldr	ip, [r8, r3, lsl #2]
    dbb4:	e5dd30b4 	ldrb	r3, [sp, #180]	; 0xb4
        z[2] = x[3] ^ S5[g(z, 0x7)] ^ S6[g(z, 0x6)] ^ S7[g(z, 0x5)] ^ S8[g(z, 0x4)] ^ S5[g(x, 0x9)];
    dbb8:	e5dde0b2 	ldrb	lr, [sp, #178]	; 0xb2
        z[0] = x[0] ^ S5[g(x, 0xD)] ^ S6[g(x, 0xF)] ^ S7[g(x, 0xC)] ^ S8[g(x, 0xE)] ^ S7[g(x, 0x8)];
    dbbc:	e58d3030 	str	r3, [sp, #48]	; 0x30
        z[3] = x[1] ^ S5[g(z, 0xA)] ^ S6[g(z, 0x9)] ^ S7[g(z, 0xB)] ^ S8[g(z, 0x8)] ^ S6[g(x, 0xB)];
    dbc0:	e5dd30b0 	ldrb	r3, [sp, #176]	; 0xb0
    dbc4:	e58d3020 	str	r3, [sp, #32]
    dbc8:	eafffbfe 	b	cbc8 <run+0x578>

0000dbcc <buf_get_le32>:
    if (!_buf) {
    dbcc:	e3500000 	cmp	r0, #0
    dbd0:	012fff1e 	bxeq	lr
    u32 b0 = (u32)vin[0];
    dbd4:	e5d01000 	ldrb	r1, [r0]
    u32 b1 = (u32)vin[1]; 
    dbd8:	e5d02001 	ldrb	r2, [r0, #1]
    u32 b2 = (u32)vin[2];
    dbdc:	e5d03002 	ldrb	r3, [r0, #2]
    u32 b3 = (u32)vin[3];
    dbe0:	e5d0c003 	ldrb	ip, [r0, #3]
    return (b3 << 24) | (b2 << 16) | (b1 << 8) | b0;
    dbe4:	e1a00803 	lsl	r0, r3, #16
    dbe8:	e1800c0c 	orr	r0, r0, ip, lsl #24
    dbec:	e1800001 	orr	r0, r0, r1
    dbf0:	e1800402 	orr	r0, r0, r2, lsl #8
}
    dbf4:	e12fff1e 	bx	lr

0000dbf8 <buf_put_le32>:
    out[3] = val >> 24;
    dbf8:	e1a0cc21 	lsr	ip, r1, #24
    out[2] = val >> 16;
    dbfc:	e1a02821 	lsr	r2, r1, #16
    out[1] = val >> 8;
    dc00:	e1a03421 	lsr	r3, r1, #8
    out[3] = val >> 24;
    dc04:	e5c0c003 	strb	ip, [r0, #3]
    out[2] = val >> 16;
    dc08:	e5c02002 	strb	r2, [r0, #2]
    out[1] = val >> 8;
    dc0c:	e5c03001 	strb	r3, [r0, #1]
    out[0] = val;
    dc10:	e5c01000 	strb	r1, [r0]
}
    dc14:	e12fff1e 	bx	lr

0000dc18 <cipher_block_xor_2dst>:
    if (blocksize == 8) {
    dc18:	e3530008 	cmp	r3, #8
    const byte *src = _src;
    dc1c:	e241c001 	sub	ip, r1, #1
void cipher_block_xor_2dst(void *_dst1, void *_dst2, const void *_src, size_t blocksize) {
    dc20:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    dc24:	e242e001 	sub	lr, r2, #1
    dc28:	e2402001 	sub	r2, r0, #1
    if (blocksize == 8) {
    dc2c:	1281000f 	addne	r0, r1, #15
    dc30:	0a000007 	beq	dc54 <cipher_block_xor_2dst+0x3c>
            byte temp = dst2[i] ^ src[i];
    dc34:	e5fc3001 	ldrb	r3, [ip, #1]!
    dc38:	e5fe1001 	ldrb	r1, [lr, #1]!
        for (size_t i = 0; i < 16; i++) {
    dc3c:	e15c0000 	cmp	ip, r0
            byte temp = dst2[i] ^ src[i];
    dc40:	e0233001 	eor	r3, r3, r1
            dst2[i] = temp;
    dc44:	e5cc3000 	strb	r3, [ip]
            dst1[i] = temp;
    dc48:	e5e23001 	strb	r3, [r2, #1]!
        for (size_t i = 0; i < 16; i++) {
    dc4c:	1afffff8 	bne	dc34 <cipher_block_xor_2dst+0x1c>
    dc50:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    dc54:	e2810007 	add	r0, r1, #7
            byte temp = dst2[i] ^ src[i];
    dc58:	e5fc3001 	ldrb	r3, [ip, #1]!
    dc5c:	e5fe1001 	ldrb	r1, [lr, #1]!
        for (size_t i = 0; i < 8; i++) {
    dc60:	e15c0000 	cmp	ip, r0
            byte temp = dst2[i] ^ src[i];
    dc64:	e0233001 	eor	r3, r3, r1
            dst2[i] = temp;
    dc68:	e5cc3000 	strb	r3, [ip]
            dst1[i] = temp;
    dc6c:	e5e23001 	strb	r3, [r2, #1]!
        for (size_t i = 0; i < 8; i++) {
    dc70:	1afffff8 	bne	dc58 <cipher_block_xor_2dst+0x40>
    dc74:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000dc78 <buf_xor_2dst>:
    for (size_t i = 0; i < len; i++) {
    dc78:	e3530000 	cmp	r3, #0
    dc7c:	012fff1e 	bxeq	lr
    dc80:	e2433001 	sub	r3, r3, #1
    dc84:	e241c001 	sub	ip, r1, #1
void buf_xor_2dst(void *_dst1, void *_dst2, const void *_src, size_t len) {
    dc88:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    dc8c:	e2422001 	sub	r2, r2, #1
    dc90:	e081e003 	add	lr, r1, r3
    dc94:	e2400001 	sub	r0, r0, #1
        iv[i] ^= src[i];
    dc98:	e5fc3001 	ldrb	r3, [ip, #1]!
    dc9c:	e5f21001 	ldrb	r1, [r2, #1]!
    for (size_t i = 0; i < len; i++) {
    dca0:	e15c000e 	cmp	ip, lr
        iv[i] ^= src[i];
    dca4:	e0233001 	eor	r3, r3, r1
    dca8:	e5cc3000 	strb	r3, [ip]
        dst1[i] = iv[i];
    dcac:	e5e03001 	strb	r3, [r0, #1]!
    for (size_t i = 0; i < len; i++) {
    dcb0:	1afffff8 	bne	dc98 <buf_xor_2dst+0x20>
    dcb4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000dcb8 <cipher_block_cpy>:
    if (blocksize == 8) {
    dcb8:	e3520008 	cmp	r2, #8
void cipher_block_cpy(void *_dst, const void *_src, size_t blocksize) {
    dcbc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    dcc0:	e1a04000 	mov	r4, r0
    dcc4:	e1a05001 	mov	r5, r1
        s[0] = buf_get_he32(src);
    dcc8:	e1a00001 	mov	r0, r1
    if (blocksize == 8) {
    dccc:	0a000017 	beq	dd30 <cipher_block_cpy+0x78>
        s[0] = buf_get_he32(src);
    dcd0:	ebffffbd 	bl	dbcc <buf_get_le32>
    dcd4:	e1a08000 	mov	r8, r0
        s[1] = buf_get_he32(src + 4);
    dcd8:	e2850004 	add	r0, r5, #4
    dcdc:	ebffffba 	bl	dbcc <buf_get_le32>
    dce0:	e1a07000 	mov	r7, r0
        s[2] = buf_get_he32(src + 8);
    dce4:	e2850008 	add	r0, r5, #8
    dce8:	ebffffb7 	bl	dbcc <buf_get_le32>
    dcec:	e1a06000 	mov	r6, r0
        s[3] = buf_get_he32(src + 12);
    dcf0:	e285000c 	add	r0, r5, #12
    dcf4:	ebffffb4 	bl	dbcc <buf_get_le32>
    dcf8:	e1a05000 	mov	r5, r0
        buf_put_he32(dst, s[0]);
    dcfc:	e1a01008 	mov	r1, r8
    dd00:	e1a00004 	mov	r0, r4
    dd04:	ebffffbb 	bl	dbf8 <buf_put_le32>
        buf_put_he32(dst + 4, s[1]);
    dd08:	e1a01007 	mov	r1, r7
    dd0c:	e2840004 	add	r0, r4, #4
    dd10:	ebffffb8 	bl	dbf8 <buf_put_le32>
        buf_put_he32(dst + 8, s[2]);
    dd14:	e1a01006 	mov	r1, r6
    dd18:	e2840008 	add	r0, r4, #8
    dd1c:	ebffffb5 	bl	dbf8 <buf_put_le32>
        buf_put_he32(dst + 12, s[3]);
    dd20:	e1a01005 	mov	r1, r5
    dd24:	e284000c 	add	r0, r4, #12
}
    dd28:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
        buf_put_he32(dst + 12, s[3]);
    dd2c:	eaffffb1 	b	dbf8 <buf_put_le32>
        s[0] = buf_get_he32(src);
    dd30:	ebffffa5 	bl	dbcc <buf_get_le32>
    dd34:	e1a06000 	mov	r6, r0
        s[1] = buf_get_he32(src + 4);
    dd38:	e2850004 	add	r0, r5, #4
    dd3c:	ebffffa2 	bl	dbcc <buf_get_le32>
    dd40:	e1a05000 	mov	r5, r0
        buf_put_he32(dst, s[0]);
    dd44:	e1a01006 	mov	r1, r6
    dd48:	e1a00004 	mov	r0, r4
    dd4c:	ebffffa9 	bl	dbf8 <buf_put_le32>
        buf_put_he32(dst + 4, s[1]);
    dd50:	e1a01005 	mov	r1, r5
    dd54:	e2840004 	add	r0, r4, #4
}
    dd58:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
        buf_put_he32(dst + 4, s[1]);
    dd5c:	eaffffa5 	b	dbf8 <buf_put_le32>

0000dd60 <cipher_block_xor_n_copy_2>:
                              size_t blocksize) {
    dd60:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dd64:	e1a08000 	mov	r8, r0
    dd68:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
    dd6c:	e1a09001 	mov	r9, r1
    dd70:	e1a07002 	mov	r7, r2
    dd74:	e1a0a003 	mov	sl, r3
    if (blocksize == 8) {
    dd78:	e35c0008 	cmp	ip, #8
    dd7c:	13a04000 	movne	r4, #0
    dd80:	0a000012 	beq	ddd0 <cipher_block_xor_n_copy_2+0x70>
            sc[i] = buf_get_he32(src_cpy_p + i*4);
    dd84:	e08a0004 	add	r0, sl, r4
    dd88:	e087b004 	add	fp, r7, r4
    dd8c:	ebffff8e 	bl	dbcc <buf_get_le32>
    dd90:	e1a05000 	mov	r5, r0
            sdc[i] = buf_get_he32(srcdst_cpy_p + i*4);
    dd94:	e1a0000b 	mov	r0, fp
    dd98:	ebffff8b 	bl	dbcc <buf_get_le32>
    dd9c:	e1a06000 	mov	r6, r0
            sx[i] = buf_get_he32(src_xor_p + i*4) ^ sdc[i];
    dda0:	e0890004 	add	r0, r9, r4
    dda4:	ebffff88 	bl	dbcc <buf_get_le32>
            buf_put_he32(dst_xor_p + i*4, sx[i]);
    dda8:	e0261000 	eor	r1, r6, r0
    ddac:	e0880004 	add	r0, r8, r4
        for(int i = 0; i < 4; i++) {
    ddb0:	e2844004 	add	r4, r4, #4
            buf_put_he32(dst_xor_p + i*4, sx[i]);
    ddb4:	ebffff8f 	bl	dbf8 <buf_put_le32>
            buf_put_he32(srcdst_cpy_p + i*4, sc[i]);
    ddb8:	e1a01005 	mov	r1, r5
    ddbc:	e1a0000b 	mov	r0, fp
    ddc0:	ebffff8c 	bl	dbf8 <buf_put_le32>
        for(int i = 0; i < 4; i++) {
    ddc4:	e3540010 	cmp	r4, #16
    ddc8:	1affffed 	bne	dd84 <cipher_block_xor_n_copy_2+0x24>
    ddcc:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        sc[0] = buf_get_he32(src_cpy_p + 0);
    ddd0:	e1a00003 	mov	r0, r3
        sdc[1] = buf_get_he32(srcdst_cpy_p + 4);
    ddd4:	e287b004 	add	fp, r7, #4
        sc[0] = buf_get_he32(src_cpy_p + 0);
    ddd8:	ebffff7b 	bl	dbcc <buf_get_le32>
    dddc:	e1a03000 	mov	r3, r0
        sc[1] = buf_get_he32(src_cpy_p + 4);
    dde0:	e28a0004 	add	r0, sl, #4
        sc[0] = buf_get_he32(src_cpy_p + 0);
    dde4:	e1a0a003 	mov	sl, r3
        sc[1] = buf_get_he32(src_cpy_p + 4);
    dde8:	ebffff77 	bl	dbcc <buf_get_le32>
    ddec:	e1a06000 	mov	r6, r0
        sdc[0] = buf_get_he32(srcdst_cpy_p);
    ddf0:	e1a00007 	mov	r0, r7
    ddf4:	ebffff74 	bl	dbcc <buf_get_le32>
    ddf8:	e1a05000 	mov	r5, r0
        sdc[1] = buf_get_he32(srcdst_cpy_p + 4);
    ddfc:	e1a0000b 	mov	r0, fp
    de00:	ebffff71 	bl	dbcc <buf_get_le32>
    de04:	e1a04000 	mov	r4, r0
        sx[0] = buf_get_he32(src_xor_p) ^ sdc[0];
    de08:	e1a00009 	mov	r0, r9
    de0c:	ebffff6e 	bl	dbcc <buf_get_le32>
    de10:	e0255000 	eor	r5, r5, r0
        sx[1] = buf_get_he32(src_xor_p + 4) ^ sdc[1];
    de14:	e2890004 	add	r0, r9, #4
    de18:	ebffff6b 	bl	dbcc <buf_get_le32>
    de1c:	e0244000 	eor	r4, r4, r0
        buf_put_he32(dst_xor_p, sx[0]);
    de20:	e1a01005 	mov	r1, r5
    de24:	e1a00008 	mov	r0, r8
    de28:	ebffff72 	bl	dbf8 <buf_put_le32>
        buf_put_he32(dst_xor_p + 4, sx[1]);
    de2c:	e1a01004 	mov	r1, r4
    de30:	e2880004 	add	r0, r8, #4
    de34:	ebffff6f 	bl	dbf8 <buf_put_le32>
        buf_put_he32(srcdst_cpy_p, sc[0]);
    de38:	e1a0100a 	mov	r1, sl
    de3c:	e1a00007 	mov	r0, r7
    de40:	ebffff6c 	bl	dbf8 <buf_put_le32>
        buf_put_he32(srcdst_cpy_p + 4, sc[1]);
    de44:	e1a01006 	mov	r1, r6
    de48:	e1a0000b 	mov	r0, fp
}
    de4c:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        buf_put_he32(srcdst_cpy_p + 4, sc[1]);
    de50:	eaffff68 	b	dbf8 <buf_put_le32>

0000de54 <buf_xor_n_copy_2>:
                      void *_srcdst_cpy, const void *_src_cpy, size_t len) {
    de54:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    de58:	e24dd014 	sub	sp, sp, #20
    de5c:	e1a05000 	mov	r5, r0
    de60:	e1a06001 	mov	r6, r1
    while (len >= sizeof(u32)) {
    de64:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
                      void *_srcdst_cpy, const void *_src_cpy, size_t len) {
    de68:	e1a07003 	mov	r7, r3
    de6c:	e58d2000 	str	r2, [sp]
    while (len >= sizeof(u32)) {
    de70:	e35c0003 	cmp	ip, #3
    de74:	9a000032 	bls	df44 <buf_xor_n_copy_2+0xf0>
    de78:	e082b00c 	add	fp, r2, ip
    de7c:	e1a0400c 	mov	r4, ip
    de80:	e087a00c 	add	sl, r7, ip
    de84:	e081900c 	add	r9, r1, ip
    de88:	e080800c 	add	r8, r0, ip
    de8c:	e98d00e0 	stmib	sp, {r5, r6, r7}
        u32 temp = buf_get_he32(src_cpy);
    de90:	e04a0004 	sub	r0, sl, r4
    de94:	e04b5004 	sub	r5, fp, r4
    de98:	ebffff4b 	bl	dbcc <buf_get_le32>
    de9c:	e1a06000 	mov	r6, r0
        buf_put_he32(dst_xor, buf_get_he32(srcdst_cpy) ^ buf_get_he32(src_xor));
    dea0:	e1a00005 	mov	r0, r5
    dea4:	ebffff48 	bl	dbcc <buf_get_le32>
    dea8:	e1a07000 	mov	r7, r0
    deac:	e0490004 	sub	r0, r9, r4
    deb0:	ebffff45 	bl	dbcc <buf_get_le32>
    deb4:	e0271000 	eor	r1, r7, r0
    deb8:	e0480004 	sub	r0, r8, r4
        len -= sizeof(u32);
    debc:	e2444004 	sub	r4, r4, #4
        buf_put_he32(dst_xor, buf_get_he32(srcdst_cpy) ^ buf_get_he32(src_xor));
    dec0:	ebffff4c 	bl	dbf8 <buf_put_le32>
        buf_put_he32(srcdst_cpy, temp);
    dec4:	e1a01006 	mov	r1, r6
    dec8:	e1a00005 	mov	r0, r5
    decc:	ebffff49 	bl	dbf8 <buf_put_le32>
    while (len >= sizeof(u32)) {
    ded0:	e3540003 	cmp	r4, #3
    ded4:	8affffed 	bhi	de90 <buf_xor_n_copy_2+0x3c>
    ded8:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
    dedc:	e99d00e0 	ldmib	sp, {r5, r6, r7}
    dee0:	e2432004 	sub	r2, r3, #4
    dee4:	e3c22003 	bic	r2, r2, #3
        len -= sizeof(u32);
    dee8:	e2033003 	and	r3, r3, #3
        srcdst_cpy += sizeof(u32);
    deec:	e59d1000 	ldr	r1, [sp]
    def0:	e2822004 	add	r2, r2, #4
        dst_xor += sizeof(u32);
    def4:	e0855002 	add	r5, r5, r2
        src_xor += sizeof(u32);
    def8:	e0866002 	add	r6, r6, r2
        src_cpy += sizeof(u32);
    defc:	e0877002 	add	r7, r7, r2
        srcdst_cpy += sizeof(u32);
    df00:	e0811002 	add	r1, r1, r2
    df04:	e58d1000 	str	r1, [sp]
    for (; len; len--) {
    df08:	e3530000 	cmp	r3, #0
    df0c:	0a00000a 	beq	df3c <buf_xor_n_copy_2+0xe8>
    df10:	e59d2000 	ldr	r2, [sp]
    df14:	e0853003 	add	r3, r5, r3
    df18:	e2422001 	sub	r2, r2, #1
        *dst_xor++ = *srcdst_cpy ^ *src_xor++;
    df1c:	e5f21001 	ldrb	r1, [r2, #1]!
    df20:	e4d6c001 	ldrb	ip, [r6], #1
        byte temp = *src_cpy++;
    df24:	e4d70001 	ldrb	r0, [r7], #1
        *dst_xor++ = *srcdst_cpy ^ *src_xor++;
    df28:	e021100c 	eor	r1, r1, ip
    df2c:	e4c51001 	strb	r1, [r5], #1
    for (; len; len--) {
    df30:	e1550003 	cmp	r5, r3
        *srcdst_cpy++ = temp;
    df34:	e5c20000 	strb	r0, [r2]
    for (; len; len--) {
    df38:	1afffff7 	bne	df1c <buf_xor_n_copy_2+0xc8>
}
    df3c:	e28dd014 	add	sp, sp, #20
    df40:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while (len >= sizeof(u32)) {
    df44:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
    df48:	eaffffee 	b	df08 <buf_xor_n_copy_2+0xb4>

0000df4c <buf_xor_n_copy>:
                    const void *_src, size_t len) {
    df4c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    df50:	e24dd00c 	sub	sp, sp, #12
    buf_xor_n_copy_2(_dst_xor, _src, _srcdst_cpy, _src, len);
    df54:	e58d3000 	str	r3, [sp]
    df58:	e1a03002 	mov	r3, r2
    df5c:	e1a02001 	mov	r2, r1
    df60:	e1a01003 	mov	r1, r3
    df64:	ebffffba 	bl	de54 <buf_xor_n_copy_2>
}
    df68:	e28dd00c 	add	sp, sp, #12
    df6c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000df70 <cipher_block_xor_n_copy>:
                            const void *_src, size_t blocksize) {
    df70:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    df74:	e24dd00c 	sub	sp, sp, #12
    cipher_block_xor_n_copy_2(_dst_xor, _src, _srcdst_cpy, _src, blocksize);
    df78:	e58d3000 	str	r3, [sp]
    df7c:	e1a03002 	mov	r3, r2
    df80:	e1a02001 	mov	r2, r1
    df84:	e1a01003 	mov	r1, r3
    df88:	ebffff74 	bl	dd60 <cipher_block_xor_n_copy_2>
}
    df8c:	e28dd00c 	add	sp, sp, #12
    df90:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000df94 <buf_xor>:
void buf_xor(void *_dst, const void *_src1, const void *_src2, size_t len, int debug) {
    df94:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    while (len >= sizeof(uint32_t)) {
    df98:	e3530003 	cmp	r3, #3
void buf_xor(void *_dst, const void *_src1, const void *_src2, size_t len, int debug) {
    df9c:	e24dd014 	sub	sp, sp, #20
    dfa0:	e1a04000 	mov	r4, r0
    dfa4:	e1a08001 	mov	r8, r1
    dfa8:	e1a09002 	mov	r9, r2
    dfac:	e59db038 	ldr	fp, [sp, #56]	; 0x38
    dfb0:	e58d3000 	str	r3, [sp]
    while (len >= sizeof(uint32_t)) {
    dfb4:	9a000047 	bls	e0d8 <buf_xor+0x144>
        if(debug) printf("%08X =? %08X ^ %08X\n", buf_get_he32(src1) ^ buf_get_he32(src2),  buf_get_he32(src1), buf_get_he32(src2));
    dfb8:	e59fa120 	ldr	sl, [pc, #288]	; e0e0 <buf_xor+0x14c>
    dfbc:	e2433004 	sub	r3, r3, #4
    dfc0:	e3c33003 	bic	r3, r3, #3
    const unsigned char *src2 = (const unsigned char *)_src2;
    dfc4:	e1a06002 	mov	r6, r2
        if(debug) printf("%08X =? %08X ^ %08X\n", buf_get_he32(src1) ^ buf_get_he32(src2),  buf_get_he32(src1), buf_get_he32(src2));
    dfc8:	e08fa00a 	add	sl, pc, sl
    dfcc:	e2833004 	add	r3, r3, #4
    dfd0:	e0807003 	add	r7, r0, r3
    const unsigned char *src1 = (const unsigned char *)_src1;
    dfd4:	e1a05001 	mov	r5, r1
    dfd8:	e58d3004 	str	r3, [sp, #4]
    dfdc:	e1cd80f8 	strd	r8, [sp, #8]
    dfe0:	ea00000c 	b	e018 <buf_xor+0x84>
        buf_put_he32(dst, buf_get_he32(src1) ^ buf_get_he32(src2));
    dfe4:	e1a00005 	mov	r0, r5
        src1 += sizeof(uint32_t);
    dfe8:	e2855004 	add	r5, r5, #4
        buf_put_he32(dst, buf_get_he32(src1) ^ buf_get_he32(src2));
    dfec:	ebfffef6 	bl	dbcc <buf_get_le32>
    dff0:	e1a08000 	mov	r8, r0
    dff4:	e1a00006 	mov	r0, r6
        src2 += sizeof(uint32_t);
    dff8:	e2866004 	add	r6, r6, #4
        buf_put_he32(dst, buf_get_he32(src1) ^ buf_get_he32(src2));
    dffc:	ebfffef2 	bl	dbcc <buf_get_le32>
    e000:	e0281000 	eor	r1, r8, r0
    e004:	e1a00004 	mov	r0, r4
        dst += sizeof(uint32_t);
    e008:	e2844004 	add	r4, r4, #4
        buf_put_he32(dst, buf_get_he32(src1) ^ buf_get_he32(src2));
    e00c:	ebfffef9 	bl	dbf8 <buf_put_le32>
    while (len >= sizeof(uint32_t)) {
    e010:	e1540007 	cmp	r4, r7
    e014:	0a000012 	beq	e064 <buf_xor+0xd0>
        if(debug) printf("%08X =? %08X ^ %08X\n", buf_get_he32(src1) ^ buf_get_he32(src2),  buf_get_he32(src1), buf_get_he32(src2));
    e018:	e35b0000 	cmp	fp, #0
    e01c:	0afffff0 	beq	dfe4 <buf_xor+0x50>
    e020:	e1a00005 	mov	r0, r5
    e024:	ebfffee8 	bl	dbcc <buf_get_le32>
    e028:	e1a08000 	mov	r8, r0
    e02c:	e1a00006 	mov	r0, r6
    e030:	ebfffee5 	bl	dbcc <buf_get_le32>
    e034:	e0288000 	eor	r8, r8, r0
    e038:	e1a00005 	mov	r0, r5
    e03c:	ebfffee2 	bl	dbcc <buf_get_le32>
    e040:	e1a09000 	mov	r9, r0
    e044:	e1a00006 	mov	r0, r6
    e048:	ebfffedf 	bl	dbcc <buf_get_le32>
    e04c:	e1a03000 	mov	r3, r0
    e050:	e1a02009 	mov	r2, r9
    e054:	e1a01008 	mov	r1, r8
    e058:	e1a0000a 	mov	r0, sl
    e05c:	eb000ce8 	bl	11404 <tfp_printf>
    e060:	eaffffdf 	b	dfe4 <buf_xor+0x50>
        src1 += sizeof(uint32_t);
    e064:	e59d3004 	ldr	r3, [sp, #4]
    e068:	e1cd80d8 	ldrd	r8, [sp, #8]
    e06c:	e0888003 	add	r8, r8, r3
        src2 += sizeof(uint32_t);
    e070:	e0899003 	add	r9, r9, r3
        len -= sizeof(uint32_t);
    e074:	e59d3000 	ldr	r3, [sp]
    e078:	e2033003 	and	r3, r3, #3
    e07c:	e58d3000 	str	r3, [sp]
    for (; len; len--){
    e080:	e59d3000 	ldr	r3, [sp]
    e084:	e3530000 	cmp	r3, #0
    e088:	0a00000a 	beq	e0b8 <buf_xor+0x124>
        if(debug) printf("%02X =? %02X ^ %02X\n", *src1 ^ *src2,  *src1,*src2);
    e08c:	e59f4050 	ldr	r4, [pc, #80]	; e0e4 <buf_xor+0x150>
    e090:	e087a003 	add	sl, r7, r3
    e094:	e08f4004 	add	r4, pc, r4
    e098:	e35b0000 	cmp	fp, #0
    e09c:	1a000007 	bne	e0c0 <buf_xor+0x12c>
        *dst++ = *src1++ ^ *src2++;
    e0a0:	e4d83001 	ldrb	r3, [r8], #1
    e0a4:	e4d92001 	ldrb	r2, [r9], #1
    e0a8:	e0233002 	eor	r3, r3, r2
    e0ac:	e4c73001 	strb	r3, [r7], #1
    for (; len; len--){
    e0b0:	e157000a 	cmp	r7, sl
    e0b4:	1afffff7 	bne	e098 <buf_xor+0x104>
}
    e0b8:	e28dd014 	add	sp, sp, #20
    e0bc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(debug) printf("%02X =? %02X ^ %02X\n", *src1 ^ *src2,  *src1,*src2);
    e0c0:	e5d82000 	ldrb	r2, [r8]
    e0c4:	e1a00004 	mov	r0, r4
    e0c8:	e5d93000 	ldrb	r3, [r9]
    e0cc:	e0221003 	eor	r1, r2, r3
    e0d0:	eb000ccb 	bl	11404 <tfp_printf>
    e0d4:	eafffff1 	b	e0a0 <buf_xor+0x10c>
    unsigned char *dst = (unsigned char *)_dst;
    e0d8:	e1a07000 	mov	r7, r0
    e0dc:	eaffffe7 	b	e080 <buf_xor+0xec>
    e0e0:	000095f4 	.word	0x000095f4
    e0e4:	00009540 	.word	0x00009540

0000e0e8 <printUint32Hex>:
{
    e0e8:	e1a01000 	mov	r1, r0
  printf("%08X\n", data);
    e0ec:	e59f0004 	ldr	r0, [pc, #4]	; e0f8 <printUint32Hex+0x10>
    e0f0:	e08f0000 	add	r0, pc, r0
    e0f4:	ea000cc2 	b	11404 <tfp_printf>
    e0f8:	00009348 	.word	0x00009348

0000e0fc <_gcry_cipher_setkey>:
    for (int i = 0; i < 4; i++)
    e0fc:	e2802030 	add	r2, r0, #48	; 0x30
    e100:	e2800040 	add	r0, r0, #64	; 0x40
{
    e104:	e92d4010 	push	{r4, lr}
    for (int i = 0; i < 4; i++)
    e108:	e2811004 	add	r1, r1, #4
        hd->key[i] = (key[j] << 24) + (key[j + 1] << 16) + (key[j + 2] << 8) + key[j + 3];
    e10c:	e5513003 	ldrb	r3, [r1, #-3]
    e110:	e5514004 	ldrb	r4, [r1, #-4]
    e114:	e551e002 	ldrb	lr, [r1, #-2]
    e118:	e1a03803 	lsl	r3, r3, #16
    e11c:	e551c001 	ldrb	ip, [r1, #-1]
    e120:	e0833c04 	add	r3, r3, r4, lsl #24
    e124:	e083340e 	add	r3, r3, lr, lsl #8
    e128:	e083300c 	add	r3, r3, ip
    e12c:	e4823004 	str	r3, [r2], #4
    for (int i = 0; i < 4; i++)
    e130:	e1500002 	cmp	r0, r2
    e134:	1afffff3 	bne	e108 <_gcry_cipher_setkey+0xc>
}
    e138:	e3a00000 	mov	r0, #0
    e13c:	e8bd8010 	pop	{r4, pc}

0000e140 <_gcry_cipher_close>:
  if (!h)
    e140:	e3500000 	cmp	r0, #0
    e144:	012fff1e 	bxeq	lr
  xfree ((char*)h - off);
    e148:	ea0003a7 	b	efec <xfree>

0000e14c <_gcry_cipher_setiv>:
    if (iv) {
    e14c:	e3510000 	cmp	r1, #0
    c->unused = 0;
    e150:	e3a0c000 	mov	ip, #0
int _gcry_cipher_setiv(gcry_cipher_hd_t c, const void *iv, size_t ivlen) {
    e154:	e92d4010 	push	{r4, lr}
    c->unused = 0;
    e158:	e580c020 	str	ip, [r0, #32]
    if (iv) {
    e15c:	0a000002 	beq	e16c <_gcry_cipher_setiv+0x20>
        memcpy(c->u_iv.iv, iv, ivlen);
    e160:	eb0003db 	bl	f0d4 <memcpy>
}
    e164:	e3a00000 	mov	r0, #0
    e168:	e8bd8010 	pop	{r4, pc}
        memset(c->u_iv.iv, 0, ivlen);
    e16c:	eb0003a1 	bl	eff8 <memset>
}
    e170:	e3a00000 	mov	r0, #0
    e174:	e8bd8010 	pop	{r4, pc}

0000e178 <cipher_sync>:
    if (c->unused) {
    e178:	e5902020 	ldr	r2, [r0, #32]
    e17c:	e3520000 	cmp	r2, #0
    e180:	012fff1e 	bxeq	lr
void cipher_sync(gcry_cipher_hd_t c) {
    e184:	e92d4010 	push	{r4, lr}
    e188:	e1a04000 	mov	r4, r0
        memmove(c->u_iv.iv + c->unused,
    e18c:	e0800002 	add	r0, r0, r2
    e190:	e1a01004 	mov	r1, r4
    e194:	e2622008 	rsb	r2, r2, #8
    e198:	eb0003f3 	bl	f16c <memmove>
               c->lastiv + 8 - c->unused,
    e19c:	e5942020 	ldr	r2, [r4, #32]
        memcpy(c->u_iv.iv,
    e1a0:	e1a00004 	mov	r0, r4
               c->lastiv + 8 - c->unused,
    e1a4:	e0441002 	sub	r1, r4, r2
        memcpy(c->u_iv.iv,
    e1a8:	e2811018 	add	r1, r1, #24
    e1ac:	eb0003c8 	bl	f0d4 <memcpy>
        c->unused = 0;
    e1b0:	e3a03000 	mov	r3, #0
    e1b4:	e5843020 	str	r3, [r4, #32]
}
    e1b8:	e8bd8010 	pop	{r4, pc}

0000e1bc <bytesFromBlock>:
    bytes[7] = (block.lsb & 0x000000FF) >> 0;
    e1bc:	e5c21007 	strb	r1, [r2, #7]
{
    e1c0:	e24dd008 	sub	sp, sp, #8
    bytes[6] = (block.lsb & 0x0000FF00) >> 8;
    e1c4:	e1a0c421 	lsr	ip, r1, #8
{
    e1c8:	e28d3008 	add	r3, sp, #8
    bytes[6] = (block.lsb & 0x0000FF00) >> 8;
    e1cc:	e5c2c006 	strb	ip, [r2, #6]
{
    e1d0:	e9030003 	stmdb	r3, {r0, r1}
    e1d4:	e1a03000 	mov	r3, r0
    bytes[5] = (block.lsb & 0x00FF0000) >> 16;
    e1d8:	e1a00821 	lsr	r0, r1, #16
    bytes[2] = (block.msb & 0x0000FF00) >> 8;
    e1dc:	e1a0c423 	lsr	ip, r3, #8
    bytes[4] = (block.lsb & 0xFF000000) >> 24;
    e1e0:	e1a01c21 	lsr	r1, r1, #24
    bytes[5] = (block.lsb & 0x00FF0000) >> 16;
    e1e4:	e5c20005 	strb	r0, [r2, #5]
    bytes[3] = (block.msb & 0x000000FF) >> 0;
    e1e8:	e5c23003 	strb	r3, [r2, #3]
    bytes[1] = (block.msb & 0x00FF0000) >> 16;
    e1ec:	e1a00823 	lsr	r0, r3, #16
    bytes[0] = (block.msb & 0xFF000000) >> 24;
    e1f0:	e1a03c23 	lsr	r3, r3, #24
    bytes[4] = (block.lsb & 0xFF000000) >> 24;
    e1f4:	e5c21004 	strb	r1, [r2, #4]
    bytes[2] = (block.msb & 0x0000FF00) >> 8;
    e1f8:	e5c2c002 	strb	ip, [r2, #2]
    bytes[1] = (block.msb & 0x00FF0000) >> 16;
    e1fc:	e5c20001 	strb	r0, [r2, #1]
    bytes[0] = (block.msb & 0xFF000000) >> 24;
    e200:	e5c23000 	strb	r3, [r2]
}
    e204:	e28dd008 	add	sp, sp, #8
    e208:	e12fff1e 	bx	lr

0000e20c <encrypt>:

struct Block encrypt(const Key key, struct Block data, int debug)
{
    e20c:	e92d4010 	push	{r4, lr}
    e210:	e24dd010 	sub	sp, sp, #16
    e214:	e1a04000 	mov	r4, r0
    e218:	e59dc018 	ldr	ip, [sp, #24]
    return run(key, data, FALSE, debug);
    e21c:	e58dc004 	str	ip, [sp, #4]
{
    e220:	e28dc008 	add	ip, sp, #8
    e224:	e88c000c 	stm	ip, {r2, r3}
    return run(key, data, FALSE, debug);
    e228:	e3a03000 	mov	r3, #0
    e22c:	e58d3000 	str	r3, [sp]
    e230:	e89c000c 	ldm	ip, {r2, r3}
    e234:	ebfff905 	bl	c650 <run>
}
    e238:	e1a00004 	mov	r0, r4
    e23c:	e28dd010 	add	sp, sp, #16
    e240:	e8bd8010 	pop	{r4, pc}

0000e244 <decrypt>:

struct Block decrypt(const Key key, struct Block data)
{
    e244:	e92d4010 	push	{r4, lr}
    e248:	e24dd010 	sub	sp, sp, #16
    e24c:	e28dc008 	add	ip, sp, #8
    e250:	e1a04000 	mov	r4, r0
    e254:	e88c000c 	stm	ip, {r2, r3}
    return run(key, data, TRUE,0);
    e258:	e3a02001 	mov	r2, #1
    e25c:	e3a03000 	mov	r3, #0
    e260:	e1cd20f0 	strd	r2, [sp]
    e264:	e89c000c 	ldm	ip, {r2, r3}
    e268:	ebfff8f8 	bl	c650 <run>
}
    e26c:	e1a00004 	mov	r0, r4
    e270:	e28dd010 	add	sp, sp, #16
    e274:	e8bd8010 	pop	{r4, pc}

0000e278 <xorBlock>:

struct Block xorBlock(struct Block block, struct Block val)
{
    e278:	e24dd008 	sub	sp, sp, #8
    e27c:	e24dd008 	sub	sp, sp, #8
    e280:	e28dc008 	add	ip, sp, #8
    e284:	e58d300c 	str	r3, [sp, #12]
    e288:	e90c0006 	stmdb	ip, {r1, r2}
    struct Block result = {
        .msb = block.msb ^ val.msb,
        .lsb = block.lsb ^ val.lsb};
    e28c:	e59dc010 	ldr	ip, [sp, #16]
    e290:	e1a01002 	mov	r1, r2
    e294:	e021100c 	eor	r1, r1, ip
    return result;
    e298:	e5801004 	str	r1, [r0, #4]
        .msb = block.msb ^ val.msb,
    e29c:	e59d1000 	ldr	r1, [sp]
    e2a0:	e0211003 	eor	r1, r1, r3
    return result;
    e2a4:	e5801000 	str	r1, [r0]
}
    e2a8:	e28dd008 	add	sp, sp, #8
    e2ac:	e28dd008 	add	sp, sp, #8
    e2b0:	e12fff1e 	bx	lr

0000e2b4 <blockFromBytes>:

struct Block blockFromBytes(uint8_t *bytes)
{
  struct Block block = {
    e2b4:	e3a0c000 	mov	ip, #0
{
    e2b8:	e3a03001 	mov	r3, #1
    e2bc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  struct Block block = {
    e2c0:	e1a0e00c 	mov	lr, ip
    e2c4:	ea000001 	b	e2d0 <blockFromBytes+0x1c>
    e2c8:	e2833001 	add	r3, r3, #1
    e2cc:	e2811001 	add	r1, r1, #1
      .msb = 0,
      .lsb = 0};
  for (int i = 0; i < 8; i++)
  {
    if (i < 4)
    e2d0:	e2432001 	sub	r2, r3, #1
    e2d4:	e3520003 	cmp	r2, #3
      block.msb = (block.msb << 8) | bytes[i];
    e2d8:	e5d12000 	ldrb	r2, [r1]
    e2dc:	9182e40e 	orrls	lr, r2, lr, lsl #8
    if (i < 4)
    e2e0:	9afffff8 	bls	e2c8 <blockFromBytes+0x14>
    else
      block.lsb = (block.lsb << 8) | bytes[i];
    e2e4:	e182c40c 	orr	ip, r2, ip, lsl #8
  for (int i = 0; i < 8; i++)
    e2e8:	e3530008 	cmp	r3, #8
    e2ec:	1afffff5 	bne	e2c8 <blockFromBytes+0x14>
  }
  return block;
    e2f0:	e580e000 	str	lr, [r0]
    e2f4:	e580c004 	str	ip, [r0, #4]
    e2f8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000e2fc <_gcry_cipher_cfb_decrypt>:
                          const unsigned char *inbuf, size_t inbuflen) {
    e2fc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e300:	e1a08000 	mov	r8, r0
    printf("_gcry_cipher_cfb_decrypt inbuflen %d outbuflen %d cfb_bulk %d\n", 
    e304:	e59f05f8 	ldr	r0, [pc, #1528]	; e904 <_gcry_cipher_cfb_decrypt+0x608>
                          const unsigned char *inbuf, size_t inbuflen) {
    e308:	e24dd05c 	sub	sp, sp, #92	; 0x5c
    for (int i = 0; i < 8; i++) printf("%02X", c->u_iv.iv[i]);
    e30c:	e59f65f4 	ldr	r6, [pc, #1524]	; e908 <_gcry_cipher_cfb_decrypt+0x60c>
    e310:	e2485001 	sub	r5, r8, #1
    printf("_gcry_cipher_cfb_decrypt inbuflen %d outbuflen %d cfb_bulk %d\n", 
    e314:	e08f0000 	add	r0, pc, r0
    e318:	e2884007 	add	r4, r8, #7
                          const unsigned char *inbuf, size_t inbuflen) {
    e31c:	e58d1024 	str	r1, [sp, #36]	; 0x24
    printf("Initial iv contents: ");
    e320:	e1a07005 	mov	r7, r5
    printf("_gcry_cipher_cfb_decrypt inbuflen %d outbuflen %d cfb_bulk %d\n", 
    e324:	e59d1080 	ldr	r1, [sp, #128]	; 0x80
                          const unsigned char *inbuf, size_t inbuflen) {
    e328:	e58d3028 	str	r3, [sp, #40]	; 0x28
    printf("_gcry_cipher_cfb_decrypt inbuflen %d outbuflen %d cfb_bulk %d\n", 
    e32c:	e3a03001 	mov	r3, #1
                          const unsigned char *inbuf, size_t inbuflen) {
    e330:	e58d201c 	str	r2, [sp, #28]
    printf("_gcry_cipher_cfb_decrypt inbuflen %d outbuflen %d cfb_bulk %d\n", 
    e334:	eb000c32 	bl	11404 <tfp_printf>
    printf("Initial iv contents: ");
    e338:	e59f05cc 	ldr	r0, [pc, #1484]	; e90c <_gcry_cipher_cfb_decrypt+0x610>
    for (int i = 0; i < 8; i++) printf("%02X", c->u_iv.iv[i]);
    e33c:	e08f6006 	add	r6, pc, r6
    printf("Initial iv contents: ");
    e340:	e08f0000 	add	r0, pc, r0
    e344:	eb000c2e 	bl	11404 <tfp_printf>
    for (int i = 0; i < 8; i++) printf("%02X", c->u_iv.iv[i]);
    e348:	e5f71001 	ldrb	r1, [r7, #1]!
    e34c:	e1a00006 	mov	r0, r6
    e350:	eb000c2b 	bl	11404 <tfp_printf>
    e354:	e1570004 	cmp	r7, r4
    e358:	1afffffa 	bne	e348 <_gcry_cipher_cfb_decrypt+0x4c>
    printf("\n");
    e35c:	e59f05ac 	ldr	r0, [pc, #1452]	; e910 <_gcry_cipher_cfb_decrypt+0x614>
    e360:	e08f0000 	add	r0, pc, r0
    e364:	eb000c26 	bl	11404 <tfp_printf>
    if (outbuflen < inbuflen)
    e368:	e59d3080 	ldr	r3, [sp, #128]	; 0x80
    e36c:	e59d201c 	ldr	r2, [sp, #28]
    e370:	e1530002 	cmp	r3, r2
        return -1;//GPG_ERR_BUFFER_TOO_SHORT;
    e374:	83e04000 	mvnhi	r4, #0
    if (outbuflen < inbuflen)
    e378:	8a00007a 	bhi	e568 <_gcry_cipher_cfb_decrypt+0x26c>
    if (inbuflen <= c->unused) {
    e37c:	e5983020 	ldr	r3, [r8, #32]
    e380:	e59d2080 	ldr	r2, [sp, #128]	; 0x80
    e384:	e1530002 	cmp	r3, r2
    e388:	2a00013d 	bcs	e884 <_gcry_cipher_cfb_decrypt+0x588>
    if (c->unused) {
    e38c:	e3530000 	cmp	r3, #0
    e390:	1a00010f 	bne	e7d4 <_gcry_cipher_cfb_decrypt+0x4d8>
    if (inbuflen >= blocksize_x_2 && 1){//c->bulk.cfb_dec) {
    e394:	e59d3080 	ldr	r3, [sp, #128]	; 0x80
    e398:	e353000f 	cmp	r3, #15
    e39c:	8a000074 	bhi	e574 <_gcry_cipher_cfb_decrypt+0x278>
        printf("cfb_decrypt 4 %d %d %d\n", inbuflen, outbuflen, c->unused);
    e3a0:	e59d401c 	ldr	r4, [sp, #28]
    e3a4:	e3a03000 	mov	r3, #0
    e3a8:	e59f0564 	ldr	r0, [pc, #1380]	; e914 <_gcry_cipher_cfb_decrypt+0x618>
    e3ac:	e59d1080 	ldr	r1, [sp, #128]	; 0x80
    e3b0:	e1a02004 	mov	r2, r4
    e3b4:	e08f0000 	add	r0, pc, r0
    e3b8:	eb000c11 	bl	11404 <tfp_printf>
    if (inbuflen >= blocksize) {
    e3bc:	e59d3080 	ldr	r3, [sp, #128]	; 0x80
    e3c0:	e3530007 	cmp	r3, #7
    e3c4:	9a000142 	bls	e8d4 <_gcry_cipher_cfb_decrypt+0x5d8>
        printf("cfb_decrypt 5 %d %d %d\n", inbuflen, outbuflen, c->unused);
    e3c8:	e59f0548 	ldr	r0, [pc, #1352]	; e918 <_gcry_cipher_cfb_decrypt+0x61c>
    e3cc:	e1a02004 	mov	r2, r4
    e3d0:	e5983020 	ldr	r3, [r8, #32]
        struct Block ivBlock = blockFromBytes(c->u_iv.iv);
    e3d4:	e28d5038 	add	r5, sp, #56	; 0x38
        printf("cfb_decrypt 5 %d %d %d\n", inbuflen, outbuflen, c->unused);
    e3d8:	e08f0000 	add	r0, pc, r0
        ivBlock = encrypt(c->key, ivBlock, 0);
    e3dc:	e28d6030 	add	r6, sp, #48	; 0x30
        printf("cfb_decrypt 5 %d %d %d\n", inbuflen, outbuflen, c->unused);
    e3e0:	e59d1080 	ldr	r1, [sp, #128]	; 0x80
    printf("%08X%08X\n", block.msb, block.lsb);
    e3e4:	e59f7530 	ldr	r7, [pc, #1328]	; e91c <_gcry_cipher_cfb_decrypt+0x620>
        printf("cfb_decrypt 5 %d %d %d\n", inbuflen, outbuflen, c->unused);
    e3e8:	eb000c05 	bl	11404 <tfp_printf>
        inbuflen -= blocksize;
    e3ec:	e59d3080 	ldr	r3, [sp, #128]	; 0x80
        cipher_block_cpy(c->lastiv, c->u_iv.iv, blocksize);
    e3f0:	e3a02008 	mov	r2, #8
    printf("%08X%08X\n", block.msb, block.lsb);
    e3f4:	e08f7007 	add	r7, pc, r7
        cipher_block_cpy(c->lastiv, c->u_iv.iv, blocksize);
    e3f8:	e1a01008 	mov	r1, r8
    e3fc:	e2880010 	add	r0, r8, #16
        inbuflen -= blocksize;
    e400:	e2434008 	sub	r4, r3, #8
        cipher_block_cpy(c->lastiv, c->u_iv.iv, blocksize);
    e404:	ebfffe2b 	bl	dcb8 <cipher_block_cpy>
        struct Block ivBlock = blockFromBytes(c->u_iv.iv);
    e408:	e1a01008 	mov	r1, r8
    e40c:	e1a00005 	mov	r0, r5
    e410:	ebffffa7 	bl	e2b4 <blockFromBytes>
    printf("%08X%08X\n", block.msb, block.lsb);
    e414:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
    e418:	e1a00007 	mov	r0, r7
    e41c:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
    e420:	eb000bf7 	bl	11404 <tfp_printf>
        ivBlock = encrypt(c->key, ivBlock, 0);
    e424:	e3a03000 	mov	r3, #0
    e428:	e1a00006 	mov	r0, r6
    e42c:	e58d3000 	str	r3, [sp]
    e430:	e2881030 	add	r1, r8, #48	; 0x30
    e434:	e895000c 	ldm	r5, {r2, r3}
    e438:	ebffff73 	bl	e20c <encrypt>
    e43c:	e8960003 	ldm	r6, {r0, r1}
        bytesFromBlock(ivBlock, c->u_iv.iv);
    e440:	e1a02008 	mov	r2, r8
        ivBlock = encrypt(c->key, ivBlock, 0);
    e444:	e1a06000 	mov	r6, r0
    e448:	e1a09001 	mov	r9, r1
    e44c:	e8850003 	stm	r5, {r0, r1}
        bytesFromBlock(ivBlock, c->u_iv.iv);
    e450:	ebffff59 	bl	e1bc <bytesFromBlock>
    printf("%08X%08X\n", block.msb, block.lsb);
    e454:	e1a02009 	mov	r2, r9
    e458:	e1a01006 	mov	r1, r6
    e45c:	e1a00007 	mov	r0, r7
    e460:	eb000be7 	bl	11404 <tfp_printf>
        cipher_block_xor_n_copy(outbuf, c->u_iv.iv, inbuf, blocksize);
    e464:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    e468:	e1a01008 	mov	r1, r8
    e46c:	e1a02003 	mov	r2, r3
        inbuf += blocksize;
    e470:	e2833008 	add	r3, r3, #8
    e474:	e58d3028 	str	r3, [sp, #40]	; 0x28
        cipher_block_xor_n_copy(outbuf, c->u_iv.iv, inbuf, blocksize);
    e478:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
    e47c:	e1a00003 	mov	r0, r3
        outbuf += blocksize;
    e480:	e2833008 	add	r3, r3, #8
    e484:	e58d3024 	str	r3, [sp, #36]	; 0x24
        cipher_block_xor_n_copy(outbuf, c->u_iv.iv, inbuf, blocksize);
    e488:	e3a03008 	mov	r3, #8
    e48c:	ebfffeb7 	bl	df70 <cipher_block_xor_n_copy>
    if (inbuflen) {
    e490:	e3540000 	cmp	r4, #0
    e494:	0a000033 	beq	e568 <_gcry_cipher_cfb_decrypt+0x26c>
        printf("cfb_decrypt 6 %d %d %d\n", inbuflen, outbuflen, c->unused);
    e498:	e59f0480 	ldr	r0, [pc, #1152]	; e920 <_gcry_cipher_cfb_decrypt+0x624>
    e49c:	e1a01004 	mov	r1, r4
    e4a0:	e5983020 	ldr	r3, [r8, #32]
        struct Block ivBlock = blockFromBytes(c->u_iv.iv);
    e4a4:	e28d5040 	add	r5, sp, #64	; 0x40
        printf("cfb_decrypt 6 %d %d %d\n", inbuflen, outbuflen, c->unused);
    e4a8:	e59d201c 	ldr	r2, [sp, #28]
        ivBlock = encrypt(c->key, ivBlock, 0);
    e4ac:	e28d7030 	add	r7, sp, #48	; 0x30
        printf("cfb_decrypt 6 %d %d %d\n", inbuflen, outbuflen, c->unused);
    e4b0:	e08f0000 	add	r0, pc, r0
        ivBlock = encrypt(c->key, ivBlock, 0);
    e4b4:	e3a09000 	mov	r9, #0
    printf("%08X%08X\n", block.msb, block.lsb);
    e4b8:	e59f6464 	ldr	r6, [pc, #1124]	; e924 <_gcry_cipher_cfb_decrypt+0x628>
        printf("cfb_decrypt 6 %d %d %d\n", inbuflen, outbuflen, c->unused);
    e4bc:	eb000bd0 	bl	11404 <tfp_printf>
        cipher_block_cpy(c->lastiv, c->u_iv.iv, blocksize);
    e4c0:	e3a02008 	mov	r2, #8
    e4c4:	e1a01008 	mov	r1, r8
    printf("%08X%08X\n", block.msb, block.lsb);
    e4c8:	e08f6006 	add	r6, pc, r6
        cipher_block_cpy(c->lastiv, c->u_iv.iv, blocksize);
    e4cc:	e2880010 	add	r0, r8, #16
    e4d0:	ebfffdf8 	bl	dcb8 <cipher_block_cpy>
        struct Block ivBlock = blockFromBytes(c->u_iv.iv);
    e4d4:	e1a01008 	mov	r1, r8
    e4d8:	e1a00005 	mov	r0, r5
    e4dc:	ebffff74 	bl	e2b4 <blockFromBytes>
    printf("%08X%08X\n", block.msb, block.lsb);
    e4e0:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
    e4e4:	e1a00006 	mov	r0, r6
    e4e8:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
    e4ec:	eb000bc4 	bl	11404 <tfp_printf>
        ivBlock = encrypt(c->key, ivBlock, 0);
    e4f0:	e58d9000 	str	r9, [sp]
    e4f4:	e1a00007 	mov	r0, r7
    e4f8:	e895000c 	ldm	r5, {r2, r3}
    e4fc:	e2881030 	add	r1, r8, #48	; 0x30
    e500:	ebffff41 	bl	e20c <encrypt>
    e504:	e8970003 	ldm	r7, {r0, r1}
        bytesFromBlock(ivBlock, c->u_iv.iv);
    e508:	e1a02008 	mov	r2, r8
        ivBlock = encrypt(c->key, ivBlock, 0);
    e50c:	e1a07000 	mov	r7, r0
    e510:	e1a0a001 	mov	sl, r1
    e514:	e8850003 	stm	r5, {r0, r1}
        bytesFromBlock(ivBlock, c->u_iv.iv);
    e518:	ebffff27 	bl	e1bc <bytesFromBlock>
    printf("%08X%08X\n", block.msb, block.lsb);
    e51c:	e1a0200a 	mov	r2, sl
    e520:	e1a01007 	mov	r1, r7
    e524:	e1a00006 	mov	r0, r6
    e528:	eb000bb5 	bl	11404 <tfp_printf>
        buf_xor_n_copy(outbuf, c->u_iv.iv, inbuf, inbuflen);
    e52c:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
        c->unused -= inbuflen;
    e530:	e2643008 	rsb	r3, r4, #8
        buf_xor_n_copy(outbuf, c->u_iv.iv, inbuf, inbuflen);
    e534:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
    e538:	e1a01008 	mov	r1, r8
        c->unused -= inbuflen;
    e53c:	e5883020 	str	r3, [r8, #32]
        buf_xor_n_copy(outbuf, c->u_iv.iv, inbuf, inbuflen);
    e540:	e1a03004 	mov	r3, r4
    return 0;
    e544:	e1a04009 	mov	r4, r9
        buf_xor_n_copy(outbuf, c->u_iv.iv, inbuf, inbuflen);
    e548:	ebfffe7f 	bl	df4c <buf_xor_n_copy>
        ivBlock = blockFromBytes(c->u_iv.iv);
    e54c:	e1a01008 	mov	r1, r8
    e550:	e1a00005 	mov	r0, r5
    e554:	ebffff56 	bl	e2b4 <blockFromBytes>
    printf("%08X%08X\n", block.msb, block.lsb);
    e558:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
    e55c:	e1a00006 	mov	r0, r6
    e560:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
    e564:	eb000ba6 	bl	11404 <tfp_printf>
}
    e568:	e1a00004 	mov	r0, r4
    e56c:	e28dd05c 	add	sp, sp, #92	; 0x5c
    e570:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        printf("cfb_decrypt 3 %d %d %d\n", inbuflen, outbuflen, c->unused);
    e574:	e59f03ac 	ldr	r0, [pc, #940]	; e928 <_gcry_cipher_cfb_decrypt+0x62c>
    e578:	e3a03000 	mov	r3, #0
    e57c:	e59d201c 	ldr	r2, [sp, #28]
    e580:	e59d1080 	ldr	r1, [sp, #128]	; 0x80
    e584:	e08f0000 	add	r0, pc, r0
        printf("%02X", buf[i]);
    e588:	e59f639c 	ldr	r6, [pc, #924]	; e92c <_gcry_cipher_cfb_decrypt+0x630>
        printf("cfb_decrypt 3 %d %d %d\n", inbuflen, outbuflen, c->unused);
    e58c:	eb000b9c 	bl	11404 <tfp_printf>
        size_t nblocks = inbuflen >> blocksize_shift;
    e590:	e59d3080 	ldr	r3, [sp, #128]	; 0x80
    printf("_gcry_cast5_cfb_dec\n");
    e594:	e59f0394 	ldr	r0, [pc, #916]	; e930 <_gcry_cipher_cfb_decrypt+0x634>
        size_t nblocks = inbuflen >> blocksize_shift;
    e598:	e1a031a3 	lsr	r3, r3, #3
    printf("_gcry_cast5_cfb_dec\n");
    e59c:	e08f0000 	add	r0, pc, r0
        size_t nblocks = inbuflen >> blocksize_shift;
    e5a0:	e1a07003 	mov	r7, r3
    e5a4:	e58d300c 	str	r3, [sp, #12]
    printf("_gcry_cast5_cfb_dec\n");
    e5a8:	eb000b95 	bl	11404 <tfp_printf>
    printf("nblocks: %d\n", nblocks);
    e5ac:	e59f0380 	ldr	r0, [pc, #896]	; e934 <_gcry_cipher_cfb_decrypt+0x638>
    e5b0:	e1a01007 	mov	r1, r7
        printf("%02X", buf[i]);
    e5b4:	e08f6006 	add	r6, pc, r6
    printf("nblocks: %d\n", nblocks);
    e5b8:	e08f0000 	add	r0, pc, r0
    e5bc:	eb000b90 	bl	11404 <tfp_printf>
    printf("%s: ", desc);
    e5c0:	e59f1370 	ldr	r1, [pc, #880]	; e938 <_gcry_cipher_cfb_decrypt+0x63c>
    e5c4:	e59f0370 	ldr	r0, [pc, #880]	; e93c <_gcry_cipher_cfb_decrypt+0x640>
    e5c8:	e08f1001 	add	r1, pc, r1
    e5cc:	e08f0000 	add	r0, pc, r0
    e5d0:	eb000b8b 	bl	11404 <tfp_printf>
        printf("%02X", buf[i]);
    e5d4:	e5f51001 	ldrb	r1, [r5, #1]!
    e5d8:	e1a00006 	mov	r0, r6
    e5dc:	eb000b88 	bl	11404 <tfp_printf>
    for (size_t i = 0; i < len; i++) {
    e5e0:	e1550004 	cmp	r5, r4
    e5e4:	1afffffa 	bne	e5d4 <_gcry_cipher_cfb_decrypt+0x2d8>
    printf("\n");
    e5e8:	e59f0350 	ldr	r0, [pc, #848]	; e940 <_gcry_cipher_cfb_decrypt+0x644>
    e5ec:	e08f0000 	add	r0, pc, r0
    e5f0:	eb000b83 	bl	11404 <tfp_printf>
    for (; nblocks >= 3; nblocks -= 3) {
    e5f4:	e59d300c 	ldr	r3, [sp, #12]
    e5f8:	e3530002 	cmp	r3, #2
    e5fc:	0a0000b6 	beq	e8dc <_gcry_cipher_cfb_decrypt+0x5e0>
    e600:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
        ivBlock = encrypt(context->key, ivBlock, debugCount>0);
    e604:	e288b030 	add	fp, r8, #48	; 0x30
        printf("%c", data[i]);
    e608:	e59f7334 	ldr	r7, [pc, #820]	; e944 <_gcry_cipher_cfb_decrypt+0x648>
    e60c:	e28d4038 	add	r4, sp, #56	; 0x38
    const unsigned char *inbuf = inbuf_arg;
    e610:	e59da028 	ldr	sl, [sp, #40]	; 0x28
    e614:	e2836017 	add	r6, r3, #23
        printf("%c", data[i]);
    e618:	e08f7007 	add	r7, pc, r7
    int debugCount = 1;
    e61c:	e3a03001 	mov	r3, #1
    e620:	e58d3014 	str	r3, [sp, #20]
    e624:	e28d9030 	add	r9, sp, #48	; 0x30
    e628:	e58d8020 	str	r8, [sp, #32]
    e62c:	e28d3040 	add	r3, sp, #64	; 0x40
    e630:	e58d3010 	str	r3, [sp, #16]
    e634:	e28d3048 	add	r3, sp, #72	; 0x48
    e638:	e58d302c 	str	r3, [sp, #44]	; 0x2c
        cipher_block_cpy(tmpbuf + 0, iv, CAST5_BLOCKSIZE);
    e63c:	e59d8020 	ldr	r8, [sp, #32]
    e640:	e3a02008 	mov	r2, #8
    e644:	e59d5010 	ldr	r5, [sp, #16]
    e648:	e1a01008 	mov	r1, r8
    e64c:	e1a00005 	mov	r0, r5
    e650:	ebfffd98 	bl	dcb8 <cipher_block_cpy>
        cipher_block_cpy(tmpbuf + 8, inbuf + 0, CAST5_BLOCKSIZE * 2);
    e654:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
    e658:	e3a02010 	mov	r2, #16
    e65c:	e1a0100a 	mov	r1, sl
    e660:	ebfffd94 	bl	dcb8 <cipher_block_cpy>
    e664:	e2463017 	sub	r3, r6, #23
        cipher_block_cpy(iv, inbuf + 16, CAST5_BLOCKSIZE);
    e668:	e1a00008 	mov	r0, r8
    e66c:	e58d3018 	str	r3, [sp, #24]
    e670:	e3a02008 	mov	r2, #8
    e674:	e28a1010 	add	r1, sl, #16
            block = encrypt(context->key, block, 0);//debugCount>0 && i==0);
    e678:	e3a08000 	mov	r8, #0
        cipher_block_cpy(iv, inbuf + 16, CAST5_BLOCKSIZE);
    e67c:	ebfffd8d 	bl	dcb8 <cipher_block_cpy>
        for (int i = 0; i < 3; i++) {
    e680:	e28d3058 	add	r3, sp, #88	; 0x58
    e684:	e58d3008 	str	r3, [sp, #8]
            struct Block block = blockFromBytes(tmpbuf + (i * CAST5_BLOCKSIZE));
    e688:	e1a01005 	mov	r1, r5
    e68c:	e1a00004 	mov	r0, r4
    e690:	ebffff07 	bl	e2b4 <blockFromBytes>
            block = encrypt(context->key, block, 0);//debugCount>0 && i==0);
    e694:	e58d8000 	str	r8, [sp]
    e698:	e1a0100b 	mov	r1, fp
    e69c:	e894000c 	ldm	r4, {r2, r3}
    e6a0:	e1a00009 	mov	r0, r9
    e6a4:	ebfffed8 	bl	e20c <encrypt>
    e6a8:	e8990003 	ldm	r9, {r0, r1}
            bytesFromBlock(block, tmpbuf + (i * CAST5_BLOCKSIZE));
    e6ac:	e1a02005 	mov	r2, r5
        for (int i = 0; i < 3; i++) {
    e6b0:	e2855008 	add	r5, r5, #8
            block = encrypt(context->key, block, 0);//debugCount>0 && i==0);
    e6b4:	e8840003 	stm	r4, {r0, r1}
            bytesFromBlock(block, tmpbuf + (i * CAST5_BLOCKSIZE));
    e6b8:	ebfffebf 	bl	e1bc <bytesFromBlock>
        for (int i = 0; i < 3; i++) {
    e6bc:	e59d3008 	ldr	r3, [sp, #8]
    e6c0:	e1530005 	cmp	r3, r5
    e6c4:	1affffef 	bne	e688 <_gcry_cipher_cfb_decrypt+0x38c>
        buf_xor(outbuf, inbuf, tmpbuf, CAST5_BLOCKSIZE * 3, FALSE);//debugCount>0);
    e6c8:	e59d0018 	ldr	r0, [sp, #24]
    e6cc:	e3a03018 	mov	r3, #24
    e6d0:	e59d2010 	ldr	r2, [sp, #16]
    e6d4:	e1a0100a 	mov	r1, sl
    e6d8:	e58d8000 	str	r8, [sp]
    e6dc:	e2465018 	sub	r5, r6, #24
    e6e0:	ebfffe2b 	bl	df94 <buf_xor>
        printf("%c", data[i]);
    e6e4:	e5f51001 	ldrb	r1, [r5, #1]!
    e6e8:	e1a00007 	mov	r0, r7
    e6ec:	eb000b44 	bl	11404 <tfp_printf>
    for (size_t i = 0; i < len; i++) {
    e6f0:	e1560005 	cmp	r6, r5
    e6f4:	1afffffa 	bne	e6e4 <_gcry_cipher_cfb_decrypt+0x3e8>
    for (; nblocks >= 3; nblocks -= 3) {
    e6f8:	e59d300c 	ldr	r3, [sp, #12]
        inbuf += CAST5_BLOCKSIZE * 3;
    e6fc:	e28aa018 	add	sl, sl, #24
    for (; nblocks >= 3; nblocks -= 3) {
    e700:	e2433003 	sub	r3, r3, #3
    e704:	e58d300c 	str	r3, [sp, #12]
    e708:	e3530002 	cmp	r3, #2
        debugCount--;
    e70c:	e59d3014 	ldr	r3, [sp, #20]
    e710:	e2433001 	sub	r3, r3, #1
    e714:	e58d3014 	str	r3, [sp, #20]
    e718:	e2863001 	add	r3, r6, #1
    for (; nblocks >= 3; nblocks -= 3) {
    e71c:	e2866018 	add	r6, r6, #24
    e720:	8affffc5 	bhi	e63c <_gcry_cipher_cfb_decrypt+0x340>
    for (; nblocks; nblocks--) {
    e724:	e59d200c 	ldr	r2, [sp, #12]
    e728:	e59d8020 	ldr	r8, [sp, #32]
    e72c:	e3520000 	cmp	r2, #0
    e730:	0a000042 	beq	e840 <_gcry_cipher_cfb_decrypt+0x544>
        printf("%c", data[i]);
    e734:	e59f720c 	ldr	r7, [pc, #524]	; e948 <_gcry_cipher_cfb_decrypt+0x64c>
    e738:	e2836007 	add	r6, r3, #7
    e73c:	e58db008 	str	fp, [sp, #8]
    e740:	e08f7007 	add	r7, pc, r7
    e744:	e59db014 	ldr	fp, [sp, #20]
        ivBlock = blockFromBytes(iv);
    e748:	e1a01008 	mov	r1, r8
    e74c:	e1a00004 	mov	r0, r4
    e750:	e2465008 	sub	r5, r6, #8
    e754:	ebfffed6 	bl	e2b4 <blockFromBytes>
        ivBlock = encrypt(context->key, ivBlock, debugCount>0);
    e758:	e59d1008 	ldr	r1, [sp, #8]
    e75c:	e35b0000 	cmp	fp, #0
    e760:	c3a03001 	movgt	r3, #1
    e764:	d3a03000 	movle	r3, #0
    e768:	e58d3000 	str	r3, [sp]
    e76c:	e1a00009 	mov	r0, r9
    e770:	e894000c 	ldm	r4, {r2, r3}
    e774:	ebfffea4 	bl	e20c <encrypt>
    e778:	e8990003 	ldm	r9, {r0, r1}
        bytesFromBlock(ivBlock, iv);
    e77c:	e1a02008 	mov	r2, r8
        ivBlock = encrypt(context->key, ivBlock, debugCount>0);
    e780:	e8840003 	stm	r4, {r0, r1}
        bytesFromBlock(ivBlock, iv);
    e784:	ebfffe8c 	bl	e1bc <bytesFromBlock>
        cipher_block_xor_n_copy(outbuf, iv, inbuf, CAST5_BLOCKSIZE);
    e788:	e3a03008 	mov	r3, #8
    e78c:	e1a0200a 	mov	r2, sl
    e790:	e1a01008 	mov	r1, r8
    e794:	e2460007 	sub	r0, r6, #7
    e798:	ebfffdf4 	bl	df70 <cipher_block_xor_n_copy>
        printf("%c", data[i]);
    e79c:	e5f51001 	ldrb	r1, [r5, #1]!
    e7a0:	e1a00007 	mov	r0, r7
    e7a4:	eb000b16 	bl	11404 <tfp_printf>
    for (size_t i = 0; i < len; i++) {
    e7a8:	e1550006 	cmp	r5, r6
    e7ac:	1afffffa 	bne	e79c <_gcry_cipher_cfb_decrypt+0x4a0>
    for (; nblocks; nblocks--) {
    e7b0:	e59d300c 	ldr	r3, [sp, #12]
        inbuf += CAST5_BLOCKSIZE;
    e7b4:	e28aa008 	add	sl, sl, #8
        debugCount--;
    e7b8:	e24bb001 	sub	fp, fp, #1
    for (; nblocks; nblocks--) {
    e7bc:	e2866008 	add	r6, r6, #8
    e7c0:	e3530001 	cmp	r3, #1
    e7c4:	0a00001d 	beq	e840 <_gcry_cipher_cfb_decrypt+0x544>
    e7c8:	e3a03001 	mov	r3, #1
    e7cc:	e58d300c 	str	r3, [sp, #12]
    e7d0:	eaffffdc 	b	e748 <_gcry_cipher_cfb_decrypt+0x44c>
        printf("cfb_decrypt 2 %d %d %d\n", inbuflen, outbuflen, c->unused);
    e7d4:	e59f0170 	ldr	r0, [pc, #368]	; e94c <_gcry_cipher_cfb_decrypt+0x650>
    e7d8:	e59d1080 	ldr	r1, [sp, #128]	; 0x80
    e7dc:	e08f0000 	add	r0, pc, r0
    e7e0:	e59d201c 	ldr	r2, [sp, #28]
    e7e4:	eb000b06 	bl	11404 <tfp_printf>
        inbuflen -= c->unused;
    e7e8:	e5983020 	ldr	r3, [r8, #32]
    e7ec:	e59d2080 	ldr	r2, [sp, #128]	; 0x80
        buf_xor_n_copy(outbuf, ivp, inbuf, c->unused);
    e7f0:	e59d7028 	ldr	r7, [sp, #40]	; 0x28
        ivp = c->u_iv.iv + blocksize - c->unused;
    e7f4:	e2631008 	rsb	r1, r3, #8
        buf_xor_n_copy(outbuf, ivp, inbuf, c->unused);
    e7f8:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
        inbuflen -= c->unused;
    e7fc:	e0422003 	sub	r2, r2, r3
    e800:	e58d2080 	str	r2, [sp, #128]	; 0x80
        buf_xor_n_copy(outbuf, ivp, inbuf, c->unused);
    e804:	e1a00006 	mov	r0, r6
    e808:	e0881001 	add	r1, r8, r1
    e80c:	e1a02007 	mov	r2, r7
    e810:	ebfffdcd 	bl	df4c <buf_xor_n_copy>
        outbuf += c->unused;
    e814:	e5983020 	ldr	r3, [r8, #32]
    e818:	e0862003 	add	r2, r6, r3
        inbuf += c->unused;
    e81c:	e0873003 	add	r3, r7, r3
    e820:	e58d3028 	str	r3, [sp, #40]	; 0x28
        c->unused = 0;
    e824:	e3a03000 	mov	r3, #0
    e828:	e5883020 	str	r3, [r8, #32]
    if (inbuflen >= blocksize_x_2 && 1){//c->bulk.cfb_dec) {
    e82c:	e59d3080 	ldr	r3, [sp, #128]	; 0x80
        outbuf += c->unused;
    e830:	e58d2024 	str	r2, [sp, #36]	; 0x24
    if (inbuflen >= blocksize_x_2 && 1){//c->bulk.cfb_dec) {
    e834:	e353000f 	cmp	r3, #15
    e838:	9afffed8 	bls	e3a0 <_gcry_cipher_cfb_decrypt+0xa4>
    e83c:	eaffff4c 	b	e574 <_gcry_cipher_cfb_decrypt+0x278>
    printf("\n\n_gcry_cast5_cfb_dec END\n");
    e840:	e59f0108 	ldr	r0, [pc, #264]	; e950 <_gcry_cipher_cfb_decrypt+0x654>
    e844:	e08f0000 	add	r0, pc, r0
    e848:	eb000aed 	bl	11404 <tfp_printf>
    wipememory(tmpbuf, sizeof(tmpbuf));
    e84c:	e59d0010 	ldr	r0, [sp, #16]
    e850:	e3a01018 	mov	r1, #24
    e854:	eb00025b 	bl	f1c8 <wipememory>
        outbuf += nblocks << blocksize_shift;
    e858:	e59d3080 	ldr	r3, [sp, #128]	; 0x80
    e85c:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
    e860:	e3c33007 	bic	r3, r3, #7
    e864:	e0822003 	add	r2, r2, r3
    e868:	e58d2024 	str	r2, [sp, #36]	; 0x24
        inbuf  += nblocks << blocksize_shift;
    e86c:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
    e870:	e0823003 	add	r3, r2, r3
    e874:	e58d3028 	str	r3, [sp, #40]	; 0x28
        inbuflen -= nblocks << blocksize_shift;
    e878:	e59d3080 	ldr	r3, [sp, #128]	; 0x80
    e87c:	e2034007 	and	r4, r3, #7
    if (inbuflen >= blocksize) {
    e880:	eaffff02 	b	e490 <_gcry_cipher_cfb_decrypt+0x194>
        printf("cfb_decrypt 1 %d %d %d\n", inbuflen, outbuflen, c->unused);
    e884:	e59f00c8 	ldr	r0, [pc, #200]	; e954 <_gcry_cipher_cfb_decrypt+0x658>
        return 0;
    e888:	e3a04000 	mov	r4, #0
        printf("cfb_decrypt 1 %d %d %d\n", inbuflen, outbuflen, c->unused);
    e88c:	e59d201c 	ldr	r2, [sp, #28]
    e890:	e59d1080 	ldr	r1, [sp, #128]	; 0x80
    e894:	e08f0000 	add	r0, pc, r0
    e898:	eb000ad9 	bl	11404 <tfp_printf>
        ivp = c->u_iv.iv + blocksize - c->unused;
    e89c:	e5981020 	ldr	r1, [r8, #32]
        buf_xor_n_copy(outbuf, ivp, inbuf, inbuflen);
    e8a0:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
    e8a4:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
        ivp = c->u_iv.iv + blocksize - c->unused;
    e8a8:	e2611008 	rsb	r1, r1, #8
        buf_xor_n_copy(outbuf, ivp, inbuf, inbuflen);
    e8ac:	e59d3080 	ldr	r3, [sp, #128]	; 0x80
    e8b0:	e0881001 	add	r1, r8, r1
    e8b4:	ebfffda4 	bl	df4c <buf_xor_n_copy>
        c->unused -= inbuflen;
    e8b8:	e5983020 	ldr	r3, [r8, #32]
}
    e8bc:	e1a00004 	mov	r0, r4
        c->unused -= inbuflen;
    e8c0:	e59d2080 	ldr	r2, [sp, #128]	; 0x80
    e8c4:	e0433002 	sub	r3, r3, r2
    e8c8:	e5883020 	str	r3, [r8, #32]
}
    e8cc:	e28dd05c 	add	sp, sp, #92	; 0x5c
    e8d0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e8d4:	e59d4080 	ldr	r4, [sp, #128]	; 0x80
    e8d8:	eafffeec 	b	e490 <_gcry_cipher_cfb_decrypt+0x194>
    const unsigned char *inbuf = inbuf_arg;
    e8dc:	e59da028 	ldr	sl, [sp, #40]	; 0x28
    int debugCount = 1;
    e8e0:	e3a02001 	mov	r2, #1
    e8e4:	e58d2014 	str	r2, [sp, #20]
    e8e8:	e28d2040 	add	r2, sp, #64	; 0x40
    unsigned char *outbuf = outbuf_arg;
    e8ec:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
        ivBlock = encrypt(context->key, ivBlock, debugCount>0);
    e8f0:	e288b030 	add	fp, r8, #48	; 0x30
    e8f4:	e58d2010 	str	r2, [sp, #16]
    e8f8:	e28d4038 	add	r4, sp, #56	; 0x38
    e8fc:	e28d9030 	add	r9, sp, #48	; 0x30
    e900:	eaffff8b 	b	e734 <_gcry_cipher_cfb_decrypt+0x438>
    e904:	000092d8 	.word	0x000092d8
    e908:	00008164 	.word	0x00008164
    e90c:	000092ec 	.word	0x000092ec
    e910:	00008ed0 	.word	0x00008ed0
    e914:	0000932c 	.word	0x0000932c
    e918:	00009320 	.word	0x00009320
    e91c:	0000931c 	.word	0x0000931c
    e920:	0000926c 	.word	0x0000926c
    e924:	00009248 	.word	0x00009248
    e928:	000090f0 	.word	0x000090f0
    e92c:	00007eec 	.word	0x00007eec
    e930:	000090f0 	.word	0x000090f0
    e934:	000090ec 	.word	0x000090ec
    e938:	000090ec 	.word	0x000090ec
    e93c:	000090ec 	.word	0x000090ec
    e940:	00008c44 	.word	0x00008c44
    e944:	000090a8 	.word	0x000090a8
    e948:	00008f80 	.word	0x00008f80
    e94c:	00008e80 	.word	0x00008e80
    e950:	00008e80 	.word	0x00008e80
    e954:	00008db0 	.word	0x00008db0

0000e958 <_gcry_cipher_decrypt>:
{
    e958:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e95c:	e1a07000 	mov	r7, r0
    e960:	e59d6018 	ldr	r6, [sp, #24]
    e964:	e1a04002 	mov	r4, r2
    printf("Caller params - in: %p, inlen: %zu\n", in, inlen);
    e968:	e59f0084 	ldr	r0, [pc, #132]	; e9f4 <_gcry_cipher_decrypt+0x9c>
{
    e96c:	e1a08001 	mov	r8, r1
    printf("Caller params - in: %p, inlen: %zu\n", in, inlen);
    e970:	e1a02006 	mov	r2, r6
    e974:	e1a01003 	mov	r1, r3
    e978:	e08f0000 	add	r0, pc, r0
{
    e97c:	e1a05003 	mov	r5, r3
    printf("Caller params - in: %p, inlen: %zu\n", in, inlen);
    e980:	eb000a9f 	bl	11404 <tfp_printf>
    printf("_gcry_cipher_decrypt inlen: %d, outSize: %d, unused: %d\n", inlen, outsize, h->unused);
    e984:	e59f006c 	ldr	r0, [pc, #108]	; e9f8 <_gcry_cipher_decrypt+0xa0>
    e988:	e1a02004 	mov	r2, r4
    e98c:	e5973020 	ldr	r3, [r7, #32]
    e990:	e1a01006 	mov	r1, r6
    e994:	e08f0000 	add	r0, pc, r0
    e998:	eb000a99 	bl	11404 <tfp_printf>
  if (!in) /* Caller requested in-place encryption. */
    e99c:	e3550000 	cmp	r5, #0
    e9a0:	0a00000d 	beq	e9dc <_gcry_cipher_decrypt+0x84>
if (inlen != outsize) {
    e9a4:	e1560004 	cmp	r6, r4
    e9a8:	0a000004 	beq	e9c0 <_gcry_cipher_decrypt+0x68>
    printf("Warning: inlen (%zu) != outsize (%zu)\n", inlen, outsize);
    e9ac:	e59f0048 	ldr	r0, [pc, #72]	; e9fc <_gcry_cipher_decrypt+0xa4>
    e9b0:	e1a02004 	mov	r2, r4
    e9b4:	e1a01006 	mov	r1, r6
    e9b8:	e08f0000 	add	r0, pc, r0
    e9bc:	eb000a90 	bl	11404 <tfp_printf>
  return _gcry_cipher_cfb_decrypt (h, out, outsize, in, inlen);
    e9c0:	e58d6018 	str	r6, [sp, #24]
    e9c4:	e1a03005 	mov	r3, r5
    e9c8:	e1a02004 	mov	r2, r4
    e9cc:	e1a01008 	mov	r1, r8
    e9d0:	e1a00007 	mov	r0, r7
}
    e9d4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  return _gcry_cipher_cfb_decrypt (h, out, outsize, in, inlen);
    e9d8:	eafffe47 	b	e2fc <_gcry_cipher_cfb_decrypt>
      printf("Caller requested in-place encryption.\n");
    e9dc:	e59f001c 	ldr	r0, [pc, #28]	; ea00 <_gcry_cipher_decrypt+0xa8>
    e9e0:	e1a06004 	mov	r6, r4
      in = out;
    e9e4:	e1a05008 	mov	r5, r8
      printf("Caller requested in-place encryption.\n");
    e9e8:	e08f0000 	add	r0, pc, r0
    e9ec:	eb000a84 	bl	11404 <tfp_printf>
if (inlen != outsize) {
    e9f0:	eafffff2 	b	e9c0 <_gcry_cipher_decrypt+0x68>
    e9f4:	00008dbc 	.word	0x00008dbc
    e9f8:	00008dc4 	.word	0x00008dc4
    e9fc:	00008e04 	.word	0x00008e04
    ea00:	00008dac 	.word	0x00008dac

0000ea04 <_gcry_cipher_cfb_encrypt>:
                          const unsigned char *inbuf, size_t inbuflen) {
    ea04:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea08:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    for (int i = 0; i < 8; i++) printf("%02x", c->u_iv.iv[i]);
    ea0c:	e59f7428 	ldr	r7, [pc, #1064]	; ee3c <_gcry_cipher_cfb_encrypt+0x438>
                          const unsigned char *inbuf, size_t inbuflen) {
    ea10:	e1a05000 	mov	r5, r0
    ea14:	e59d9060 	ldr	r9, [sp, #96]	; 0x60
    ea18:	e2454001 	sub	r4, r5, #1
    printf("_gcry_cipher_cfb_encrypt inbuflen %d outbuflen %d\n", inbuflen, outbuflen);
    ea1c:	e59f041c 	ldr	r0, [pc, #1052]	; ee40 <_gcry_cipher_cfb_encrypt+0x43c>
    ea20:	e2856007 	add	r6, r5, #7
                          const unsigned char *inbuf, size_t inbuflen) {
    ea24:	e58d100c 	str	r1, [sp, #12]
    printf("_gcry_cipher_cfb_encrypt inbuflen %d outbuflen %d\n", inbuflen, outbuflen);
    ea28:	e1a01009 	mov	r1, r9
    ea2c:	e08f0000 	add	r0, pc, r0
    for (int i = 0; i < 8; i++) printf("%02x", c->u_iv.iv[i]);
    ea30:	e08f7007 	add	r7, pc, r7
                          const unsigned char *inbuf, size_t inbuflen) {
    ea34:	e58d2014 	str	r2, [sp, #20]
    ea38:	e58d3010 	str	r3, [sp, #16]
    printf("_gcry_cipher_cfb_encrypt inbuflen %d outbuflen %d\n", inbuflen, outbuflen);
    ea3c:	eb000a70 	bl	11404 <tfp_printf>
    for (int i = 0; i < 8; i++) printf("%02x", c->u_iv.iv[i]);
    ea40:	e5f41001 	ldrb	r1, [r4, #1]!
    ea44:	e1a00007 	mov	r0, r7
    ea48:	eb000a6d 	bl	11404 <tfp_printf>
    ea4c:	e1540006 	cmp	r4, r6
    ea50:	1afffffa 	bne	ea40 <_gcry_cipher_cfb_encrypt+0x3c>
    printf("\n");
    ea54:	e59f03e8 	ldr	r0, [pc, #1000]	; ee44 <_gcry_cipher_cfb_encrypt+0x440>
    ea58:	e08f0000 	add	r0, pc, r0
    ea5c:	eb000a68 	bl	11404 <tfp_printf>
    if (outbuflen < inbuflen)
    ea60:	e59d3014 	ldr	r3, [sp, #20]
    ea64:	e1590003 	cmp	r9, r3
    ea68:	8a0000f1 	bhi	ee34 <_gcry_cipher_cfb_encrypt+0x430>
    if (inbuflen <= c->unused) {
    ea6c:	e5953020 	ldr	r3, [r5, #32]
    ea70:	e1530009 	cmp	r3, r9
    ea74:	2a0000d2 	bcs	edc4 <_gcry_cipher_cfb_encrypt+0x3c0>
    if (c->unused) {
    ea78:	e3530000 	cmp	r3, #0
    ea7c:	1a000079 	bne	ec68 <_gcry_cipher_cfb_encrypt+0x264>
    printf("cfb_encrypt 4 %d %d %d\n", inbuflen, outbuflen, c->unused);
    ea80:	e59f03c0 	ldr	r0, [pc, #960]	; ee48 <_gcry_cipher_cfb_encrypt+0x444>
    ea84:	e3a03000 	mov	r3, #0
    ea88:	e59d2014 	ldr	r2, [sp, #20]
    ea8c:	e1a01009 	mov	r1, r9
    ea90:	e08f0000 	add	r0, pc, r0
    ea94:	eb000a5a 	bl	11404 <tfp_printf>
    while (inbuflen >= blocksize_x_2) {
    ea98:	e359000f 	cmp	r9, #15
    ea9c:	9a00006c 	bls	ec54 <_gcry_cipher_cfb_encrypt+0x250>
        ivBlock = encrypt(c->key, ivBlock, 0);
    eaa0:	e59d2010 	ldr	r2, [sp, #16]
    eaa4:	e2493010 	sub	r3, r9, #16
    eaa8:	e58d301c 	str	r3, [sp, #28]
    eaac:	e285b030 	add	fp, r5, #48	; 0x30
    eab0:	e1a031a3 	lsr	r3, r3, #3
    eab4:	e1a06002 	mov	r6, r2
    eab8:	e58d3018 	str	r3, [sp, #24]
    eabc:	e2833001 	add	r3, r3, #1
    printf("%08X%08X\n", block.msb, block.lsb);
    eac0:	e59fa384 	ldr	sl, [pc, #900]	; ee4c <_gcry_cipher_cfb_encrypt+0x448>
    eac4:	e28d4030 	add	r4, sp, #48	; 0x30
    eac8:	e0823183 	add	r3, r2, r3, lsl #3
    eacc:	e28d7020 	add	r7, sp, #32
        ivBlock = encrypt(c->key, ivBlock, 0);
    ead0:	e58d9060 	str	r9, [sp, #96]	; 0x60
    ead4:	e1a09003 	mov	r9, r3
    printf("%08X%08X\n", block.msb, block.lsb);
    ead8:	e08fa00a 	add	sl, pc, sl
        ivBlock = encrypt(c->key, ivBlock, 0);
    eadc:	e59d800c 	ldr	r8, [sp, #12]
        struct Block ivBlock = blockFromBytes(c->u_iv.iv);
    eae0:	e1a01005 	mov	r1, r5
    eae4:	e1a00004 	mov	r0, r4
    eae8:	ebfffdf1 	bl	e2b4 <blockFromBytes>
        ivBlock = encrypt(c->key, ivBlock, 0);
    eaec:	e3a03000 	mov	r3, #0
    eaf0:	e1a0100b 	mov	r1, fp
    eaf4:	e58d3000 	str	r3, [sp]
    eaf8:	e1a00007 	mov	r0, r7
    eafc:	e894000c 	ldm	r4, {r2, r3}
    eb00:	ebfffdc1 	bl	e20c <encrypt>
    eb04:	e8970003 	ldm	r7, {r0, r1}
        bytesFromBlock(ivBlock, c->u_iv.iv);
    eb08:	e1a02005 	mov	r2, r5
        ivBlock = encrypt(c->key, ivBlock, 0);
    eb0c:	e8840003 	stm	r4, {r0, r1}
        bytesFromBlock(ivBlock, c->u_iv.iv);
    eb10:	ebfffda9 	bl	e1bc <bytesFromBlock>
    printf("%08X%08X\n", block.msb, block.lsb);
    eb14:	e59d2034 	ldr	r2, [sp, #52]	; 0x34
    eb18:	e1a0000a 	mov	r0, sl
    eb1c:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
    eb20:	eb000a37 	bl	11404 <tfp_printf>
        cipher_block_xor_2dst(outbuf, c->u_iv.iv, inbuf, blocksize);
    eb24:	e1a02006 	mov	r2, r6
    eb28:	e1a00008 	mov	r0, r8
        inbuf += blocksize;
    eb2c:	e2866008 	add	r6, r6, #8
        cipher_block_xor_2dst(outbuf, c->u_iv.iv, inbuf, blocksize);
    eb30:	e3a03008 	mov	r3, #8
    eb34:	e1a01005 	mov	r1, r5
        outbuf += blocksize;
    eb38:	e2888008 	add	r8, r8, #8
        cipher_block_xor_2dst(outbuf, c->u_iv.iv, inbuf, blocksize);
    eb3c:	ebfffc35 	bl	dc18 <cipher_block_xor_2dst>
    while (inbuflen >= blocksize_x_2) {
    eb40:	e1560009 	cmp	r6, r9
    eb44:	1affffe5 	bne	eae0 <_gcry_cipher_cfb_encrypt+0xdc>
    eb48:	e59d301c 	ldr	r3, [sp, #28]
        inbuflen -= blocksize;
    eb4c:	e3e00007 	mvn	r0, #7
        outbuf += blocksize;
    eb50:	e59d200c 	ldr	r2, [sp, #12]
    eb54:	e3c33007 	bic	r3, r3, #7
    eb58:	e59d9060 	ldr	r9, [sp, #96]	; 0x60
    eb5c:	e2833008 	add	r3, r3, #8
    eb60:	e0822003 	add	r2, r2, r3
    eb64:	e58d200c 	str	r2, [sp, #12]
    eb68:	e2499008 	sub	r9, r9, #8
        inbuf += blocksize;
    eb6c:	e59d2010 	ldr	r2, [sp, #16]
    eb70:	e0823003 	add	r3, r2, r3
    eb74:	e58d3010 	str	r3, [sp, #16]
        inbuflen -= blocksize;
    eb78:	e59d3018 	ldr	r3, [sp, #24]
    eb7c:	e0299390 	mla	r9, r0, r3, r9
        printf("cfb_encrypt 5 %d %d %d\n", inbuflen, outbuflen, c->unused);
    eb80:	e59f02c8 	ldr	r0, [pc, #712]	; ee50 <_gcry_cipher_cfb_encrypt+0x44c>
    eb84:	e1a01009 	mov	r1, r9
    eb88:	e5953020 	ldr	r3, [r5, #32]
        struct Block ivBlock = blockFromBytes(c->u_iv.iv);
    eb8c:	e28d4028 	add	r4, sp, #40	; 0x28
        printf("cfb_encrypt 5 %d %d %d\n", inbuflen, outbuflen, c->unused);
    eb90:	e08f0000 	add	r0, pc, r0
        inbuflen -= blocksize;
    eb94:	e2499008 	sub	r9, r9, #8
        printf("cfb_encrypt 5 %d %d %d\n", inbuflen, outbuflen, c->unused);
    eb98:	e59d2014 	ldr	r2, [sp, #20]
    printf("%08X%08X\n", block.msb, block.lsb);
    eb9c:	e59f62b0 	ldr	r6, [pc, #688]	; ee54 <_gcry_cipher_cfb_encrypt+0x450>
        printf("cfb_encrypt 5 %d %d %d\n", inbuflen, outbuflen, c->unused);
    eba0:	eb000a17 	bl	11404 <tfp_printf>
        cipher_block_cpy(c->lastiv, c->u_iv.iv, blocksize);
    eba4:	e3a02008 	mov	r2, #8
    eba8:	e1a01005 	mov	r1, r5
    printf("%08X%08X\n", block.msb, block.lsb);
    ebac:	e08f6006 	add	r6, pc, r6
        cipher_block_cpy(c->lastiv, c->u_iv.iv, blocksize);
    ebb0:	e2850010 	add	r0, r5, #16
    ebb4:	ebfffc3f 	bl	dcb8 <cipher_block_cpy>
        struct Block ivBlock = blockFromBytes(c->u_iv.iv);
    ebb8:	e1a01005 	mov	r1, r5
    ebbc:	e1a00004 	mov	r0, r4
    ebc0:	ebfffdbb 	bl	e2b4 <blockFromBytes>
    printf("%08X%08X\n", block.msb, block.lsb);
    ebc4:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
    ebc8:	e1a00006 	mov	r0, r6
    ebcc:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
    ebd0:	eb000a0b 	bl	11404 <tfp_printf>
        ivBlock = encrypt(c->key, ivBlock, 0);
    ebd4:	e3a03000 	mov	r3, #0
    ebd8:	e1a00007 	mov	r0, r7
    ebdc:	e58d3000 	str	r3, [sp]
    ebe0:	e1a0100b 	mov	r1, fp
    ebe4:	e894000c 	ldm	r4, {r2, r3}
    ebe8:	ebfffd87 	bl	e20c <encrypt>
    ebec:	e8970003 	ldm	r7, {r0, r1}
        bytesFromBlock(ivBlock, c->u_iv.iv);
    ebf0:	e1a02005 	mov	r2, r5
        ivBlock = encrypt(c->key, ivBlock, 0);
    ebf4:	e1a07000 	mov	r7, r0
    ebf8:	e1a08001 	mov	r8, r1
    ebfc:	e8840003 	stm	r4, {r0, r1}
        bytesFromBlock(ivBlock, c->u_iv.iv);
    ec00:	ebfffd6d 	bl	e1bc <bytesFromBlock>
    printf("%08X%08X\n", block.msb, block.lsb);
    ec04:	e1a02008 	mov	r2, r8
    ec08:	e1a01007 	mov	r1, r7
    ec0c:	e1a00006 	mov	r0, r6
    ec10:	eb0009fb 	bl	11404 <tfp_printf>
        cipher_block_xor_2dst(outbuf, c->u_iv.iv, inbuf, blocksize);
    ec14:	e59d3010 	ldr	r3, [sp, #16]
    ec18:	e1a01005 	mov	r1, r5
    ec1c:	e1a02003 	mov	r2, r3
        inbuf += blocksize;
    ec20:	e2833008 	add	r3, r3, #8
    ec24:	e58d3010 	str	r3, [sp, #16]
        cipher_block_xor_2dst(outbuf, c->u_iv.iv, inbuf, blocksize);
    ec28:	e59d300c 	ldr	r3, [sp, #12]
    ec2c:	e1a00003 	mov	r0, r3
        outbuf += blocksize;
    ec30:	e2833008 	add	r3, r3, #8
    ec34:	e58d300c 	str	r3, [sp, #12]
        cipher_block_xor_2dst(outbuf, c->u_iv.iv, inbuf, blocksize);
    ec38:	e3a03008 	mov	r3, #8
    ec3c:	ebfffbf5 	bl	dc18 <cipher_block_xor_2dst>
    if (inbuflen) {
    ec40:	e3590000 	cmp	r9, #0
    return 0;
    ec44:	01a00009 	moveq	r0, r9
    if (inbuflen) {
    ec48:	1a000027 	bne	ecec <_gcry_cipher_cfb_encrypt+0x2e8>
}
    ec4c:	e28dd03c 	add	sp, sp, #60	; 0x3c
    ec50:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (inbuflen >= blocksize) {
    ec54:	e3590007 	cmp	r9, #7
    ec58:	9afffff8 	bls	ec40 <_gcry_cipher_cfb_encrypt+0x23c>
        ivBlock = encrypt(c->key, ivBlock, 0);
    ec5c:	e285b030 	add	fp, r5, #48	; 0x30
    ec60:	e28d7020 	add	r7, sp, #32
    ec64:	eaffffc5 	b	eb80 <_gcry_cipher_cfb_encrypt+0x17c>
        printf("cfb_encrypt 2 %d %d %d\n", inbuflen, outbuflen, c->unused);
    ec68:	e59f01e8 	ldr	r0, [pc, #488]	; ee58 <_gcry_cipher_cfb_encrypt+0x454>
    ec6c:	e1a01009 	mov	r1, r9
    ec70:	e59d2014 	ldr	r2, [sp, #20]
    ec74:	e08f0000 	add	r0, pc, r0
    ec78:	eb0009e1 	bl	11404 <tfp_printf>
        inbuflen -= c->unused;
    ec7c:	e595c020 	ldr	ip, [r5, #32]
    ec80:	e049900c 	sub	r9, r9, ip
    for (size_t i = 0; i < len; i++) {
    ec84:	e35c0000 	cmp	ip, #0
    ec88:	0a00000e 	beq	ecc8 <_gcry_cipher_cfb_encrypt+0x2c4>
    ec8c:	e59d3010 	ldr	r3, [sp, #16]
    ec90:	e26c2007 	rsb	r2, ip, #7
    ec94:	e0852002 	add	r2, r5, r2
    ec98:	e2431001 	sub	r1, r3, #1
    ec9c:	e59d300c 	ldr	r3, [sp, #12]
    eca0:	e081c00c 	add	ip, r1, ip
    eca4:	e2430001 	sub	r0, r3, #1
        byte temp = dst2[i] ^ src[i];
    eca8:	e5f1e001 	ldrb	lr, [r1, #1]!
    ecac:	e5f23001 	ldrb	r3, [r2, #1]!
    for (size_t i = 0; i < len; i++) {
    ecb0:	e151000c 	cmp	r1, ip
        byte temp = dst2[i] ^ src[i];
    ecb4:	e023300e 	eor	r3, r3, lr
        dst2[i] = temp;
    ecb8:	e5c23000 	strb	r3, [r2]
        dst1[i] = temp;
    ecbc:	e5e03001 	strb	r3, [r0, #1]!
    for (size_t i = 0; i < len; i++) {
    ecc0:	1afffff8 	bne	eca8 <_gcry_cipher_cfb_encrypt+0x2a4>
        outbuf += c->unused;
    ecc4:	e595c020 	ldr	ip, [r5, #32]
    ecc8:	e59d300c 	ldr	r3, [sp, #12]
    eccc:	e083300c 	add	r3, r3, ip
    ecd0:	e58d300c 	str	r3, [sp, #12]
        inbuf += c->unused;
    ecd4:	e59d3010 	ldr	r3, [sp, #16]
    ecd8:	e083300c 	add	r3, r3, ip
    ecdc:	e58d3010 	str	r3, [sp, #16]
        c->unused = 0;
    ece0:	e3a03000 	mov	r3, #0
    ece4:	e5853020 	str	r3, [r5, #32]
    ece8:	eaffff64 	b	ea80 <_gcry_cipher_cfb_encrypt+0x7c>
        printf("cfb_encrypt 6 %d %d %d\n", inbuflen, outbuflen, c->unused);
    ecec:	e59f0168 	ldr	r0, [pc, #360]	; ee5c <_gcry_cipher_cfb_encrypt+0x458>
    ecf0:	e1a01009 	mov	r1, r9
    ecf4:	e5953020 	ldr	r3, [r5, #32]
        struct Block ivBlock = blockFromBytes(c->u_iv.iv);
    ecf8:	e28d4030 	add	r4, sp, #48	; 0x30
        printf("cfb_encrypt 6 %d %d %d\n", inbuflen, outbuflen, c->unused);
    ecfc:	e59d2014 	ldr	r2, [sp, #20]
        ivBlock = encrypt(c->key, ivBlock, 0);
    ed00:	e28d7020 	add	r7, sp, #32
        printf("cfb_encrypt 6 %d %d %d\n", inbuflen, outbuflen, c->unused);
    ed04:	e08f0000 	add	r0, pc, r0
        ivBlock = encrypt(c->key, ivBlock, 0);
    ed08:	e3a08000 	mov	r8, #0
    printf("%08X%08X\n", block.msb, block.lsb);
    ed0c:	e59f614c 	ldr	r6, [pc, #332]	; ee60 <_gcry_cipher_cfb_encrypt+0x45c>
        printf("cfb_encrypt 6 %d %d %d\n", inbuflen, outbuflen, c->unused);
    ed10:	eb0009bb 	bl	11404 <tfp_printf>
        cipher_block_cpy(c->lastiv, c->u_iv.iv, blocksize);
    ed14:	e3a02008 	mov	r2, #8
    ed18:	e1a01005 	mov	r1, r5
    printf("%08X%08X\n", block.msb, block.lsb);
    ed1c:	e08f6006 	add	r6, pc, r6
        cipher_block_cpy(c->lastiv, c->u_iv.iv, blocksize);
    ed20:	e2850010 	add	r0, r5, #16
    ed24:	ebfffbe3 	bl	dcb8 <cipher_block_cpy>
        struct Block ivBlock = blockFromBytes(c->u_iv.iv);
    ed28:	e1a01005 	mov	r1, r5
    ed2c:	e1a00004 	mov	r0, r4
    ed30:	ebfffd5f 	bl	e2b4 <blockFromBytes>
    printf("%08X%08X\n", block.msb, block.lsb);
    ed34:	e59d2034 	ldr	r2, [sp, #52]	; 0x34
    ed38:	e1a00006 	mov	r0, r6
    ed3c:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
    ed40:	eb0009af 	bl	11404 <tfp_printf>
        ivBlock = encrypt(c->key, ivBlock, 0);
    ed44:	e58d8000 	str	r8, [sp]
    ed48:	e2851030 	add	r1, r5, #48	; 0x30
    ed4c:	e894000c 	ldm	r4, {r2, r3}
    ed50:	e1a00007 	mov	r0, r7
    ed54:	ebfffd2c 	bl	e20c <encrypt>
    ed58:	e8970003 	ldm	r7, {r0, r1}
        bytesFromBlock(ivBlock, c->u_iv.iv);
    ed5c:	e1a02005 	mov	r2, r5
        ivBlock = encrypt(c->key, ivBlock, 0);
    ed60:	e1a07000 	mov	r7, r0
    ed64:	e1a0a001 	mov	sl, r1
    ed68:	e8840003 	stm	r4, {r0, r1}
        bytesFromBlock(ivBlock, c->u_iv.iv);
    ed6c:	ebfffd12 	bl	e1bc <bytesFromBlock>
    printf("%08X%08X\n", block.msb, block.lsb);
    ed70:	e1a0200a 	mov	r2, sl
    ed74:	e1a01007 	mov	r1, r7
    ed78:	e1a00006 	mov	r0, r6
    ed7c:	eb0009a0 	bl	11404 <tfp_printf>
        buf_xor_2dst(outbuf, c->u_iv.iv, inbuf, inbuflen);
    ed80:	e59d2010 	ldr	r2, [sp, #16]
        c->unused -= inbuflen;
    ed84:	e2693008 	rsb	r3, r9, #8
        buf_xor_2dst(outbuf, c->u_iv.iv, inbuf, inbuflen);
    ed88:	e59d000c 	ldr	r0, [sp, #12]
    ed8c:	e1a01005 	mov	r1, r5
        c->unused -= inbuflen;
    ed90:	e5853020 	str	r3, [r5, #32]
        buf_xor_2dst(outbuf, c->u_iv.iv, inbuf, inbuflen);
    ed94:	e1a03009 	mov	r3, r9
    ed98:	ebfffbb6 	bl	dc78 <buf_xor_2dst>
        ivBlock = blockFromBytes(c->u_iv.iv);
    ed9c:	e1a01005 	mov	r1, r5
    eda0:	e1a00004 	mov	r0, r4
    eda4:	ebfffd42 	bl	e2b4 <blockFromBytes>
    printf("%08X%08X\n", block.msb, block.lsb);
    eda8:	e59d2034 	ldr	r2, [sp, #52]	; 0x34
    edac:	e1a00006 	mov	r0, r6
    edb0:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
    edb4:	eb000992 	bl	11404 <tfp_printf>
    return 0;
    edb8:	e1a00008 	mov	r0, r8
}
    edbc:	e28dd03c 	add	sp, sp, #60	; 0x3c
    edc0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        printf("cfb_encrypt 1 %d %d %d\n", inbuflen, outbuflen, c->unused);
    edc4:	e59f0098 	ldr	r0, [pc, #152]	; ee64 <_gcry_cipher_cfb_encrypt+0x460>
    edc8:	e1a01009 	mov	r1, r9
    edcc:	e59d2014 	ldr	r2, [sp, #20]
    edd0:	e08f0000 	add	r0, pc, r0
    edd4:	eb00098a 	bl	11404 <tfp_printf>
        ivp = c->u_iv.iv + blocksize - c->unused;
    edd8:	e5952020 	ldr	r2, [r5, #32]
    for (size_t i = 0; i < len; i++) {
    eddc:	e3590000 	cmp	r9, #0
    ede0:	0a00000e 	beq	ee20 <_gcry_cipher_cfb_encrypt+0x41c>
    ede4:	e59d3010 	ldr	r3, [sp, #16]
    ede8:	e2622007 	rsb	r2, r2, #7
    edec:	e0852002 	add	r2, r5, r2
    edf0:	e2431001 	sub	r1, r3, #1
    edf4:	e59d300c 	ldr	r3, [sp, #12]
    edf8:	e081e009 	add	lr, r1, r9
    edfc:	e2430001 	sub	r0, r3, #1
        byte temp = dst2[i] ^ src[i];
    ee00:	e5f1c001 	ldrb	ip, [r1, #1]!
    ee04:	e5f23001 	ldrb	r3, [r2, #1]!
    for (size_t i = 0; i < len; i++) {
    ee08:	e151000e 	cmp	r1, lr
        byte temp = dst2[i] ^ src[i];
    ee0c:	e023300c 	eor	r3, r3, ip
        dst2[i] = temp;
    ee10:	e5c23000 	strb	r3, [r2]
        dst1[i] = temp;
    ee14:	e5e03001 	strb	r3, [r0, #1]!
    for (size_t i = 0; i < len; i++) {
    ee18:	1afffff8 	bne	ee00 <_gcry_cipher_cfb_encrypt+0x3fc>
        c->unused -= inbuflen;
    ee1c:	e5952020 	ldr	r2, [r5, #32]
    ee20:	e0422009 	sub	r2, r2, r9
        return 0;
    ee24:	e3a00000 	mov	r0, #0
        c->unused -= inbuflen;
    ee28:	e5852020 	str	r2, [r5, #32]
}
    ee2c:	e28dd03c 	add	sp, sp, #60	; 0x3c
    ee30:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return -1; /* Buffer too short */
    ee34:	e3e00000 	mvn	r0, #0
    ee38:	eaffff83 	b	ec4c <_gcry_cipher_cfb_encrypt+0x248>
    ee3c:	00008064 	.word	0x00008064
    ee40:	00008db8 	.word	0x00008db8
    ee44:	000087d8 	.word	0x000087d8
    ee48:	00008db8 	.word	0x00008db8
    ee4c:	00008c38 	.word	0x00008c38
    ee50:	00008cd0 	.word	0x00008cd0
    ee54:	00008b64 	.word	0x00008b64
    ee58:	00008bbc 	.word	0x00008bbc
    ee5c:	00008b74 	.word	0x00008b74
    ee60:	000089f4 	.word	0x000089f4
    ee64:	00008a48 	.word	0x00008a48

0000ee68 <malloc>:
    heap_initialized = 1;
}

// Memory allocation
void* malloc(size_t size) {
    if (!heap_initialized) init_heap();
    ee68:	e59f10cc 	ldr	r1, [pc, #204]	; ef3c <malloc+0xd4>
    ee6c:	e08f1001 	add	r1, pc, r1
    ee70:	e5d1c000 	ldrb	ip, [r1]
    ee74:	e35c0000 	cmp	ip, #0
    ee78:	0a000011 	beq	eec4 <malloc+0x5c>
    if (size == 0) return NULL;
    ee7c:	e3500000 	cmp	r0, #0
    ee80:	0a00000d 	beq	eebc <malloc+0x54>
    
    // Align size to BLOCK_SIZE
    size = (size + sizeof(block_header_t) + (BLOCK_SIZE-1)) & ~(BLOCK_SIZE-1);
    
    block_header_t *curr = free_list;
    ee84:	e5913004 	ldr	r3, [r1, #4]
    size = (size + sizeof(block_header_t) + (BLOCK_SIZE-1)) & ~(BLOCK_SIZE-1);
    ee88:	e280101b 	add	r1, r0, #27
    ee8c:	e3c1100f 	bic	r1, r1, #15
    block_header_t *prev = NULL;
    
    // Find first fit
    while (curr) {
    ee90:	e3530000 	cmp	r3, #0
    ee94:	0a000008 	beq	eebc <malloc+0x54>
        if (curr->is_free && curr->size >= size) {
    ee98:	e5d32004 	ldrb	r2, [r3, #4]
    ee9c:	e3520000 	cmp	r2, #0
    eea0:	0a000002 	beq	eeb0 <malloc+0x48>
    eea4:	e5932000 	ldr	r2, [r3]
    eea8:	e1520001 	cmp	r2, r1
    eeac:	2a000012 	bcs	eefc <malloc+0x94>
            
            curr->is_free = 0;
            return (void*)((uint8_t*)curr + sizeof(block_header_t));
        }
        prev = curr;
        curr = curr->next;
    eeb0:	e5933008 	ldr	r3, [r3, #8]
    while (curr) {
    eeb4:	e3530000 	cmp	r3, #0
    eeb8:	1afffff6 	bne	ee98 <malloc+0x30>
    if (size == 0) return NULL;
    eebc:	e3a00000 	mov	r0, #0
    }
    
    return NULL;  // No space found
}
    eec0:	e12fff1e 	bx	lr
    free_list = (block_header_t*)heap;
    eec4:	e59f3074 	ldr	r3, [pc, #116]	; ef40 <malloc+0xd8>
    free_list->size = HEAP_SIZE;
    eec8:	e3a02802 	mov	r2, #131072	; 0x20000
    if (size == 0) return NULL;
    eecc:	e3500000 	cmp	r0, #0
    free_list = (block_header_t*)heap;
    eed0:	e08f3003 	add	r3, pc, r3
    eed4:	e5813004 	str	r3, [r1, #4]
    free_list->size = HEAP_SIZE;
    eed8:	e5832000 	str	r2, [r3]
    free_list->is_free = 1;
    eedc:	e3a02001 	mov	r2, #1
    heap_initialized = 1;
    eee0:	e5c12000 	strb	r2, [r1]
    size = (size + sizeof(block_header_t) + (BLOCK_SIZE-1)) & ~(BLOCK_SIZE-1);
    eee4:	1280101b 	addne	r1, r0, #27
    eee8:	13c1100f 	bicne	r1, r1, #15
    free_list->is_free = 1;
    eeec:	e5c32004 	strb	r2, [r3, #4]
    free_list->next = NULL;
    eef0:	e583c008 	str	ip, [r3, #8]
    if (size == 0) return NULL;
    eef4:	1affffe8 	bne	ee9c <malloc+0x34>
    eef8:	eaffffef 	b	eebc <malloc+0x54>
            if (curr->size >= size + BLOCK_SIZE + sizeof(block_header_t)) {
    eefc:	e281001c 	add	r0, r1, #28
    ef00:	e1520000 	cmp	r2, r0
    ef04:	3a000008 	bcc	ef2c <malloc+0xc4>
                block_header_t* next = (block_header_t*)((uint8_t*)curr + size);
    ef08:	e0830001 	add	r0, r3, r1
                next->size = curr->size - size;
    ef0c:	e0422001 	sub	r2, r2, r1
    ef10:	e7832001 	str	r2, [r3, r1]
                next->is_free = 1;
    ef14:	e3a02001 	mov	r2, #1
    ef18:	e5c02004 	strb	r2, [r0, #4]
                next->next = curr->next;
    ef1c:	e5932008 	ldr	r2, [r3, #8]
    ef20:	e5802008 	str	r2, [r0, #8]
                curr->size = size;
    ef24:	e5831000 	str	r1, [r3]
                curr->next = next;
    ef28:	e5830008 	str	r0, [r3, #8]
            curr->is_free = 0;
    ef2c:	e3a02000 	mov	r2, #0
            return (void*)((uint8_t*)curr + sizeof(block_header_t));
    ef30:	e283000c 	add	r0, r3, #12
            curr->is_free = 0;
    ef34:	e5c32004 	strb	r2, [r3, #4]
            return (void*)((uint8_t*)curr + sizeof(block_header_t));
    ef38:	e12fff1e 	bx	lr
    ef3c:	0002d3b4 	.word	0x0002d3b4
    ef40:	0002d358 	.word	0x0002d358

0000ef44 <free>:

// Memory deallocation
void free(void* ptr) {
    if (!ptr) return;
    ef44:	e3500000 	cmp	r0, #0
    ef48:	012fff1e 	bxeq	lr
    
    block_header_t* header = (block_header_t*)((uint8_t*)ptr - sizeof(block_header_t));
    header->is_free = 1;
    
    // Coalesce with next block if free
    if (header->next && header->next->is_free) {
    ef4c:	e5103004 	ldr	r3, [r0, #-4]
    header->is_free = 1;
    ef50:	e3a02001 	mov	r2, #1
void free(void* ptr) {
    ef54:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    if (header->next && header->next->is_free) {
    ef58:	e3530000 	cmp	r3, #0
    header->is_free = 1;
    ef5c:	e5402008 	strb	r2, [r0, #-8]
    block_header_t* header = (block_header_t*)((uint8_t*)ptr - sizeof(block_header_t));
    ef60:	e240e00c 	sub	lr, r0, #12
    if (header->next && header->next->is_free) {
    ef64:	0a000002 	beq	ef74 <free+0x30>
    ef68:	e5d32004 	ldrb	r2, [r3, #4]
    ef6c:	e3520000 	cmp	r2, #0
    ef70:	1a000015 	bne	efcc <free+0x88>
        header->size += header->next->size;
        header->next = header->next->next;
    }
    
    // Coalesce with previous block if free
    block_header_t* curr = free_list;
    ef74:	e59f306c 	ldr	r3, [pc, #108]	; efe8 <free+0xa4>
    ef78:	e08f3003 	add	r3, pc, r3
    ef7c:	e5933004 	ldr	r3, [r3, #4]
    while (curr && curr->next) {
    ef80:	e3530000 	cmp	r3, #0
    ef84:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
        if (curr->is_free && (uint8_t*)curr + curr->size == (uint8_t*)header) {
    ef88:	e1a02003 	mov	r2, r3
    while (curr && curr->next) {
    ef8c:	e5933008 	ldr	r3, [r3, #8]
    ef90:	e3530000 	cmp	r3, #0
    ef94:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
        if (curr->is_free && (uint8_t*)curr + curr->size == (uint8_t*)header) {
    ef98:	e5d21004 	ldrb	r1, [r2, #4]
    ef9c:	e3510000 	cmp	r1, #0
    efa0:	0afffff8 	beq	ef88 <free+0x44>
    efa4:	e5921000 	ldr	r1, [r2]
    efa8:	e082c001 	add	ip, r2, r1
    efac:	e15e000c 	cmp	lr, ip
    efb0:	1afffff4 	bne	ef88 <free+0x44>
            curr->size += header->size;
    efb4:	e510300c 	ldr	r3, [r0, #-12]
            curr->next = header->next;
    efb8:	e5100004 	ldr	r0, [r0, #-4]
            curr->size += header->size;
    efbc:	e0831001 	add	r1, r3, r1
            curr->next = header->next;
    efc0:	e5820008 	str	r0, [r2, #8]
            curr->size += header->size;
    efc4:	e5821000 	str	r1, [r2]
            break;
    efc8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
        header->size += header->next->size;
    efcc:	e593c000 	ldr	ip, [r3]
    efd0:	e510200c 	ldr	r2, [r0, #-12]
        header->next = header->next->next;
    efd4:	e5931008 	ldr	r1, [r3, #8]
        header->size += header->next->size;
    efd8:	e082300c 	add	r3, r2, ip
    efdc:	e500300c 	str	r3, [r0, #-12]
        header->next = header->next->next;
    efe0:	e5001004 	str	r1, [r0, #-4]
    efe4:	eaffffe2 	b	ef74 <free+0x30>
    efe8:	0002d2a8 	.word	0x0002d2a8

0000efec <xfree>:
    
    return ptr;
}

void xfree(void* p) {
    if (p) {
    efec:	e3500000 	cmp	r0, #0
    eff0:	012fff1e 	bxeq	lr
        free(p);
    eff4:	eaffffd2 	b	ef44 <free>

0000eff8 <memset>:
    return new_ptr;
}

void* memset(void* dest, int c, size_t n) {
    unsigned char* p = dest;
    while (n--) {
    eff8:	e3520000 	cmp	r2, #0
    effc:	012fff1e 	bxeq	lr
    f000:	e0802002 	add	r2, r0, r2
        *p++ = (unsigned char)c;
    f004:	e6ef1071 	uxtb	r1, r1
    unsigned char* p = dest;
    f008:	e1a03000 	mov	r3, r0
        *p++ = (unsigned char)c;
    f00c:	e4c31001 	strb	r1, [r3], #1
    while (n--) {
    f010:	e1530002 	cmp	r3, r2
    f014:	1afffffc 	bne	f00c <memset+0x14>
    f018:	e12fff1e 	bx	lr

0000f01c <xmalloc>:
    if (n == 0)
    f01c:	e3500001 	cmp	r0, #1
void* xmalloc(size_t n) {
    f020:	e92d4070 	push	{r4, r5, r6, lr}
    f024:	21a04000 	movcs	r4, r0
    f028:	33a04001 	movcc	r4, #1
    ptr = malloc(n);
    f02c:	e1a00004 	mov	r0, r4
    f030:	ebffff8c 	bl	ee68 <malloc>
    if (!ptr) {
    f034:	e2505000 	subs	r5, r0, #0
    f038:	0a000004 	beq	f050 <xmalloc+0x34>
    memset(ptr, 0, n);
    f03c:	e1a02004 	mov	r2, r4
    f040:	e3a01000 	mov	r1, #0
    f044:	ebffffeb 	bl	eff8 <memset>
}
    f048:	e1a00005 	mov	r0, r5
    f04c:	e8bd8070 	pop	{r4, r5, r6, pc}
        printf("xmalloc failed to allocate %zu bytes\n", n);
    f050:	e59f000c 	ldr	r0, [pc, #12]	; f064 <xmalloc+0x48>
    f054:	e1a01004 	mov	r1, r4
    f058:	e08f0000 	add	r0, pc, r0
    f05c:	eb0008e8 	bl	11404 <tfp_printf>
        return NULL;// abort(); /* In GnuPG we abort on allocation failure */
    f060:	eafffff8 	b	f048 <xmalloc+0x2c>
    f064:	00008838 	.word	0x00008838

0000f068 <xmalloc_clear>:
void* xmalloc_clear(size_t n) {
    f068:	e92d4070 	push	{r4, r5, r6, lr}
    f06c:	e1a05000 	mov	r5, r0
    void* ptr = malloc(n);
    f070:	ebffff7c 	bl	ee68 <malloc>
    if (ptr) {
    f074:	e2504000 	subs	r4, r0, #0
    f078:	0a000002 	beq	f088 <xmalloc_clear+0x20>
        memset(ptr, 0, n);
    f07c:	e1a02005 	mov	r2, r5
    f080:	e3a01000 	mov	r1, #0
    f084:	ebffffdb 	bl	eff8 <memset>
}
    f088:	e1a00004 	mov	r0, r4
    f08c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000f090 <xcalloc>:
    if (n && m > SIZE_MAX / n) {
    f090:	e3500000 	cmp	r0, #0
void* xcalloc(size_t n, size_t m) {
    f094:	e92d4070 	push	{r4, r5, r6, lr}
    if (n && m > SIZE_MAX / n) {
    f098:	0a000003 	beq	f0ac <xcalloc+0x1c>
    f09c:	e0832190 	umull	r2, r3, r0, r1
    f0a0:	e3530000 	cmp	r3, #0
        return NULL;
    f0a4:	13a05000 	movne	r5, #0
    f0a8:	1a000007 	bne	f0cc <xcalloc+0x3c>
    total = n * m;
    f0ac:	e0040091 	mul	r4, r1, r0
    ptr = malloc(total);
    f0b0:	e1a00004 	mov	r0, r4
    f0b4:	ebffff6b 	bl	ee68 <malloc>
    if (ptr) {
    f0b8:	e2505000 	subs	r5, r0, #0
    f0bc:	0a000002 	beq	f0cc <xcalloc+0x3c>
        memset(ptr, 0, total);
    f0c0:	e1a02004 	mov	r2, r4
    f0c4:	e3a01000 	mov	r1, #0
    f0c8:	ebffffca 	bl	eff8 <memset>
}
    f0cc:	e1a00005 	mov	r0, r5
    f0d0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000f0d4 <memcpy>:
}

void* memcpy(void* dest, const void* src, size_t n) {
    unsigned char* d = dest;
    const unsigned char* s = src;
    while (n--) {
    f0d4:	e3520000 	cmp	r2, #0
    f0d8:	012fff1e 	bxeq	lr
    f0dc:	e081c002 	add	ip, r1, r2
    f0e0:	e2403001 	sub	r3, r0, #1
        *d++ = *s++;
    f0e4:	e4d12001 	ldrb	r2, [r1], #1
    while (n--) {
    f0e8:	e151000c 	cmp	r1, ip
        *d++ = *s++;
    f0ec:	e5e32001 	strb	r2, [r3, #1]!
    while (n--) {
    f0f0:	1afffffb 	bne	f0e4 <memcpy+0x10>
    f0f4:	e12fff1e 	bx	lr

0000f0f8 <xrealloc>:
void* xrealloc(void* p, size_t n) {
    f0f8:	e92d4070 	push	{r4, r5, r6, lr}
    if (!p) {
    f0fc:	e2505000 	subs	r5, r0, #0
    f100:	0a000013 	beq	f154 <xrealloc+0x5c>
    if (n == 0) {
    f104:	e3510000 	cmp	r1, #0
    f108:	0a000014 	beq	f160 <xrealloc+0x68>
    size_t old_size = header->size - sizeof(block_header_t);
    f10c:	e515600c 	ldr	r6, [r5, #-12]
    f110:	e246600c 	sub	r6, r6, #12
    if (n <= old_size) {
    f114:	e1510006 	cmp	r1, r6
    f118:	91a04005 	movls	r4, r5
    f11c:	8a000001 	bhi	f128 <xrealloc+0x30>
}
    f120:	e1a00004 	mov	r0, r4
    f124:	e8bd8070 	pop	{r4, r5, r6, pc}
    new_ptr = malloc(n);
    f128:	e1a00001 	mov	r0, r1
    f12c:	ebffff4d 	bl	ee68 <malloc>
    if (!new_ptr) {
    f130:	e2504000 	subs	r4, r0, #0
    f134:	0afffff9 	beq	f120 <xrealloc+0x28>
    memcpy(new_ptr, p, old_size);
    f138:	e1a02006 	mov	r2, r6
    f13c:	e1a01005 	mov	r1, r5
    f140:	ebffffe3 	bl	f0d4 <memcpy>
    free(p);
    f144:	e1a00005 	mov	r0, r5
    f148:	ebffff7d 	bl	ef44 <free>
}
    f14c:	e1a00004 	mov	r0, r4
    f150:	e8bd8070 	pop	{r4, r5, r6, pc}
    f154:	e8bd4070 	pop	{r4, r5, r6, lr}
        return malloc(n);
    f158:	e1a00001 	mov	r0, r1
    f15c:	eaffff41 	b	ee68 <malloc>
        return NULL;
    f160:	e1a04001 	mov	r4, r1
        free(p);
    f164:	ebffff76 	bl	ef44 <free>
        return NULL;
    f168:	eaffffec 	b	f120 <xrealloc+0x28>

0000f16c <memmove>:

void* memmove(void* dest, const void* src, size_t n) {
    unsigned char* d = (unsigned char*)dest;
    const unsigned char* s = (const unsigned char*)src;
    // If dest is after src, copy from end to start to avoid overwriting source
    if (d > s && d < s + n) {
    f16c:	e1500001 	cmp	r0, r1
    f170:	9a00000b 	bls	f1a4 <memmove+0x38>
    f174:	e0813002 	add	r3, r1, r2
    f178:	e1530000 	cmp	r3, r0
    f17c:	9a000008 	bls	f1a4 <memmove+0x38>
        d += n;
    f180:	e080c002 	add	ip, r0, r2
        s += n;
        while (n--) {
    f184:	e3520000 	cmp	r2, #0
    f188:	012fff1e 	bxeq	lr
    f18c:	e1a0200c 	mov	r2, ip
            *--d = *--s;
    f190:	e573c001 	ldrb	ip, [r3, #-1]!
        while (n--) {
    f194:	e1510003 	cmp	r1, r3
            *--d = *--s;
    f198:	e562c001 	strb	ip, [r2, #-1]!
        while (n--) {
    f19c:	1afffffb 	bne	f190 <memmove+0x24>
    f1a0:	e12fff1e 	bx	lr
        }
    } else {
        // Otherwise copy from start to end
        while (n--) {
    f1a4:	e3520000 	cmp	r2, #0
    f1a8:	012fff1e 	bxeq	lr
    f1ac:	e081c002 	add	ip, r1, r2
    f1b0:	e2403001 	sub	r3, r0, #1
            *d++ = *s++;
    f1b4:	e4d12001 	ldrb	r2, [r1], #1
        while (n--) {
    f1b8:	e15c0001 	cmp	ip, r1
            *d++ = *s++;
    f1bc:	e5e32001 	strb	r2, [r3, #1]!
        while (n--) {
    f1c0:	1afffffb 	bne	f1b4 <memmove+0x48>
    f1c4:	e12fff1e 	bx	lr

0000f1c8 <wipememory>:
    return dest;
}

void wipememory(void *ptr, size_t len) {
    volatile char *p = (volatile char *)ptr;
    while (len--)
    f1c8:	e3510000 	cmp	r1, #0
    f1cc:	012fff1e 	bxeq	lr
    f1d0:	e0801001 	add	r1, r0, r1
        *p++ = 0;
    f1d4:	e3a02000 	mov	r2, #0
    f1d8:	e1a03000 	mov	r3, r0
    f1dc:	e2800001 	add	r0, r0, #1
    while (len--)
    f1e0:	e1500001 	cmp	r0, r1
        *p++ = 0;
    f1e4:	e5c32000 	strb	r2, [r3]
    while (len--)
    f1e8:	1afffffa 	bne	f1d8 <wipememory+0x10>
    f1ec:	e12fff1e 	bx	lr

0000f1f0 <strcpy>:
}

void strcpy(char *dest, const char *src) {
    while ((*dest++ = *src++) != '\0');
    f1f0:	e2400001 	sub	r0, r0, #1
    f1f4:	e4d13001 	ldrb	r3, [r1], #1
    f1f8:	e5e03001 	strb	r3, [r0, #1]!
    f1fc:	e3530000 	cmp	r3, #0
    f200:	1afffffb 	bne	f1f4 <strcpy+0x4>
    f204:	e12fff1e 	bx	lr

0000f208 <xtrycalloc>:
}

void *xtrycalloc(size_t nmemb, size_t size) {
    // Check for multiplication overflow
    if (nmemb && size && (nmemb * size) / nmemb != size) {
    f208:	e3500000 	cmp	r0, #0
    f20c:	13510000 	cmpne	r1, #0
void *xtrycalloc(size_t nmemb, size_t size) {
    f210:	e92d4070 	push	{r4, r5, r6, lr}
    if (nmemb && size && (nmemb * size) / nmemb != size) {
    f214:	e0050091 	mul	r5, r1, r0
    f218:	0a000002 	beq	f228 <xtrycalloc+0x20>
    f21c:	e730f015 	udiv	r0, r5, r0
    f220:	e1500001 	cmp	r0, r1
    f224:	1a000008 	bne	f24c <xtrycalloc+0x44>
        return NULL;
    }
    
    size_t total = nmemb * size;
    void *ptr = malloc(total);
    f228:	e1a00005 	mov	r0, r5
    f22c:	ebffff0d 	bl	ee68 <malloc>
    
    if (ptr) {
    f230:	e2504000 	subs	r4, r0, #0
    f234:	0a000002 	beq	f244 <xtrycalloc+0x3c>
        memset(ptr, 0, total);
    f238:	e1a02005 	mov	r2, r5
    f23c:	e3a01000 	mov	r1, #0
    f240:	ebffff6c 	bl	eff8 <memset>
    }
    
    return ptr;
}
    f244:	e1a00004 	mov	r0, r4
    f248:	e8bd8070 	pop	{r4, r5, r6, pc}
        return NULL;
    f24c:	e3a04000 	mov	r4, #0
}
    f250:	e1a00004 	mov	r0, r4
    f254:	e8bd8070 	pop	{r4, r5, r6, pc}

0000f258 <strchr>:
    return -1; // Fail for all other files
}

/* Find character in string */
char *strchr(const char *s, int c) {
    while (*s != (char)c) {
    f258:	e6ef1071 	uxtb	r1, r1
    f25c:	e1a03000 	mov	r3, r0
    f260:	e5d32000 	ldrb	r2, [r3]
    f264:	e1a00003 	mov	r0, r3
    f268:	e2833001 	add	r3, r3, #1
    f26c:	e1520001 	cmp	r2, r1
    f270:	012fff1e 	bxeq	lr
        if (!*s++)
    f274:	e3520000 	cmp	r2, #0
    f278:	1afffff8 	bne	f260 <strchr+0x8>
            return NULL;
    f27c:	e1a00002 	mov	r0, r2
    }
    return (char *)s;
}
    f280:	e12fff1e 	bx	lr

0000f284 <strcmp>:

/* String comparison */
int strcmp(const char *s1, const char *s2) {
    while (*s1 && (*s1 == *s2)) {
    f284:	e5d03000 	ldrb	r3, [r0]
    f288:	e3530000 	cmp	r3, #0
        s1++;
        s2++;
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
    f28c:	05d12000 	ldrbeq	r2, [r1]
    while (*s1 && (*s1 == *s2)) {
    f290:	1a000003 	bne	f2a4 <strcmp+0x20>
    f294:	ea000006 	b	f2b4 <strcmp+0x30>
    f298:	e5f03001 	ldrb	r3, [r0, #1]!
    f29c:	e3530000 	cmp	r3, #0
    f2a0:	0a000005 	beq	f2bc <strcmp+0x38>
        s2++;
    f2a4:	e1a0c001 	mov	ip, r1
    while (*s1 && (*s1 == *s2)) {
    f2a8:	e4d12001 	ldrb	r2, [r1], #1
    f2ac:	e1520003 	cmp	r2, r3
    f2b0:	0afffff8 	beq	f298 <strcmp+0x14>
}
    f2b4:	e0430002 	sub	r0, r3, r2
    f2b8:	e12fff1e 	bx	lr
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
    f2bc:	e5dc2001 	ldrb	r2, [ip, #1]
}
    f2c0:	e0430002 	sub	r0, r3, r2
    f2c4:	e12fff1e 	bx	lr

0000f2c8 <open>:
int open(const char *pathname, int flags, ...) {
    f2c8:	e92d000e 	push	{r1, r2, r3}
    if (strcmp(pathname, "stdout") == 0) return 1;
    f2cc:	e59f1040 	ldr	r1, [pc, #64]	; f314 <open+0x4c>
int open(const char *pathname, int flags, ...) {
    f2d0:	e92d4030 	push	{r4, r5, lr}
    f2d4:	e1a04000 	mov	r4, r0
    if (strcmp(pathname, "stdout") == 0) return 1;
    f2d8:	e08f1001 	add	r1, pc, r1
    f2dc:	ebffffe8 	bl	f284 <strcmp>
    f2e0:	e3500000 	cmp	r0, #0
    f2e4:	03a00001 	moveq	r0, #1
    f2e8:	0a000006 	beq	f308 <open+0x40>
    if (strcmp(pathname, "stdin") == 0) return 0;
    f2ec:	e59f1024 	ldr	r1, [pc, #36]	; f318 <open+0x50>
    f2f0:	e1a00004 	mov	r0, r4
    f2f4:	e08f1001 	add	r1, pc, r1
    f2f8:	ebffffe1 	bl	f284 <strcmp>
    f2fc:	e2500000 	subs	r0, r0, #0
    f300:	13a00001 	movne	r0, #1
    f304:	e2600000 	rsb	r0, r0, #0
}
    f308:	e8bd4030 	pop	{r4, r5, lr}
    f30c:	e28dd00c 	add	sp, sp, #12
    f310:	e12fff1e 	bx	lr
    f314:	000085e0 	.word	0x000085e0
    f318:	000085cc 	.word	0x000085cc

0000f31c <strdup>:

/* String duplication for xstrdup */
char *strdup(const char *s) {
    f31c:	e92d4070 	push	{r4, r5, r6, lr}
    f320:	e1a06000 	mov	r6, r0
    size_t len = strlen(s) + 1;
    f324:	eb000dbb 	bl	12a18 <strlen>
    f328:	e2805001 	add	r5, r0, #1
    char *new = malloc(len);
    f32c:	e1a00005 	mov	r0, r5
    f330:	ebfffecc 	bl	ee68 <malloc>
    if (new) {
    f334:	e2504000 	subs	r4, r0, #0
    f338:	0a000002 	beq	f348 <strdup+0x2c>
        memcpy(new, s, len);
    f33c:	e1a02005 	mov	r2, r5
    f340:	e1a01006 	mov	r1, r6
    f344:	ebffff62 	bl	f0d4 <memcpy>
    }
    return new;
}
    f348:	e1a00004 	mov	r0, r4
    f34c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000f350 <xstrdup>:

/* Secure strdup implementation */
char *xstrdup(const char *string) {
    f350:	e92d4010 	push	{r4, lr}
    char *p = strdup(string);
    f354:	ebfffff0 	bl	f31c <strdup>
    if (!p) {
    f358:	e3500000 	cmp	r0, #0
    f35c:	18bd8010 	popne	{r4, pc}
        // In bare metal, we can't really recover from out of memory
        while(1); // Hang
    f360:	eafffffe 	b	f360 <xstrdup+0x10>

0000f364 <pubkey_get_nsig>:

/* Temporary helper. */
int
pubkey_get_nsig (pubkey_algo_t algo)
{
  switch (algo)
    f364:	e2400001 	sub	r0, r0, #1
    f368:	e6ef0070 	uxtb	r0, r0
    f36c:	e3500015 	cmp	r0, #21
    f370:	8a000003 	bhi	f384 <pubkey_get_nsig+0x20>
    f374:	e59f3010 	ldr	r3, [pc, #16]	; f38c <pubkey_get_nsig+0x28>
    f378:	e08f3003 	add	r3, pc, r3
    f37c:	e7930100 	ldr	r0, [r3, r0, lsl #2]
    f380:	e12fff1e 	bx	lr
{
    f384:	e3a00000 	mov	r0, #0
    case PUBKEY_ALGO_ECDSA:     return 2;
    case PUBKEY_ALGO_ELGAMAL:   return 2;
    case PUBKEY_ALGO_EDDSA:     return 2;
    default: return 0;
    }
}
    f388:	e12fff1e 	bx	lr
    f38c:	00006b14 	.word	0x00006b14

0000f390 <pubkey_get_nenc>:

/* Temporary helper. */
int
pubkey_get_nenc (pubkey_algo_t algo)
{
  switch (algo)
    f390:	e2400001 	sub	r0, r0, #1
    f394:	e6ef0070 	uxtb	r0, r0
    f398:	e3500015 	cmp	r0, #21
    f39c:	8a000004 	bhi	f3b4 <pubkey_get_nenc+0x24>
    f3a0:	e59f3014 	ldr	r3, [pc, #20]	; f3bc <pubkey_get_nenc+0x2c>
    f3a4:	e08f3003 	add	r3, pc, r3
    f3a8:	e0830100 	add	r0, r3, r0, lsl #2
    f3ac:	e5900058 	ldr	r0, [r0, #88]	; 0x58
    f3b0:	e12fff1e 	bx	lr
{
    f3b4:	e3a00000 	mov	r0, #0
    case PUBKEY_ALGO_ECDSA:     return 0;
    case PUBKEY_ALGO_ELGAMAL:   return 2;
    case PUBKEY_ALGO_EDDSA:     return 0;
    default: return 0;
    }
}
    f3b8:	e12fff1e 	bx	lr
    f3bc:	00006ae8 	.word	0x00006ae8

0000f3c0 <parse.constprop.0>:
   If RETPOS is not NULL, then the position of CTX->INP (as returned by
   iobuf_tell) is saved there before any data is read from CTX->INP.
  */

static int
parse (parse_packet_ctx_t ctx, PACKET *pkt, int onlykeypkts, off_t * retpos,
    f3c0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f3c4:	e24dd09c 	sub	sp, sp, #156	; 0x9c
  int new_ctb = 0, partial = 0;
  int with_uid = (onlykeypkts == 2);
  off_t pos;

  *skip = 0;
  inp = ctx->inp;
    f3c8:	e5904000 	ldr	r4, [r0]

 again:
  // printf (!pkt->pkt.generic);
  if (retpos || list_mode)
    f3cc:	e2538000 	subs	r8, r3, #0
parse (parse_packet_ctx_t ctx, PACKET *pkt, int onlykeypkts, off_t * retpos,
    f3d0:	e58d100c 	str	r1, [sp, #12]
    f3d4:	e1a07002 	mov	r7, r2
  *skip = 0;
    f3d8:	e59d20c0 	ldr	r2, [sp, #192]	; 0xc0
    f3dc:	e3a03000 	mov	r3, #0
parse (parse_packet_ctx_t ctx, PACKET *pkt, int onlykeypkts, off_t * retpos,
    f3e0:	e1a06000 	mov	r6, r0
  *skip = 0;
    f3e4:	e5823000 	str	r3, [r2]
  if (retpos || list_mode)
    f3e8:	0a000007 	beq	f40c <parse.constprop.0+0x4c>
    {
      pos = iobuf_tell (inp);
    f3ec:	e1a00004 	mov	r0, r4
    f3f0:	ebffec6a 	bl	a5a0 <iobuf_tell>
    f3f4:	e1a05000 	mov	r5, r0
      printf("Position: %lu\n", (unsigned long)pos);
    f3f8:	e59f0fd4 	ldr	r0, [pc, #4052]	; 103d4 <parse.constprop.0+0x1014>
    f3fc:	e1a01005 	mov	r1, r5
    f400:	e08f0000 	add	r0, pc, r0
    f404:	eb0007fe 	bl	11404 <tfp_printf>
      if (retpos)
        *retpos = pos;
    f408:	e5885000 	str	r5, [r8]
  else
    pos = 0; /* (silence compiler warning) */

  /* The first byte of a packet is the so-called tag.  The highest bit
     must be set.  */
  if ((ctb = iobuf_get (inp)) == -1)
    f40c:	e5943010 	ldr	r3, [r4, #16]
    f410:	e3530000 	cmp	r3, #0
    f414:	1a000003 	bne	f428 <parse.constprop.0+0x68>
    f418:	e5943018 	ldr	r3, [r4, #24]
    f41c:	e594201c 	ldr	r2, [r4, #28]
    f420:	e1530002 	cmp	r3, r2
    f424:	3a000036 	bcc	f504 <parse.constprop.0+0x144>
    f428:	e1a00004 	mov	r0, r4
    f42c:	ebffe7ef 	bl	93f0 <iobuf_readbyte>
    f430:	e3700001 	cmn	r0, #1
    {
      rc = -1;
      goto leave;
    }
  hdrlen = 0;
  hdr[hdrlen++] = ctb;
    f434:	16ef3070 	uxtbne	r3, r0
  if ((ctb = iobuf_get (inp)) == -1)
    f438:	0a00009e 	beq	f6b8 <parse.constprop.0+0x2f8>
  hdr[hdrlen++] = ctb;
    f43c:	e5cd302c 	strb	r3, [sp, #44]	; 0x2c
// Initial packet parsing
// printf("Starting packet parse at position: %lu\n", (unsigned long)iobuf_tell(inp));
// printf("Read CTB: 0x%02x (new_format=%d)\n", ctb, !!(ctb & 0x40));

  if (!(ctb & 0x80))
    f440:	e3100080 	tst	r0, #128	; 0x80
    f444:	0a000039 	beq	f530 <parse.constprop.0+0x170>
     least significant bit is bit 0) is set in the tag, then we are
     dealing with a new format packet.  Otherwise, it is an old format
     packet.  */
  pktlen = 0;
  new_ctb = !!(ctb & 0x40);
  if (new_ctb)
    f448:	e2103040 	ands	r3, r0, #64	; 0x40
    f44c:	e58d3010 	str	r3, [sp, #16]
    f450:	1a00003f 	bne	f554 <parse.constprop.0+0x194>
      /* Extract the packet's type.  This is encoded in bits 2-5.  */
      pkttype = (ctb >> 2) & 0xf;

      /* The type of length encoding is encoded in bits 0-1 of the
	 tag.  */
      lenbytes = ((ctb & 3) == 3) ? 0 : (1 << (ctb & 3));
    f454:	e2003003 	and	r3, r0, #3
      pkttype = (ctb >> 2) & 0xf;
    f458:	e1a00140 	asr	r0, r0, #2
      lenbytes = ((ctb & 3) == 3) ? 0 : (1 << (ctb & 3));
    f45c:	e3530003 	cmp	r3, #3
      pkttype = (ctb >> 2) & 0xf;
    f460:	e200800f 	and	r8, r0, #15
      lenbytes = ((ctb & 3) == 3) ? 0 : (1 << (ctb & 3));
    f464:	0a0000c1 	beq	f770 <parse.constprop.0+0x3b0>
  pktlen = 0;
    f468:	e59d5010 	ldr	r5, [sp, #16]
      lenbytes = ((ctb & 3) == 3) ? 0 : (1 << (ctb & 3));
    f46c:	e3a0a001 	mov	sl, #1
    f470:	e28db02d 	add	fp, sp, #45	; 0x2d
    f474:	e1a0331a 	lsl	r3, sl, r3
    f478:	e083900a 	add	r9, r3, sl
    f47c:	ea00000a 	b	f4ac <parse.constprop.0+0xec>
      else
	{
	  for (; lenbytes; lenbytes--)
	    {
	      pktlen <<= 8;
	      c = iobuf_get (inp);
    f480:	e5842018 	str	r2, [r4, #24]
    f484:	e5942008 	ldr	r2, [r4, #8]
    f488:	e5941020 	ldr	r1, [r4, #32]
    f48c:	e2822001 	add	r2, r2, #1
    f490:	e5842008 	str	r2, [r4, #8]
    f494:	e7d10003 	ldrb	r0, [r1, r3]
		{
		  printf ("%s: length invalid\n", iobuf_where (inp));
		  rc = gpg_error (GPG_ERR_INV_PACKET);
		  goto leave;
		}
	      pktlen |= hdr[hdrlen++] = c;
    f498:	e1805005 	orr	r5, r0, r5
    f49c:	e28aa001 	add	sl, sl, #1
	  for (; lenbytes; lenbytes--)
    f4a0:	e159000a 	cmp	r9, sl
	      pktlen |= hdr[hdrlen++] = c;
    f4a4:	e4cb0001 	strb	r0, [fp], #1
	  for (; lenbytes; lenbytes--)
    f4a8:	0a00003e 	beq	f5a8 <parse.constprop.0+0x1e8>
	      c = iobuf_get (inp);
    f4ac:	e5943010 	ldr	r3, [r4, #16]
    f4b0:	e1a00004 	mov	r0, r4
	      pktlen <<= 8;
    f4b4:	e1a05405 	lsl	r5, r5, #8
	      c = iobuf_get (inp);
    f4b8:	e3530000 	cmp	r3, #0
    f4bc:	1a000004 	bne	f4d4 <parse.constprop.0+0x114>
    f4c0:	e5943018 	ldr	r3, [r4, #24]
    f4c4:	e594201c 	ldr	r2, [r4, #28]
    f4c8:	e1530002 	cmp	r3, r2
    f4cc:	e2832001 	add	r2, r3, #1
    f4d0:	3affffea 	bcc	f480 <parse.constprop.0+0xc0>
    f4d4:	ebffe7c5 	bl	93f0 <iobuf_readbyte>
	      if (c == -1)
    f4d8:	e3700001 	cmn	r0, #1
	      pktlen |= hdr[hdrlen++] = c;
    f4dc:	e6ef0070 	uxtb	r0, r0
	      if (c == -1)
    f4e0:	1affffec 	bne	f498 <parse.constprop.0+0xd8>
		  printf ("%s: length invalid\n", iobuf_where (inp));
    f4e4:	e59f1eec 	ldr	r1, [pc, #3820]	; 103d8 <parse.constprop.0+0x1018>
    f4e8:	e59f0eec 	ldr	r0, [pc, #3820]	; 103dc <parse.constprop.0+0x101c>
    f4ec:	e08f1001 	add	r1, pc, r1
    f4f0:	e08f0000 	add	r0, pc, r0
    f4f4:	eb0007c2 	bl	11404 <tfp_printf>
    f4f8:	e3a0000e 	mov	r0, #14

  /* FIXME: We use only the error code for now to avoid problems with
     callers which have not been checked to always use gpg_err_code()
     when comparing error codes.  */
  return rc == -1? -1 : gpg_err_code (rc);
}
    f4fc:	e28dd09c 	add	sp, sp, #156	; 0x9c
    f500:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((ctb = iobuf_get (inp)) == -1)
    f504:	e5942008 	ldr	r2, [r4, #8]
    f508:	e5941020 	ldr	r1, [r4, #32]
    f50c:	e2822001 	add	r2, r2, #1
    f510:	e5842008 	str	r2, [r4, #8]
    f514:	e2832001 	add	r2, r3, #1
    f518:	e5842018 	str	r2, [r4, #24]
    f51c:	e7d13003 	ldrb	r3, [r1, r3]
  hdr[hdrlen++] = ctb;
    f520:	e5cd302c 	strb	r3, [sp, #44]	; 0x2c
  if ((ctb = iobuf_get (inp)) == -1)
    f524:	e1a00003 	mov	r0, r3
  if (!(ctb & 0x80))
    f528:	e3100080 	tst	r0, #128	; 0x80
    f52c:	1affffc5 	bne	f448 <parse.constprop.0+0x88>
      printf ("%s: invalid packet (ctb=%02x)\n", iobuf_where (inp), ctb);
    f530:	e59f1ea8 	ldr	r1, [pc, #3752]	; 103e0 <parse.constprop.0+0x1020>
    f534:	e1a02000 	mov	r2, r0
    f538:	e59f0ea4 	ldr	r0, [pc, #3748]	; 103e4 <parse.constprop.0+0x1024>
    f53c:	e08f1001 	add	r1, pc, r1
    f540:	e08f0000 	add	r0, pc, r0
    f544:	eb0007ae 	bl	11404 <tfp_printf>
    f548:	e3a0000e 	mov	r0, #14
}
    f54c:	e28dd09c 	add	sp, sp, #156	; 0x9c
    f550:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((c = iobuf_get (inp)) == -1)
    f554:	e5943010 	ldr	r3, [r4, #16]
      pkttype = ctb & 0x3f;
    f558:	e200803f 	and	r8, r0, #63	; 0x3f
      if ((c = iobuf_get (inp)) == -1)
    f55c:	e3530000 	cmp	r3, #0
    f560:	1a000003 	bne	f574 <parse.constprop.0+0x1b4>
    f564:	e5943018 	ldr	r3, [r4, #24]
    f568:	e594201c 	ldr	r2, [r4, #28]
    f56c:	e1530002 	cmp	r3, r2
    f570:	3a00006b 	bcc	f724 <parse.constprop.0+0x364>
    f574:	e1a00004 	mov	r0, r4
    f578:	ebffe79c 	bl	93f0 <iobuf_readbyte>
    f57c:	e3700001 	cmn	r0, #1
      hdr[hdrlen++] = c;
    f580:	16ef3070 	uxtbne	r3, r0
      if ((c = iobuf_get (inp)) == -1)
    f584:	0a0000c0 	beq	f88c <parse.constprop.0+0x4cc>
      hdr[hdrlen++] = c;
    f588:	e5cd302d 	strb	r3, [sp, #45]	; 0x2d
      if (c < 192)
    f58c:	e35000bf 	cmp	r0, #191	; 0xbf
        pktlen = c;
    f590:	d1a05000 	movle	r5, r0
      hdr[hdrlen++] = c;
    f594:	d3a09002 	movle	r9, #2
      if (c < 192)
    f598:	ca000049 	bgt	f6c4 <parse.constprop.0+0x304>
  if (pkttype == 63 && pktlen == 0xFFFFFFFF)
    f59c:	e358003f 	cmp	r8, #63	; 0x3f
    f5a0:	03750001 	cmneq	r5, #1
    f5a4:	0a00003e 	beq	f6a4 <parse.constprop.0+0x2e4>
  if (out && pkttype)
    f5a8:	e59d30c4 	ldr	r3, [sp, #196]	; 0xc4
    f5ac:	e3530000 	cmp	r3, #0
    f5b0:	13580000 	cmpne	r8, #0
    f5b4:	13a0a001 	movne	sl, #1
    f5b8:	03a0a000 	moveq	sl, #0
    f5bc:	1a000061 	bne	f748 <parse.constprop.0+0x388>
  if (with_uid && pkttype == PKT_USER_ID)
    f5c0:	e248b00d 	sub	fp, r8, #13
    f5c4:	e16fbf1b 	clz	fp, fp
    f5c8:	e1a0b2ab 	lsr	fp, fp, #5
    f5cc:	e3570002 	cmp	r7, #2
    f5d0:	13a03000 	movne	r3, #0
    f5d4:	020b3001 	andeq	r3, fp, #1
    f5d8:	e3530000 	cmp	r3, #0
    f5dc:	1a000093 	bne	f830 <parse.constprop.0+0x470>
  else if (do_skip
    f5e0:	e59d30c8 	ldr	r3, [sp, #200]	; 0xc8
    f5e4:	e2033001 	and	r3, r3, #1
	   || !pkttype
    f5e8:	e3580000 	cmp	r8, #0
    f5ec:	03833001 	orreq	r3, r3, #1
    f5f0:	e58d3014 	str	r3, [sp, #20]
  else if (do_skip
    f5f4:	e3530000 	cmp	r3, #0
    f5f8:	1a000141 	bne	fb04 <parse.constprop.0+0x744>
	   || (onlykeypkts && pkttype != PKT_PUBLIC_SUBKEY
    f5fc:	e3570000 	cmp	r7, #0
    f600:	1358000e 	cmpne	r8, #14
    f604:	0a000002 	beq	f614 <parse.constprop.0+0x254>
	       && pkttype != PKT_SECRET_SUBKEY && pkttype != PKT_SECRET_KEY))
    f608:	e2483005 	sub	r3, r8, #5
    f60c:	e3530002 	cmp	r3, #2
    f610:	8a00013b 	bhi	fb04 <parse.constprop.0+0x744>
  ctx->n_parsed_packets++;
    f614:	e5963014 	ldr	r3, [r6, #20]
printf("\nProcessing packet type: %s (%d)\n\n", 
    f618:	e59f2dc8 	ldr	r2, [pc, #3528]	; 103e8 <parse.constprop.0+0x1028>
    f61c:	e59f0dc8 	ldr	r0, [pc, #3528]	; 103ec <parse.constprop.0+0x102c>
  ctx->n_parsed_packets++;
    f620:	e2833001 	add	r3, r3, #1
    f624:	e5863014 	str	r3, [r6, #20]
printf("\nProcessing packet type: %s (%d)\n\n", 
    f628:	e08f2002 	add	r2, pc, r2
  pkt->pkttype = pkttype;
    f62c:	e59d300c 	ldr	r3, [sp, #12]
printf("\nProcessing packet type: %s (%d)\n\n", 
    f630:	e7921108 	ldr	r1, [r2, r8, lsl #2]
    f634:	e1a02008 	mov	r2, r8
  pkt->pkttype = pkttype;
    f638:	e5c38000 	strb	r8, [r3]
printf("\nProcessing packet type: %s (%d)\n\n", 
    f63c:	e08f0000 	add	r0, pc, r0
    f640:	eb00076f 	bl	11404 <tfp_printf>
  new_ctb = !!(ctb & 0x40);
    f644:	e59d3010 	ldr	r3, [sp, #16]
  switch (pkttype)
    f648:	e2482003 	sub	r2, r8, #3
  new_ctb = !!(ctb & 0x40);
    f64c:	e2533000 	subs	r3, r3, #0
    f650:	13a03001 	movne	r3, #1
  switch (pkttype)
    f654:	e3520010 	cmp	r2, #16
    f658:	908ff102 	addls	pc, pc, r2, lsl #2
    f65c:	ea00007e 	b	f85c <parse.constprop.0+0x49c>
    f660:	ea000137 	b	fb44 <parse.constprop.0+0x784>
    f664:	ea00007c 	b	f85c <parse.constprop.0+0x49c>
    f668:	ea00007b 	b	f85c <parse.constprop.0+0x49c>
    f66c:	ea00007a 	b	f85c <parse.constprop.0+0x49c>
    f670:	ea000079 	b	f85c <parse.constprop.0+0x49c>
    f674:	ea000078 	b	f85c <parse.constprop.0+0x49c>
    f678:	ea000090 	b	f8c0 <parse.constprop.0+0x500>
    f67c:	ea000201 	b	fe88 <parse.constprop.0+0xac8>
    f680:	ea0001aa 	b	fd30 <parse.constprop.0+0x970>
    f684:	ea000074 	b	f85c <parse.constprop.0+0x49c>
    f688:	ea000073 	b	f85c <parse.constprop.0+0x49c>
    f68c:	ea000072 	b	f85c <parse.constprop.0+0x49c>
    f690:	ea000071 	b	f85c <parse.constprop.0+0x49c>
    f694:	ea000070 	b	f85c <parse.constprop.0+0x49c>
    f698:	ea00006f 	b	f85c <parse.constprop.0+0x49c>
    f69c:	ea000087 	b	f8c0 <parse.constprop.0+0x500>
    f6a0:	ea00017f 	b	fca4 <parse.constprop.0+0x8e4>
      printf ("%s: garbled packet detected\n", iobuf_where (inp));
    f6a4:	e59f1d44 	ldr	r1, [pc, #3396]	; 103f0 <parse.constprop.0+0x1030>
    f6a8:	e59f0d44 	ldr	r0, [pc, #3396]	; 103f4 <parse.constprop.0+0x1034>
    f6ac:	e08f1001 	add	r1, pc, r1
    f6b0:	e08f0000 	add	r0, pc, r0
    f6b4:	eb000752 	bl	11404 <tfp_printf>
      return -1;
    f6b8:	e3e00000 	mvn	r0, #0
}
    f6bc:	e28dd09c 	add	sp, sp, #156	; 0x9c
    f6c0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (c < 224)
    f6c4:	e35000df 	cmp	r0, #223	; 0xdf
    f6c8:	ca000035 	bgt	f7a4 <parse.constprop.0+0x3e4>
          if ((c = iobuf_get (inp)) == -1)
    f6cc:	e5943010 	ldr	r3, [r4, #16]
          pktlen = (c - 192) * 256;
    f6d0:	e24050c0 	sub	r5, r0, #192	; 0xc0
    f6d4:	e1a05405 	lsl	r5, r5, #8
          if ((c = iobuf_get (inp)) == -1)
    f6d8:	e3530000 	cmp	r3, #0
    f6dc:	1a0000f4 	bne	fab4 <parse.constprop.0+0x6f4>
    f6e0:	e5943018 	ldr	r3, [r4, #24]
    f6e4:	e594201c 	ldr	r2, [r4, #28]
    f6e8:	e1530002 	cmp	r3, r2
    f6ec:	2a0000f0 	bcs	fab4 <parse.constprop.0+0x6f4>
    f6f0:	e5942008 	ldr	r2, [r4, #8]
    f6f4:	e5941020 	ldr	r1, [r4, #32]
    f6f8:	e2822001 	add	r2, r2, #1
    f6fc:	e5842008 	str	r2, [r4, #8]
    f700:	e2832001 	add	r2, r3, #1
    f704:	e5842018 	str	r2, [r4, #24]
    f708:	e7d13003 	ldrb	r3, [r1, r3]
    f70c:	e1a00003 	mov	r0, r3
          hdr[hdrlen++] = c;
    f710:	e5cd302e 	strb	r3, [sp, #46]	; 0x2e
          pktlen += c + 192;
    f714:	e28550c0 	add	r5, r5, #192	; 0xc0
    f718:	e0805005 	add	r5, r0, r5
          hdr[hdrlen++] = c;
    f71c:	e3a09003 	mov	r9, #3
    f720:	eaffff9d 	b	f59c <parse.constprop.0+0x1dc>
      if ((c = iobuf_get (inp)) == -1)
    f724:	e5942008 	ldr	r2, [r4, #8]
    f728:	e5941020 	ldr	r1, [r4, #32]
    f72c:	e2822001 	add	r2, r2, #1
    f730:	e5842008 	str	r2, [r4, #8]
    f734:	e2832001 	add	r2, r3, #1
    f738:	e5842018 	str	r2, [r4, #24]
    f73c:	e7d13003 	ldrb	r3, [r1, r3]
    f740:	e1a00003 	mov	r0, r3
    f744:	eaffff8f 	b	f588 <parse.constprop.0+0x1c8>
      rc = iobuf_write (out, hdr, hdrlen);
    f748:	e59d00c4 	ldr	r0, [sp, #196]	; 0xc4
    f74c:	e1a02009 	mov	r2, r9
    f750:	e28d102c 	add	r1, sp, #44	; 0x2c
    f754:	ebffe87a 	bl	9944 <iobuf_write>
      if (!rc)
    f758:	e3500000 	cmp	r0, #0
    f75c:	0a000222 	beq	ffec <parse.constprop.0+0xc2c>
  return rc == -1? -1 : gpg_err_code (rc);
    f760:	e3700001 	cmn	r0, #1
    f764:	0affffd3 	beq	f6b8 <parse.constprop.0+0x2f8>
    f768:	e6ff0070 	uxth	r0, r0
    f76c:	eaffffd2 	b	f6bc <parse.constprop.0+0x2fc>
	  if (pkttype != PKT_ENCRYPTED && pkttype != PKT_PLAINTEXT
    f770:	e200000d 	and	r0, r0, #13
    f774:	e3500009 	cmp	r0, #9
    f778:	0a00001c 	beq	f7f0 <parse.constprop.0+0x430>
	      && pkttype != PKT_COMPRESSED)
    f77c:	e3580008 	cmp	r8, #8
    f780:	1a0000e7 	bne	fb24 <parse.constprop.0+0x764>
  if (out && pkttype)
    f784:	e59d30c4 	ldr	r3, [sp, #196]	; 0xc4
    f788:	e3530000 	cmp	r3, #0
    f78c:	1a000021 	bne	f818 <parse.constprop.0+0x458>
    f790:	e59db010 	ldr	fp, [sp, #16]
    f794:	e3a0a001 	mov	sl, #1
  hdr[hdrlen++] = ctb;
    f798:	e1a0900a 	mov	r9, sl
  if (out && pkttype)
    f79c:	e1a0500b 	mov	r5, fp
    f7a0:	eaffff8e 	b	f5e0 <parse.constprop.0+0x220>
      else if (c == 255)
    f7a4:	e35000ff 	cmp	r0, #255	; 0xff
    f7a8:	0a0000a7 	beq	fa4c <parse.constprop.0+0x68c>
          switch (pkttype)
    f7ac:	e2483008 	sub	r3, r8, #8
    f7b0:	e353000c 	cmp	r3, #12
    f7b4:	908ff103 	addls	pc, pc, r3, lsl #2
    f7b8:	ea0000c9 	b	fae4 <parse.constprop.0+0x724>
    f7bc:	ea000039 	b	f8a8 <parse.constprop.0+0x4e8>
    f7c0:	ea000038 	b	f8a8 <parse.constprop.0+0x4e8>
    f7c4:	ea0000c6 	b	fae4 <parse.constprop.0+0x724>
    f7c8:	ea000036 	b	f8a8 <parse.constprop.0+0x4e8>
    f7cc:	ea0000c4 	b	fae4 <parse.constprop.0+0x724>
    f7d0:	ea0000c3 	b	fae4 <parse.constprop.0+0x724>
    f7d4:	ea0000c2 	b	fae4 <parse.constprop.0+0x724>
    f7d8:	ea0000c1 	b	fae4 <parse.constprop.0+0x724>
    f7dc:	ea0000c0 	b	fae4 <parse.constprop.0+0x724>
    f7e0:	ea0000bf 	b	fae4 <parse.constprop.0+0x724>
    f7e4:	ea00002f 	b	f8a8 <parse.constprop.0+0x4e8>
    f7e8:	ea0000bd 	b	fae4 <parse.constprop.0+0x724>
    f7ec:	ea00002d 	b	f8a8 <parse.constprop.0+0x4e8>
  if (out && pkttype)
    f7f0:	e2585000 	subs	r5, r8, #0
  hdr[hdrlen++] = ctb;
    f7f4:	e3a09001 	mov	r9, #1
  if (out && pkttype)
    f7f8:	13a05001 	movne	r5, #1
    f7fc:	e59d30c4 	ldr	r3, [sp, #196]	; 0xc4
    f800:	e3530000 	cmp	r3, #0
    f804:	03a05000 	moveq	r5, #0
    f808:	12055001 	andne	r5, r5, #1
    f80c:	e3550000 	cmp	r5, #0
    f810:	03a0a001 	moveq	sl, #1
    f814:	0affff69 	beq	f5c0 <parse.constprop.0+0x200>
	  printf ("parse: Can't copy partial packet.  Aborting.\n");
    f818:	e59f0bd8 	ldr	r0, [pc, #3032]	; 103f8 <parse.constprop.0+0x1038>
    f81c:	e08f0000 	add	r0, pc, r0
    f820:	eb0006f7 	bl	11404 <tfp_printf>
    f824:	e3a0000e 	mov	r0, #14
}
    f828:	e28dd09c 	add	sp, sp, #156	; 0x9c
    f82c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  ctx->n_parsed_packets++;
    f830:	e5963014 	ldr	r3, [r6, #20]
  pkt->pkttype = pkttype;
    f834:	e3a0200d 	mov	r2, #13
printf("\nProcessing packet type: %s (%d)\n\n", 
    f838:	e59f1bbc 	ldr	r1, [pc, #3004]	; 103fc <parse.constprop.0+0x103c>
    f83c:	e59f0bbc 	ldr	r0, [pc, #3004]	; 10400 <parse.constprop.0+0x1040>
  ctx->n_parsed_packets++;
    f840:	e2833001 	add	r3, r3, #1
    f844:	e5863014 	str	r3, [r6, #20]
  pkt->pkttype = pkttype;
    f848:	e59d300c 	ldr	r3, [sp, #12]
printf("\nProcessing packet type: %s (%d)\n\n", 
    f84c:	e08f1001 	add	r1, pc, r1
    f850:	e08f0000 	add	r0, pc, r0
  pkt->pkttype = pkttype;
    f854:	e5c32000 	strb	r2, [r3]
printf("\nProcessing packet type: %s (%d)\n\n", 
    f858:	eb0006e9 	bl	11404 <tfp_printf>
  free_packet (NULL, ctx);
    f85c:	e3a00000 	mov	r0, #0
    f860:	e1a01006 	mov	r1, r6
    f864:	ebfff35a 	bl	c5d4 <free_packet>
printf("Packet header (%d bytes):\n", hdrlen);
    f868:	e59f0b94 	ldr	r0, [pc, #2964]	; 10404 <parse.constprop.0+0x1044>
    f86c:	e1a01009 	mov	r1, r9
    f870:	e08f0000 	add	r0, pc, r0
    f874:	eb0006e2 	bl	11404 <tfp_printf>
log_hexdump(hdr, hdrlen);
    f878:	e1a01009 	mov	r1, r9
    f87c:	e28d002c 	add	r0, sp, #44	; 0x2c
    f880:	ebffed9c 	bl	aef8 <log_hexdump>
    f884:	e3a00002 	mov	r0, #2
    f888:	eaffff8b 	b	f6bc <parse.constprop.0+0x2fc>
	  printf ("%s: 1st length byte missing\n", iobuf_where (inp));
    f88c:	e59f1b74 	ldr	r1, [pc, #2932]	; 10408 <parse.constprop.0+0x1048>
    f890:	e59f0b74 	ldr	r0, [pc, #2932]	; 1040c <parse.constprop.0+0x104c>
    f894:	e08f1001 	add	r1, pc, r1
    f898:	e08f0000 	add	r0, pc, r0
    f89c:	eb0006d8 	bl	11404 <tfp_printf>
    f8a0:	e3a0000e 	mov	r0, #14
    f8a4:	eaffff84 	b	f6bc <parse.constprop.0+0x2fc>
              iobuf_set_partial_body_length_mode (inp, c & 0xff);
    f8a8:	e6ef1070 	uxtb	r1, r0
    f8ac:	e1a00004 	mov	r0, r4
      hdr[hdrlen++] = c;
    f8b0:	e3a09002 	mov	r9, #2
              break;
    f8b4:	e3a05001 	mov	r5, #1
              iobuf_set_partial_body_length_mode (inp, c & 0xff);
    f8b8:	ebffebc3 	bl	a7cc <iobuf_set_partial_body_length_mode>
              break;
    f8bc:	eaffffce 	b	f7fc <parse.constprop.0+0x43c>

static int
parse_encrypted(IOBUF inp, int pkttype, unsigned long pktlen,
                PACKET *pkt, int new_ctb, int partial)
{
  printf("parse_encrypted\n");
    f8c0:	e59f0b48 	ldr	r0, [pc, #2888]	; 10410 <parse.constprop.0+0x1050>
    f8c4:	e58d3010 	str	r3, [sp, #16]
    f8c8:	e08f0000 	add	r0, pc, r0
    f8cc:	eb0006cc 	bl	11404 <tfp_printf>
  printf("Packet length: %lu\n", pktlen);
    f8d0:	e59f0b3c 	ldr	r0, [pc, #2876]	; 10414 <parse.constprop.0+0x1054>
    f8d4:	e1a01005 	mov	r1, r5
    f8d8:	e08f0000 	add	r0, pc, r0
    f8dc:	eb0006c8 	bl	11404 <tfp_printf>
// Add at start
printf("=== parse_encrypted start ===\n");
    f8e0:	e59f0b30 	ldr	r0, [pc, #2864]	; 10418 <parse.constprop.0+0x1058>
    f8e4:	e08f0000 	add	r0, pc, r0
    f8e8:	eb0006c5 	bl	11404 <tfp_printf>
printf("Input buffer: %p\n", (void*)inp);
    f8ec:	e59f0b28 	ldr	r0, [pc, #2856]	; 1041c <parse.constprop.0+0x105c>
    f8f0:	e1a01004 	mov	r1, r4
    f8f4:	e08f0000 	add	r0, pc, r0
    f8f8:	eb0006c1 	bl	11404 <tfp_printf>
printf("Packet type: %d (MDC: %d)\n", pkttype, (pkttype == PKT_ENCRYPTED_MDC));
    f8fc:	e59f0b1c 	ldr	r0, [pc, #2844]	; 10420 <parse.constprop.0+0x1060>
    f900:	e2482012 	sub	r2, r8, #18
    f904:	e16f2f12 	clz	r2, r2
    f908:	e1a01008 	mov	r1, r8
    f90c:	e08f0000 	add	r0, pc, r0
    f910:	e1a022a2 	lsr	r2, r2, #5
    f914:	eb0006ba 	bl	11404 <tfp_printf>
printf("Partial: %d\n", partial);
    f918:	e59f0b04 	ldr	r0, [pc, #2820]	; 10424 <parse.constprop.0+0x1064>
    f91c:	e1a0100a 	mov	r1, sl
    f920:	e08f0000 	add	r0, pc, r0
    f924:	eb0006b6 	bl	11404 <tfp_printf>
    printf("Buffer use: %d\n", inp->use);
    f928:	e59f0af8 	ldr	r0, [pc, #2808]	; 10428 <parse.constprop.0+0x1068>
    f92c:	e5d41000 	ldrb	r1, [r4]
    f930:	e08f0000 	add	r0, pc, r0
    f934:	eb0006b2 	bl	11404 <tfp_printf>

  int rc = 0;
  PKT_encrypted *ed;
  unsigned long orig_pktlen = pktlen;

  ed = pkt->pkt.encrypted = xmalloc(sizeof *pkt->pkt.encrypted);
    f938:	e3a00014 	mov	r0, #20
    f93c:	ebfffdb6 	bl	f01c <xmalloc>
    f940:	e59d300c 	ldr	r3, [sp, #12]
  ed->new_ctb = new_ctb;
  ed->is_partial = partial;
  ed->aead_algo = 0;
  ed->cipher_algo = 0; /* Only used with AEAD.  */
  ed->chunkbyte = 0;   /* Only used with AEAD.  */
  if (pkttype == PKT_ENCRYPTED_MDC)
    f944:	e3580012 	cmp	r8, #18
  ed = pkt->pkt.encrypted = xmalloc(sizeof *pkt->pkt.encrypted);
    f948:	e1a07000 	mov	r7, r0
    f94c:	e5830004 	str	r0, [r3, #4]
  ed->new_ctb = new_ctb;
    f950:	e59d3010 	ldr	r3, [sp, #16]
  ed->is_partial = partial;
    f954:	e5c0a009 	strb	sl, [r0, #9]
  ed->new_ctb = new_ctb;
    f958:	e5c03008 	strb	r3, [r0, #8]
  ed->extralen = 0; /* Unknown here; only used in build_packet.  */
    f95c:	e3a03000 	mov	r3, #0
    f960:	e5803004 	str	r3, [r0, #4]
  ed->buf = NULL;
    f964:	e5803010 	str	r3, [r0, #16]
  ed->aead_algo = 0;
    f968:	e5c0300b 	strb	r3, [r0, #11]
  ed->cipher_algo = 0; /* Only used with AEAD.  */
    f96c:	e1c030bc 	strh	r3, [r0, #12]
      goto leave;
    }
    ed->mdc_method = DIGEST_ALGO_SHA1;
  }
  else
    ed->mdc_method = 0;
    f970:	15c0300a 	strbne	r3, [r0, #10]
    f974:	11a03005 	movne	r3, r5
  if (pkttype == PKT_ENCRYPTED_MDC)
    f978:	0a0002d0 	beq	104c0 <parse.constprop.0+0x1100>

  /* A basic sanity check.  We need at least an 8 byte IV plus the 2
     detection bytes.  Note that we don't known the algorithm and thus
     we may only check against the minimum blocksize.  */
  if (orig_pktlen && pktlen < 10)
    f97c:	e2555000 	subs	r5, r5, #0
    f980:	13a05001 	movne	r5, #1
    f984:	e3530009 	cmp	r3, #9
    f988:	83a05000 	movhi	r5, #0
    f98c:	e3550000 	cmp	r5, #0
    f990:	1a000311 	bne	105dc <parse.constprop.0+0x121c>

  /* Store the remaining length of the encrypted data (i.e. without
     the MDC version number but with the IV etc.).  This value is
     required during decryption.  */
  ed->len = pktlen;
    printf("Encrypted data length: %lu\n", ed->len);
    f994:	e59f5a90 	ldr	r5, [pc, #2704]	; 1042c <parse.constprop.0+0x106c>
    f998:	e1a01003 	mov	r1, r3
  ed->len = pktlen;
    f99c:	e5873000 	str	r3, [r7]
    printf("Encrypted data length: %lu\n", ed->len);
    f9a0:	e08f5005 	add	r5, pc, r5
    f9a4:	e1a00005 	mov	r0, r5
    f9a8:	eb000695 	bl	11404 <tfp_printf>

  // Add before ed->buf = inp
  if (ed->len > 0)
    f9ac:	e5971000 	ldr	r1, [r7]
    f9b0:	e3510000 	cmp	r1, #0
    f9b4:	1a0002ff 	bne	105b8 <parse.constprop.0+0x11f8>
    if (ed->mdc_method)
      printf(listfp, "\tmdc_method: %d\n", ed->mdc_method);
  }

// After allocating ed
printf("Allocated encrypted packet at: %p\n", (void*)ed);
    f9b8:	e59f0a70 	ldr	r0, [pc, #2672]	; 10430 <parse.constprop.0+0x1070>
    f9bc:	e1a01007 	mov	r1, r7
    f9c0:	e08f0000 	add	r0, pc, r0
    f9c4:	eb00068e 	bl	11404 <tfp_printf>

// Before assigning buffer
printf("Setting buf to input stream: %p\n", (void*)inp);
    f9c8:	e59f0a64 	ldr	r0, [pc, #2660]	; 10434 <parse.constprop.0+0x1074>
    f9cc:	e1a01004 	mov	r1, r4
    f9d0:	e08f0000 	add	r0, pc, r0
    f9d4:	eb00068a 	bl	11404 <tfp_printf>
  ed->buf = inp;


// At leave
printf("=== parse_encrypted end (rc=%d) ===\n", rc);
    f9d8:	e59f0a58 	ldr	r0, [pc, #2648]	; 10438 <parse.constprop.0+0x1078>
    f9dc:	e3a01000 	mov	r1, #0
  ed->buf = inp;
    f9e0:	e5874010 	str	r4, [r7, #16]
printf("=== parse_encrypted end (rc=%d) ===\n", rc);
    f9e4:	e08f0000 	add	r0, pc, r0
    f9e8:	eb000685 	bl	11404 <tfp_printf>
  free_packet (NULL, ctx);
    f9ec:	e1a01006 	mov	r1, r6
    f9f0:	e3a00000 	mov	r0, #0
    f9f4:	ebfff2f6 	bl	c5d4 <free_packet>
              || pkttype == PKT_SECRET_KEY
    f9f8:	e2483005 	sub	r3, r8, #5
  if (!rc && (pkttype == PKT_PUBLIC_KEY
    f9fc:	e3530001 	cmp	r3, #1
    fa00:	938bb001 	orrls	fp, fp, #1
    fa04:	e35b0000 	cmp	fp, #0
    fa08:	0a000154 	beq	ff60 <parse.constprop.0+0xba0>
      ctx->last_pkt = *pkt;
    fa0c:	e59d300c 	ldr	r3, [sp, #12]
    fa10:	e8930003 	ldm	r3, {r0, r1}
    fa14:	e9860003 	stmib	r6, {r0, r1}
printf("Packet header (%d bytes):\n", hdrlen);
    fa18:	e59f0a1c 	ldr	r0, [pc, #2588]	; 1043c <parse.constprop.0+0x107c>
    fa1c:	e1a01009 	mov	r1, r9
    fa20:	e08f0000 	add	r0, pc, r0
    fa24:	eb000676 	bl	11404 <tfp_printf>
log_hexdump(hdr, hdrlen);
    fa28:	e1a01009 	mov	r1, r9
    fa2c:	e28d002c 	add	r0, sp, #44	; 0x2c
    fa30:	ebffed30 	bl	aef8 <log_hexdump>
  if (!rc && iobuf_error (inp))
    fa34:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    fa38:	e3530000 	cmp	r3, #0
	  printf ("%s: 1st length byte missing\n", iobuf_where (inp));
    fa3c:	03a00000 	moveq	r0, #0
      printf ("%s: invalid packet (ctb=%02x)\n", iobuf_where (inp), ctb);
    fa40:	13a00022 	movne	r0, #34	; 0x22
}
    fa44:	e28dd09c 	add	sp, sp, #156	; 0x9c
    fa48:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fa4c:	e28da02e 	add	sl, sp, #46	; 0x2e
    fa50:	e28d5034 	add	r5, sp, #52	; 0x34
      hdr[hdrlen++] = c;
    fa54:	e3a09002 	mov	r9, #2
              if ((c = iobuf_get (inp)) == -1)
    fa58:	e5943010 	ldr	r3, [r4, #16]
    fa5c:	e1a00004 	mov	r0, r4
    fa60:	e3530000 	cmp	r3, #0
    fa64:	1a000155 	bne	ffc0 <parse.constprop.0+0xc00>
    fa68:	e5943018 	ldr	r3, [r4, #24]
    fa6c:	e594201c 	ldr	r2, [r4, #28]
    fa70:	e1530002 	cmp	r3, r2
    fa74:	e2832001 	add	r2, r3, #1
    fa78:	2a000150 	bcs	ffc0 <parse.constprop.0+0xc00>
    fa7c:	e5842018 	str	r2, [r4, #24]
    fa80:	e5942008 	ldr	r2, [r4, #8]
    fa84:	e5941020 	ldr	r1, [r4, #32]
    fa88:	e2822001 	add	r2, r2, #1
    fa8c:	e5842008 	str	r2, [r4, #8]
    fa90:	e7d13003 	ldrb	r3, [r1, r3]
              value[i] = hdr[hdrlen++] = c;
    fa94:	e4ca3001 	strb	r3, [sl], #1
    fa98:	e2899001 	add	r9, r9, #1
    fa9c:	e4c53001 	strb	r3, [r5], #1
	  for (i = 0; i < 4; i ++)
    faa0:	e3590006 	cmp	r9, #6
    faa4:	1affffeb 	bne	fa58 <parse.constprop.0+0x698>
static inline unsigned long
buf32_to_ulong (const void *buffer)
{
  const unsigned char *p = buffer;

  return (((unsigned long)p[0] << 24) | (p[1] << 16) | (p[2] << 8) | p[3]);
    faa8:	e59d5034 	ldr	r5, [sp, #52]	; 0x34
    faac:	e6bf5f35 	rev	r5, r5
    fab0:	eafffeb9 	b	f59c <parse.constprop.0+0x1dc>
          if ((c = iobuf_get (inp)) == -1)
    fab4:	e1a00004 	mov	r0, r4
    fab8:	ebffe64c 	bl	93f0 <iobuf_readbyte>
    fabc:	e3700001 	cmn	r0, #1
          hdr[hdrlen++] = c;
    fac0:	16ef3070 	uxtbne	r3, r0
          if ((c = iobuf_get (inp)) == -1)
    fac4:	1affff11 	bne	f710 <parse.constprop.0+0x350>
              printf ("%s: 2nd length byte missing\n",
    fac8:	e59f1970 	ldr	r1, [pc, #2416]	; 10440 <parse.constprop.0+0x1080>
    facc:	e59f0970 	ldr	r0, [pc, #2416]	; 10444 <parse.constprop.0+0x1084>
    fad0:	e08f1001 	add	r1, pc, r1
    fad4:	e08f0000 	add	r0, pc, r0
    fad8:	eb000649 	bl	11404 <tfp_printf>
    fadc:	e3a0000e 	mov	r0, #14
    fae0:	eafffef5 	b	f6bc <parse.constprop.0+0x2fc>
              printf ("%s: partial length invalid for"
    fae4:	e59f195c 	ldr	r1, [pc, #2396]	; 10448 <parse.constprop.0+0x1088>
    fae8:	e1a02008 	mov	r2, r8
    faec:	e59f0958 	ldr	r0, [pc, #2392]	; 1044c <parse.constprop.0+0x108c>
    faf0:	e08f1001 	add	r1, pc, r1
    faf4:	e08f0000 	add	r0, pc, r0
    faf8:	eb000641 	bl	11404 <tfp_printf>
    fafc:	e3a0000e 	mov	r0, #14
    fb00:	eafffeed 	b	f6bc <parse.constprop.0+0x2fc>
      iobuf_skip_rest (inp, pktlen, partial);
    fb04:	e1a0200a 	mov	r2, sl
    fb08:	e1a01005 	mov	r1, r5
    fb0c:	e1a00004 	mov	r0, r4
    fb10:	ebffebcf 	bl	aa54 <iobuf_skip_rest>
      *skip = 1;
    fb14:	e59d20c0 	ldr	r2, [sp, #192]	; 0xc0
    fb18:	e3a03001 	mov	r3, #1
    fb1c:	e5823000 	str	r3, [r2]
    fb20:	eaffffc3 	b	fa34 <parse.constprop.0+0x674>
	      printf ("%s: indeterminate length for invalid"
    fb24:	e59f1924 	ldr	r1, [pc, #2340]	; 10450 <parse.constprop.0+0x1090>
    fb28:	e1a02008 	mov	r2, r8
    fb2c:	e59f0920 	ldr	r0, [pc, #2336]	; 10454 <parse.constprop.0+0x1094>
    fb30:	e08f1001 	add	r1, pc, r1
    fb34:	e08f0000 	add	r0, pc, r0
    fb38:	eb000631 	bl	11404 <tfp_printf>
    fb3c:	e3a0000e 	mov	r0, #14
    fb40:	eafffedd 	b	f6bc <parse.constprop.0+0x2fc>
  if (pktlen < 4)
    fb44:	e3550003 	cmp	r5, #3
    fb48:	9a000283 	bls	1055c <parse.constprop.0+0x119c>
  version = iobuf_get_noeof(inp);
    fb4c:	e5943010 	ldr	r3, [r4, #16]
    fb50:	e3530000 	cmp	r3, #0
    fb54:	1a0001b0 	bne	1021c <parse.constprop.0+0xe5c>
    fb58:	e5943018 	ldr	r3, [r4, #24]
    fb5c:	e594201c 	ldr	r2, [r4, #28]
    fb60:	e1530002 	cmp	r3, r2
    fb64:	2a0001ac 	bcs	1021c <parse.constprop.0+0xe5c>
    fb68:	e5942008 	ldr	r2, [r4, #8]
    fb6c:	e5941020 	ldr	r1, [r4, #32]
    fb70:	e2822001 	add	r2, r2, #1
    fb74:	e5842008 	str	r2, [r4, #8]
    fb78:	e2832001 	add	r2, r3, #1
    fb7c:	e5842018 	str	r2, [r4, #24]
    fb80:	e7d1b003 	ldrb	fp, [r1, r3]
  else if (version == 5)
    fb84:	e24b3004 	sub	r3, fp, #4
  pktlen--;
    fb88:	e2457001 	sub	r7, r5, #1
  else if (version == 5)
    fb8c:	e3530001 	cmp	r3, #1
    fb90:	8a000393 	bhi	109e4 <parse.constprop.0+0x1624>
  if (pktlen > 200)
    fb94:	e35700c8 	cmp	r7, #200	; 0xc8
    fb98:	8a00039d 	bhi	10a14 <parse.constprop.0+0x1654>
  cipher_algo = iobuf_get_noeof(inp);
    fb9c:	e594a010 	ldr	sl, [r4, #16]
    fba0:	e35a0000 	cmp	sl, #0
    fba4:	1a0001e6 	bne	10344 <parse.constprop.0+0xf84>
    fba8:	e594201c 	ldr	r2, [r4, #28]
    fbac:	e5941018 	ldr	r1, [r4, #24]
    fbb0:	e1a03002 	mov	r3, r2
    fbb4:	e1510002 	cmp	r1, r2
    fbb8:	2a0001e1 	bcs	10344 <parse.constprop.0+0xf84>
    fbbc:	e5940008 	ldr	r0, [r4, #8]
  if (version == 5)
    fbc0:	e35b0005 	cmp	fp, #5
  cipher_algo = iobuf_get_noeof(inp);
    fbc4:	e594c020 	ldr	ip, [r4, #32]
  pktlen--;
    fbc8:	12458002 	subne	r8, r5, #2
  cipher_algo = iobuf_get_noeof(inp);
    fbcc:	e2800001 	add	r0, r0, #1
    fbd0:	e5840008 	str	r0, [r4, #8]
    fbd4:	e2810001 	add	r0, r1, #1
    fbd8:	e5840018 	str	r0, [r4, #24]
    fbdc:	e7dc1001 	ldrb	r1, [ip, r1]
    fbe0:	e58d1010 	str	r1, [sp, #16]
  if (version == 5)
    fbe4:	0a000359 	beq	10950 <parse.constprop.0+0x1590>
  s2kmode = iobuf_get_noeof(inp);
    fbe8:	e5941018 	ldr	r1, [r4, #24]
    fbec:	e1a03002 	mov	r3, r2
    fbf0:	e1510003 	cmp	r1, r3
    fbf4:	2a0001de 	bcs	10374 <parse.constprop.0+0xfb4>
    fbf8:	e5942008 	ldr	r2, [r4, #8]
    fbfc:	e5940020 	ldr	r0, [r4, #32]
    fc00:	e2822001 	add	r2, r2, #1
    fc04:	e5842008 	str	r2, [r4, #8]
    fc08:	e2812001 	add	r2, r1, #1
    fc0c:	e5842018 	str	r2, [r4, #24]
    fc10:	e7d07001 	ldrb	r7, [r0, r1]
  hash_algo = iobuf_get_noeof(inp);
    fc14:	e1530002 	cmp	r3, r2
    fc18:	9a0001dc 	bls	10390 <parse.constprop.0+0xfd0>
    fc1c:	e5943008 	ldr	r3, [r4, #8]
    fc20:	e5941020 	ldr	r1, [r4, #32]
    fc24:	e2833001 	add	r3, r3, #1
    fc28:	e5843008 	str	r3, [r4, #8]
    fc2c:	e2823001 	add	r3, r2, #1
    fc30:	e5843018 	str	r3, [r4, #24]
    fc34:	e7d13002 	ldrb	r3, [r1, r2]
    fc38:	e58d3018 	str	r3, [sp, #24]
  switch (s2kmode)
    fc3c:	e3570001 	cmp	r7, #1
  pktlen--;
    fc40:	e2485002 	sub	r5, r8, #2
  switch (s2kmode)
    fc44:	0a00034e 	beq	10984 <parse.constprop.0+0x15c4>
    fc48:	e3570003 	cmp	r7, #3
    fc4c:	0a000273 	beq	10620 <parse.constprop.0+0x1260>
    fc50:	e3570000 	cmp	r7, #0
    fc54:	0a0002b0 	beq	1071c <parse.constprop.0+0x135c>
    printf("unknown S2K mode %d\n", s2kmode);
    fc58:	e59f07f8 	ldr	r0, [pc, #2040]	; 10458 <parse.constprop.0+0x1098>
    fc5c:	e1a01007 	mov	r1, r7
    fc60:	e08f0000 	add	r0, pc, r0
    fc64:	eb0005e6 	bl	11404 <tfp_printf>
  iobuf_skip_rest(inp, pktlen, 0);
    fc68:	e1a01005 	mov	r1, r5
    fc6c:	e1a00004 	mov	r0, r4
    fc70:	e3a02000 	mov	r2, #0
    fc74:	ebffeb76 	bl	aa54 <iobuf_skip_rest>
  free_packet (NULL, ctx);
    fc78:	e1a01006 	mov	r1, r6
    fc7c:	e3a00000 	mov	r0, #0
    fc80:	ebfff253 	bl	c5d4 <free_packet>
printf("Packet header (%d bytes):\n", hdrlen);
    fc84:	e59f07d0 	ldr	r0, [pc, #2000]	; 1045c <parse.constprop.0+0x109c>
    fc88:	e1a01009 	mov	r1, r9
    fc8c:	e08f0000 	add	r0, pc, r0
    fc90:	eb0005db 	bl	11404 <tfp_printf>
log_hexdump(hdr, hdrlen);
    fc94:	e1a01009 	mov	r1, r9
    fc98:	e28d002c 	add	r0, sp, #44	; 0x2c
    fc9c:	ebffec95 	bl	aef8 <log_hexdump>
  if (!rc && iobuf_error (inp))
    fca0:	eaffff63 	b	fa34 <parse.constprop.0+0x674>
  PKT_mdc *mdc;
  byte *p;

  (void)pkttype;

  mdc = pkt->pkt.mdc = xmalloc(sizeof *pkt->pkt.mdc);
    fca4:	e3a00014 	mov	r0, #20
    fca8:	ebfffcdb 	bl	f01c <xmalloc>
  if (list_mode)
    printf(listfp, ":mdc packet: length=%lu\n", pktlen);
  if (!new_ctb || pktlen != 20)
    fcac:	e2555014 	subs	r5, r5, #20
    fcb0:	e59d3010 	ldr	r3, [sp, #16]
    fcb4:	13a05001 	movne	r5, #1
    fcb8:	e3530000 	cmp	r3, #0
    fcbc:	03855001 	orreq	r5, r5, #1
  mdc = pkt->pkt.mdc = xmalloc(sizeof *pkt->pkt.mdc);
    fcc0:	e59d300c 	ldr	r3, [sp, #12]
  if (!new_ctb || pktlen != 20)
    fcc4:	e3550000 	cmp	r5, #0
    fcc8:	02807014 	addeq	r7, r0, #20
  mdc = pkt->pkt.mdc = xmalloc(sizeof *pkt->pkt.mdc);
    fccc:	e1a05000 	mov	r5, r0
    fcd0:	e5830004 	str	r0, [r3, #4]
  if (!new_ctb || pktlen != 20)
    fcd4:	0a000009 	beq	fd00 <parse.constprop.0+0x940>
    fcd8:	ea00032b 	b	1098c <parse.constprop.0+0x15cc>
    rc = gpg_error(GPG_ERR_INV_PACKET);
    goto leave;
  }
  p = mdc->hash;
  for (; pktlen; pktlen--, p++)
    *p = iobuf_get_noeof(inp);
    fcdc:	e5842018 	str	r2, [r4, #24]
    fce0:	e5942008 	ldr	r2, [r4, #8]
    fce4:	e5941020 	ldr	r1, [r4, #32]
    fce8:	e2822001 	add	r2, r2, #1
    fcec:	e5842008 	str	r2, [r4, #8]
    fcf0:	e7d10003 	ldrb	r0, [r1, r3]
    fcf4:	e4c50001 	strb	r0, [r5], #1
  for (; pktlen; pktlen--, p++)
    fcf8:	e1570005 	cmp	r7, r5
    fcfc:	0a000094 	beq	ff54 <parse.constprop.0+0xb94>
    *p = iobuf_get_noeof(inp);
    fd00:	e5943010 	ldr	r3, [r4, #16]
    fd04:	e1a00004 	mov	r0, r4
    fd08:	e3530000 	cmp	r3, #0
    fd0c:	1a000004 	bne	fd24 <parse.constprop.0+0x964>
    fd10:	e5943018 	ldr	r3, [r4, #24]
    fd14:	e594201c 	ldr	r2, [r4, #28]
    fd18:	e1530002 	cmp	r3, r2
    fd1c:	e2832001 	add	r2, r3, #1
    fd20:	3affffed 	bcc	fcdc <parse.constprop.0+0x91c>
    fd24:	ebffe5b1 	bl	93f0 <iobuf_readbyte>
    fd28:	e6ef0070 	uxtb	r0, r0
    fd2c:	eafffff0 	b	fcf4 <parse.constprop.0+0x934>
  if (!partial && pktlen < 6)
    fd30:	e22a2001 	eor	r2, sl, #1
    fd34:	e3550005 	cmp	r5, #5
    fd38:	83a02000 	movhi	r2, #0
    fd3c:	92022001 	andls	r2, r2, #1
    fd40:	e3520000 	cmp	r2, #0
    fd44:	1a00031a 	bne	109b4 <parse.constprop.0+0x15f4>
  mode = iobuf_get_noeof(inp);
    fd48:	e5942010 	ldr	r2, [r4, #16]
    fd4c:	e3520000 	cmp	r2, #0
    fd50:	1a000102 	bne	10160 <parse.constprop.0+0xda0>
    fd54:	e5940018 	ldr	r0, [r4, #24]
    fd58:	e594201c 	ldr	r2, [r4, #28]
    fd5c:	e1500002 	cmp	r0, r2
    fd60:	2a0000fe 	bcs	10160 <parse.constprop.0+0xda0>
    fd64:	e5941008 	ldr	r1, [r4, #8]
  if (pktlen)
    fd68:	e3550000 	cmp	r5, #0
  mode = iobuf_get_noeof(inp);
    fd6c:	e594c020 	ldr	ip, [r4, #32]
    pktlen--;
    fd70:	12455001 	subne	r5, r5, #1
  mode = iobuf_get_noeof(inp);
    fd74:	e2811001 	add	r1, r1, #1
    fd78:	e5841008 	str	r1, [r4, #8]
    fd7c:	e2801001 	add	r1, r0, #1
    fd80:	e5841018 	str	r1, [r4, #24]
    fd84:	e7dc8000 	ldrb	r8, [ip, r0]
  if (pktlen)
    fd88:	0a000000 	beq	fd90 <parse.constprop.0+0x9d0>
  namelen = iobuf_get_noeof(inp);
    fd8c:	e5941018 	ldr	r1, [r4, #24]
    fd90:	e1510002 	cmp	r1, r2
    fd94:	2a0000fb 	bcs	10188 <parse.constprop.0+0xdc8>
    fd98:	e5942008 	ldr	r2, [r4, #8]
    fd9c:	e5940020 	ldr	r0, [r4, #32]
    fda0:	e2822001 	add	r2, r2, #1
    fda4:	e5842008 	str	r2, [r4, #8]
    fda8:	e2812001 	add	r2, r1, #1
    fdac:	e5842018 	str	r2, [r4, #24]
    fdb0:	e7d07001 	ldrb	r7, [r0, r1]
  if (pktlen)
    fdb4:	e58d3010 	str	r3, [sp, #16]
    fdb8:	e3550000 	cmp	r5, #0
    fdbc:	0a00011a 	beq	1022c <parse.constprop.0+0xe6c>
      xmalloc(sizeof *pkt->pkt.plaintext + namelen - 1);
    fdc0:	e287001b 	add	r0, r7, #27
    pktlen--;
    fdc4:	e2455001 	sub	r5, r5, #1
      xmalloc(sizeof *pkt->pkt.plaintext + namelen - 1);
    fdc8:	ebfffc93 	bl	f01c <xmalloc>
  pt = pkt->pkt.plaintext =
    fdcc:	e59d300c 	ldr	r3, [sp, #12]
  if (pktlen)
    fdd0:	e3550000 	cmp	r5, #0
      xmalloc(sizeof *pkt->pkt.plaintext + namelen - 1);
    fdd4:	e1a0b000 	mov	fp, r0
  pt = pkt->pkt.plaintext =
    fdd8:	e5830004 	str	r0, [r3, #4]
  pt->new_ctb = new_ctb;
    fddc:	e59d3010 	ldr	r3, [sp, #16]
  pt->mode = mode;
    fde0:	e580800c 	str	r8, [r0, #12]
  pt->new_ctb = new_ctb;
    fde4:	e5c03008 	strb	r3, [r0, #8]
  pt->is_partial = partial;
    fde8:	e5c0a009 	strb	sl, [r0, #9]
  pt->namelen = namelen;
    fdec:	e5807014 	str	r7, [r0, #20]
  if (pktlen)
    fdf0:	0a000117 	beq	10254 <parse.constprop.0+0xe94>
    for (i = 0; pktlen > 4 && i < namelen; pktlen--, i++)
    fdf4:	e3570000 	cmp	r7, #0
    fdf8:	13550004 	cmpne	r5, #4
      pt->name[i] = iobuf_get_noeof(inp);
    fdfc:	e5942010 	ldr	r2, [r4, #16]
    for (i = 0; pktlen > 4 && i < namelen; pktlen--, i++)
    fe00:	83a03001 	movhi	r3, #1
    fe04:	93a03000 	movls	r3, #0
    fe08:	9a000312 	bls	10a58 <parse.constprop.0+0x1698>
    fe0c:	e2808017 	add	r8, r0, #23
    fe10:	e3a0a000 	mov	sl, #0
    fe14:	ea00000f 	b	fe58 <parse.constprop.0+0xa98>
      pt->name[i] = iobuf_get_noeof(inp);
    fe18:	e5841018 	str	r1, [r4, #24]
    fe1c:	e5941008 	ldr	r1, [r4, #8]
    fe20:	e5940020 	ldr	r0, [r4, #32]
    fe24:	e2811001 	add	r1, r1, #1
    fe28:	e5841008 	str	r1, [r4, #8]
    fe2c:	e7d00003 	ldrb	r0, [r0, r3]
    fe30:	e5e80001 	strb	r0, [r8, #1]!
    for (i = 0; pktlen > 4 && i < namelen; pktlen--, i++)
    fe34:	e2455001 	sub	r5, r5, #1
    fe38:	e3550004 	cmp	r5, #4
    fe3c:	e28aa001 	add	sl, sl, #1
    fe40:	93a03000 	movls	r3, #0
    fe44:	83a03001 	movhi	r3, #1
    fe48:	e157000a 	cmp	r7, sl
    fe4c:	d3a03000 	movle	r3, #0
    fe50:	e3530000 	cmp	r3, #0
    fe54:	0a000082 	beq	10064 <parse.constprop.0+0xca4>
      pt->name[i] = iobuf_get_noeof(inp);
    fe58:	e3520000 	cmp	r2, #0
    fe5c:	e1a00004 	mov	r0, r4
    fe60:	1a000004 	bne	fe78 <parse.constprop.0+0xab8>
    fe64:	e5943018 	ldr	r3, [r4, #24]
    fe68:	e594101c 	ldr	r1, [r4, #28]
    fe6c:	e1530001 	cmp	r3, r1
    fe70:	e2831001 	add	r1, r3, #1
    fe74:	3affffe7 	bcc	fe18 <parse.constprop.0+0xa58>
    fe78:	ebffe55c 	bl	93f0 <iobuf_readbyte>
  a = (unsigned long)iobuf_get_noeof(inp) << 24;
    fe7c:	e5942010 	ldr	r2, [r4, #16]
      pt->name[i] = iobuf_get_noeof(inp);
    fe80:	e6ef0070 	uxtb	r0, r0
    fe84:	eaffffe9 	b	fe30 <parse.constprop.0+0xa70>
  if (pktlen != 3)
    fe88:	e3550003 	cmp	r5, #3
    fe8c:	1a000038 	bne	ff74 <parse.constprop.0+0xbb4>
  if (iobuf_get(inp) != 'P')
    fe90:	e5943010 	ldr	r3, [r4, #16]
    fe94:	e3530000 	cmp	r3, #0
    fe98:	1a000112 	bne	102e8 <parse.constprop.0+0xf28>
    fe9c:	e5943018 	ldr	r3, [r4, #24]
    fea0:	e594201c 	ldr	r2, [r4, #28]
    fea4:	e1530002 	cmp	r3, r2
    fea8:	2a00010e 	bcs	102e8 <parse.constprop.0+0xf28>
    feac:	e5942008 	ldr	r2, [r4, #8]
    feb0:	e5941020 	ldr	r1, [r4, #32]
    feb4:	e2822001 	add	r2, r2, #1
    feb8:	e5842008 	str	r2, [r4, #8]
    febc:	e2832001 	add	r2, r3, #1
    fec0:	e5842018 	str	r2, [r4, #24]
    fec4:	e7d13003 	ldrb	r3, [r1, r3]
    fec8:	e2533050 	subs	r3, r3, #80	; 0x50
    fecc:	13a03001 	movne	r3, #1
    fed0:	e3530000 	cmp	r3, #0
    fed4:	1a000025 	bne	ff70 <parse.constprop.0+0xbb0>
  if (iobuf_get(inp) != 'G')
    fed8:	e5943010 	ldr	r3, [r4, #16]
    fedc:	e3530000 	cmp	r3, #0
    fee0:	1a00012f 	bne	103a4 <parse.constprop.0+0xfe4>
    fee4:	e5943018 	ldr	r3, [r4, #24]
    fee8:	e594201c 	ldr	r2, [r4, #28]
    feec:	e1530002 	cmp	r3, r2
    fef0:	2a00012b 	bcs	103a4 <parse.constprop.0+0xfe4>
    fef4:	e5942008 	ldr	r2, [r4, #8]
    fef8:	e5941020 	ldr	r1, [r4, #32]
    fefc:	e2822001 	add	r2, r2, #1
    ff00:	e5842008 	str	r2, [r4, #8]
    ff04:	e2832001 	add	r2, r3, #1
    ff08:	e5842018 	str	r2, [r4, #24]
    ff0c:	e7d13003 	ldrb	r3, [r1, r3]
    ff10:	e3530047 	cmp	r3, #71	; 0x47
    ff14:	1a000015 	bne	ff70 <parse.constprop.0+0xbb0>
  if (iobuf_get(inp) != 'P')
    ff18:	e5943018 	ldr	r3, [r4, #24]
    ff1c:	e594201c 	ldr	r2, [r4, #28]
    ff20:	e1530002 	cmp	r3, r2
    ff24:	2a000125 	bcs	103c0 <parse.constprop.0+0x1000>
    ff28:	e5942008 	ldr	r2, [r4, #8]
    ff2c:	e5941020 	ldr	r1, [r4, #32]
    ff30:	e2822001 	add	r2, r2, #1
    ff34:	e5842008 	str	r2, [r4, #8]
    ff38:	e2832001 	add	r2, r3, #1
    ff3c:	e5842018 	str	r2, [r4, #24]
    ff40:	e7d13003 	ldrb	r3, [r1, r3]
    ff44:	e2533050 	subs	r3, r3, #80	; 0x50
    ff48:	13a03001 	movne	r3, #1
    ff4c:	e3530000 	cmp	r3, #0
    ff50:	1a000006 	bne	ff70 <parse.constprop.0+0xbb0>
  free_packet (NULL, ctx);
    ff54:	e1a01006 	mov	r1, r6
    ff58:	e3a00000 	mov	r0, #0
    ff5c:	ebfff19c 	bl	c5d4 <free_packet>
              || pkttype == PKT_SIGNATURE))
    ff60:	e3580002 	cmp	r8, #2
    ff64:	13580011 	cmpne	r8, #17
    ff68:	0afffea7 	beq	fa0c <parse.constprop.0+0x64c>
    ff6c:	eaffff44 	b	fc84 <parse.constprop.0+0x8c4>
    pktlen--;
    ff70:	e3a05002 	mov	r5, #2
  printf("invalid marker packet\n");
    ff74:	e59f04e4 	ldr	r0, [pc, #1252]	; 10460 <parse.constprop.0+0x10a0>
    ff78:	e08f0000 	add	r0, pc, r0
    ff7c:	eb000520 	bl	11404 <tfp_printf>
  iobuf_skip_rest(inp, pktlen, 0);
    ff80:	e3a02000 	mov	r2, #0
    ff84:	e1a00004 	mov	r0, r4
    ff88:	e1a01005 	mov	r1, r5
    ff8c:	ebffeab0 	bl	aa54 <iobuf_skip_rest>
  free_packet (NULL, ctx);
    ff90:	e1a01006 	mov	r1, r6
    ff94:	e3a00000 	mov	r0, #0
    ff98:	ebfff18d 	bl	c5d4 <free_packet>
printf("Packet header (%d bytes):\n", hdrlen);
    ff9c:	e59f04c0 	ldr	r0, [pc, #1216]	; 10464 <parse.constprop.0+0x10a4>
    ffa0:	e1a01009 	mov	r1, r9
    ffa4:	e08f0000 	add	r0, pc, r0
    ffa8:	eb000515 	bl	11404 <tfp_printf>
log_hexdump(hdr, hdrlen);
    ffac:	e1a01009 	mov	r1, r9
    ffb0:	e28d002c 	add	r0, sp, #44	; 0x2c
    ffb4:	ebffebcf 	bl	aef8 <log_hexdump>
    ffb8:	e3a0000e 	mov	r0, #14
    ffbc:	eafffdbe 	b	f6bc <parse.constprop.0+0x2fc>
              if ((c = iobuf_get (inp)) == -1)
    ffc0:	ebffe50a 	bl	93f0 <iobuf_readbyte>
    ffc4:	e3700001 	cmn	r0, #1
              value[i] = hdr[hdrlen++] = c;
    ffc8:	e6ef3070 	uxtb	r3, r0
              if ((c = iobuf_get (inp)) == -1)
    ffcc:	1afffeb0 	bne	fa94 <parse.constprop.0+0x6d4>
                  printf ("%s: 4 byte length invalid\n", iobuf_where (inp));
    ffd0:	e59f1490 	ldr	r1, [pc, #1168]	; 10468 <parse.constprop.0+0x10a8>
    ffd4:	e59f0490 	ldr	r0, [pc, #1168]	; 1046c <parse.constprop.0+0x10ac>
    ffd8:	e08f1001 	add	r1, pc, r1
    ffdc:	e08f0000 	add	r0, pc, r0
    ffe0:	eb000507 	bl	11404 <tfp_printf>
                  goto leave;
    ffe4:	e3a0000e 	mov	r0, #14
    ffe8:	eafffdb3 	b	f6bc <parse.constprop.0+0x2fc>
  else if (!pktlen && pkttype == PKT_COMPRESSED)
    ffec:	e3550000 	cmp	r5, #0
    fff0:	03580008 	cmpeq	r8, #8
    fff4:	0a0000c0 	beq	102fc <parse.constprop.0+0xf3c>
    for (; pktlen; pktlen -= n)
    fff8:	e3550000 	cmp	r5, #0
    fffc:	0afffe8c 	beq	fa34 <parse.constprop.0+0x674>
   10000:	e28d7034 	add	r7, sp, #52	; 0x34
   10004:	ea000005 	b	10020 <parse.constprop.0+0xc60>
      if ((rc = iobuf_write(out, buf, n)))
   10008:	e59d00c4 	ldr	r0, [sp, #196]	; 0xc4
   1000c:	ebffe64c 	bl	9944 <iobuf_write>
   10010:	e3500000 	cmp	r0, #0
   10014:	1afffdd1 	bne	f760 <parse.constprop.0+0x3a0>
    for (; pktlen; pktlen -= n)
   10018:	e0555006 	subs	r5, r5, r6
   1001c:	0afffe84 	beq	fa34 <parse.constprop.0+0x674>
      n = iobuf_read(inp, buf, n);
   10020:	e3550064 	cmp	r5, #100	; 0x64
   10024:	e1a01007 	mov	r1, r7
   10028:	31a02005 	movcc	r2, r5
   1002c:	23a02064 	movcs	r2, #100	; 0x64
   10030:	e1a00004 	mov	r0, r4
   10034:	ebffe5a6 	bl	96d4 <iobuf_read>
      if (n == -1)
   10038:	e3700001 	cmn	r0, #1
      if ((rc = iobuf_write(out, buf, n)))
   1003c:	e1a01007 	mov	r1, r7
      n = iobuf_read(inp, buf, n);
   10040:	e1a06000 	mov	r6, r0
      if ((rc = iobuf_write(out, buf, n)))
   10044:	e1a02000 	mov	r2, r0
      if (n == -1)
   10048:	1affffee 	bne	10008 <parse.constprop.0+0xc48>
        return gpg_error(GPG_ERR_EOF);
   1004c:	e3030fff 	movw	r0, #16383	; 0x3fff
   10050:	e3400200 	movt	r0, #512	; 0x200
  if (!rc && iobuf_error (inp))
   10054:	eafffdc3 	b	f768 <parse.constprop.0+0x3a8>
  a = (unsigned long)iobuf_get_noeof(inp) << 24;
   10058:	e59d700c 	ldr	r7, [sp, #12]
   1005c:	e3a05000 	mov	r5, #0
   10060:	e5942010 	ldr	r2, [r4, #16]
  for (; i < namelen; i++)
   10064:	e157000a 	cmp	r7, sl
   10068:	da000007 	ble	1008c <parse.constprop.0+0xccc>
   1006c:	e28a3018 	add	r3, sl, #24
   10070:	e2871018 	add	r1, r7, #24
   10074:	e08b3003 	add	r3, fp, r3
    pt->name[i] = 0;
   10078:	e3a00000 	mov	r0, #0
   1007c:	e08b1001 	add	r1, fp, r1
   10080:	e4c30001 	strb	r0, [r3], #1
  for (; i < namelen; i++)
   10084:	e1510003 	cmp	r1, r3
   10088:	1afffffc 	bne	10080 <parse.constprop.0+0xcc0>
  a = (unsigned long)iobuf_get_noeof(inp) << 24;
   1008c:	e3520000 	cmp	r2, #0
   10090:	1a00004f 	bne	101d4 <parse.constprop.0+0xe14>
   10094:	e5941018 	ldr	r1, [r4, #24]
   10098:	e594301c 	ldr	r3, [r4, #28]
   1009c:	e1510003 	cmp	r1, r3
   100a0:	2a00004b 	bcs	101d4 <parse.constprop.0+0xe14>
   100a4:	e5942008 	ldr	r2, [r4, #8]
   100a8:	e5940020 	ldr	r0, [r4, #32]
   100ac:	e2822001 	add	r2, r2, #1
   100b0:	e5842008 	str	r2, [r4, #8]
   100b4:	e2812001 	add	r2, r1, #1
   100b8:	e5842018 	str	r2, [r4, #24]
   100bc:	e7d01001 	ldrb	r1, [r0, r1]
   100c0:	e1a08c01 	lsl	r8, r1, #24
  a |= iobuf_get_noeof(inp) << 16;
   100c4:	e1530002 	cmp	r3, r2
   100c8:	9a000048 	bls	101f0 <parse.constprop.0+0xe30>
   100cc:	e5941008 	ldr	r1, [r4, #8]
   100d0:	e5940020 	ldr	r0, [r4, #32]
   100d4:	e2811001 	add	r1, r1, #1
   100d8:	e5841008 	str	r1, [r4, #8]
   100dc:	e2821001 	add	r1, r2, #1
   100e0:	e5841018 	str	r1, [r4, #24]
   100e4:	e7d07002 	ldrb	r7, [r0, r2]
   100e8:	e1887807 	orr	r7, r8, r7, lsl #16
  a |= iobuf_get_noeof(inp) << 8;
   100ec:	e1530001 	cmp	r3, r1
   100f0:	9a00002a 	bls	101a0 <parse.constprop.0+0xde0>
   100f4:	e5942008 	ldr	r2, [r4, #8]
   100f8:	e5940020 	ldr	r0, [r4, #32]
   100fc:	e2822001 	add	r2, r2, #1
   10100:	e5842008 	str	r2, [r4, #8]
   10104:	e2812001 	add	r2, r1, #1
   10108:	e5842018 	str	r2, [r4, #24]
   1010c:	e7d01001 	ldrb	r1, [r0, r1]
   10110:	e1877401 	orr	r7, r7, r1, lsl #8
  a |= iobuf_get_noeof(inp);
   10114:	e1520003 	cmp	r2, r3
   10118:	2a000029 	bcs	101c4 <parse.constprop.0+0xe04>
   1011c:	e5943008 	ldr	r3, [r4, #8]
   10120:	e5941020 	ldr	r1, [r4, #32]
   10124:	e2833001 	add	r3, r3, #1
   10128:	e5843008 	str	r3, [r4, #8]
   1012c:	e2823001 	add	r3, r2, #1
   10130:	e5843018 	str	r3, [r4, #24]
   10134:	e7d13002 	ldrb	r3, [r1, r2]
   10138:	e1833007 	orr	r3, r3, r7
  if (pktlen)
   1013c:	e3550000 	cmp	r5, #0
  pt->timestamp = read_32(inp);
   10140:	e58b3010 	str	r3, [fp, #16]
    pktlen -= 4;
   10144:	12455004 	subne	r5, r5, #4
  pt->len = pktlen;
   10148:	e58b5000 	str	r5, [fp]
  free_packet (NULL, ctx);
   1014c:	e1a01006 	mov	r1, r6
  pt->buf = inp;
   10150:	e58b4004 	str	r4, [fp, #4]
  free_packet (NULL, ctx);
   10154:	e3a00000 	mov	r0, #0
   10158:	ebfff11d 	bl	c5d4 <free_packet>
  if (!rc && (pkttype == PKT_PUBLIC_KEY
   1015c:	eafffec8 	b	fc84 <parse.constprop.0+0x8c4>
   10160:	e58d3010 	str	r3, [sp, #16]
  mode = iobuf_get_noeof(inp);
   10164:	e1a00004 	mov	r0, r4
   10168:	ebffe4a0 	bl	93f0 <iobuf_readbyte>
  namelen = iobuf_get_noeof(inp);
   1016c:	e5942010 	ldr	r2, [r4, #16]
  if (pktlen)
   10170:	e3550000 	cmp	r5, #0
   10174:	e59d3010 	ldr	r3, [sp, #16]
    pktlen--;
   10178:	12455001 	subne	r5, r5, #1
  namelen = iobuf_get_noeof(inp);
   1017c:	e3520000 	cmp	r2, #0
  mode = iobuf_get_noeof(inp);
   10180:	e6ef8070 	uxtb	r8, r0
  namelen = iobuf_get_noeof(inp);
   10184:	0a000109 	beq	105b0 <parse.constprop.0+0x11f0>
   10188:	e58d3010 	str	r3, [sp, #16]
   1018c:	e1a00004 	mov	r0, r4
   10190:	ebffe496 	bl	93f0 <iobuf_readbyte>
   10194:	e59d3010 	ldr	r3, [sp, #16]
   10198:	e6ef7070 	uxtb	r7, r0
   1019c:	eaffff04 	b	fdb4 <parse.constprop.0+0x9f4>
  a |= iobuf_get_noeof(inp) << 8;
   101a0:	e1a00004 	mov	r0, r4
   101a4:	ebffe491 	bl	93f0 <iobuf_readbyte>
  a |= iobuf_get_noeof(inp);
   101a8:	e5942010 	ldr	r2, [r4, #16]
  a |= iobuf_get_noeof(inp) << 8;
   101ac:	e1a03400 	lsl	r3, r0, #8
  a |= iobuf_get_noeof(inp);
   101b0:	e3520000 	cmp	r2, #0
  a |= iobuf_get_noeof(inp) << 8;
   101b4:	e6ff3073 	uxth	r3, r3
   101b8:	e1837007 	orr	r7, r3, r7
  a |= iobuf_get_noeof(inp);
   101bc:	01c421d8 	ldrdeq	r2, [r4, #24]
   101c0:	0affffd3 	beq	10114 <parse.constprop.0+0xd54>
   101c4:	e1a00004 	mov	r0, r4
   101c8:	ebffe488 	bl	93f0 <iobuf_readbyte>
   101cc:	e6ef3070 	uxtb	r3, r0
   101d0:	eaffffd8 	b	10138 <parse.constprop.0+0xd78>
  a = (unsigned long)iobuf_get_noeof(inp) << 24;
   101d4:	e1a00004 	mov	r0, r4
   101d8:	ebffe484 	bl	93f0 <iobuf_readbyte>
  a |= iobuf_get_noeof(inp) << 16;
   101dc:	e5943010 	ldr	r3, [r4, #16]
  a = (unsigned long)iobuf_get_noeof(inp) << 24;
   101e0:	e1a08c00 	lsl	r8, r0, #24
  a |= iobuf_get_noeof(inp) << 16;
   101e4:	e3530000 	cmp	r3, #0
   101e8:	01c421d8 	ldrdeq	r2, [r4, #24]
   101ec:	0affffb4 	beq	100c4 <parse.constprop.0+0xd04>
   101f0:	e1a00004 	mov	r0, r4
   101f4:	ebffe47d 	bl	93f0 <iobuf_readbyte>
  a |= iobuf_get_noeof(inp) << 8;
   101f8:	e5943010 	ldr	r3, [r4, #16]
  a |= iobuf_get_noeof(inp) << 16;
   101fc:	e1a07800 	lsl	r7, r0, #16
  a |= iobuf_get_noeof(inp) << 8;
   10200:	e3530000 	cmp	r3, #0
  a |= iobuf_get_noeof(inp) << 16;
   10204:	e20778ff 	and	r7, r7, #16711680	; 0xff0000
   10208:	e1877008 	orr	r7, r7, r8
  a |= iobuf_get_noeof(inp) << 8;
   1020c:	1affffe3 	bne	101a0 <parse.constprop.0+0xde0>
   10210:	e5941018 	ldr	r1, [r4, #24]
   10214:	e594301c 	ldr	r3, [r4, #28]
   10218:	eaffffb3 	b	100ec <parse.constprop.0+0xd2c>
  version = iobuf_get_noeof(inp);
   1021c:	e1a00004 	mov	r0, r4
   10220:	ebffe472 	bl	93f0 <iobuf_readbyte>
   10224:	e6efb070 	uxtb	fp, r0
   10228:	eafffe55 	b	fb84 <parse.constprop.0+0x7c4>
      xmalloc(sizeof *pkt->pkt.plaintext + namelen - 1);
   1022c:	e287001b 	add	r0, r7, #27
   10230:	ebfffb79 	bl	f01c <xmalloc>
  pt = pkt->pkt.plaintext =
   10234:	e59d300c 	ldr	r3, [sp, #12]
      xmalloc(sizeof *pkt->pkt.plaintext + namelen - 1);
   10238:	e1a0b000 	mov	fp, r0
  pt = pkt->pkt.plaintext =
   1023c:	e5830004 	str	r0, [r3, #4]
  pt->new_ctb = new_ctb;
   10240:	e59d3010 	ldr	r3, [sp, #16]
  pt->mode = mode;
   10244:	e580800c 	str	r8, [r0, #12]
  pt->new_ctb = new_ctb;
   10248:	e5c03008 	strb	r3, [r0, #8]
  pt->is_partial = partial;
   1024c:	e5c0a009 	strb	sl, [r0, #9]
  pt->namelen = namelen;
   10250:	e5807014 	str	r7, [r0, #20]
      if ((c = iobuf_get(inp)) == -1)
   10254:	e5942010 	ldr	r2, [r4, #16]
    for (i = 0; i < namelen; i++)
   10258:	e3570000 	cmp	r7, #0
   1025c:	0a0000d8 	beq	105c4 <parse.constprop.0+0x1204>
   10260:	e58d700c 	str	r7, [sp, #12]
   10264:	e2873017 	add	r3, r7, #23
   10268:	e083300b 	add	r3, r3, fp
   1026c:	e30f5fe9 	movw	r5, #65513	; 0xffe9
   10270:	e34f5fff 	movt	r5, #65535	; 0xffff
   10274:	e28b8017 	add	r8, fp, #23
   10278:	e045500b 	sub	r5, r5, fp
   1027c:	e1a07008 	mov	r7, r8
   10280:	e1a08003 	mov	r8, r3
   10284:	ea000009 	b	102b0 <parse.constprop.0+0xef0>
      if ((c = iobuf_get(inp)) == -1)
   10288:	e5940008 	ldr	r0, [r4, #8]
   1028c:	e594c020 	ldr	ip, [r4, #32]
   10290:	e2800001 	add	r0, r0, #1
   10294:	e5840008 	str	r0, [r4, #8]
   10298:	e2810001 	add	r0, r1, #1
   1029c:	e5840018 	str	r0, [r4, #24]
   102a0:	e7dc0001 	ldrb	r0, [ip, r1]
        pt->name[i] = c;
   102a4:	e5e70001 	strb	r0, [r7, #1]!
    for (i = 0; i < namelen; i++)
   102a8:	e1580007 	cmp	r8, r7
   102ac:	0a0000c4 	beq	105c4 <parse.constprop.0+0x1204>
   102b0:	e085a007 	add	sl, r5, r7
      if ((c = iobuf_get(inp)) == -1)
   102b4:	e3520000 	cmp	r2, #0
   102b8:	e1a00004 	mov	r0, r4
   102bc:	1a000003 	bne	102d0 <parse.constprop.0+0xf10>
   102c0:	e5941018 	ldr	r1, [r4, #24]
   102c4:	e594c01c 	ldr	ip, [r4, #28]
   102c8:	e151000c 	cmp	r1, ip
   102cc:	3affffed 	bcc	10288 <parse.constprop.0+0xec8>
   102d0:	ebffe446 	bl	93f0 <iobuf_readbyte>
   102d4:	e3700001 	cmn	r0, #1
        pt->name[i] = c;
   102d8:	e6ef0070 	uxtb	r0, r0
      if ((c = iobuf_get(inp)) == -1)
   102dc:	0affff5d 	beq	10058 <parse.constprop.0+0xc98>
  a = (unsigned long)iobuf_get_noeof(inp) << 24;
   102e0:	e5942010 	ldr	r2, [r4, #16]
   102e4:	eaffffee 	b	102a4 <parse.constprop.0+0xee4>
  if (iobuf_get(inp) != 'P')
   102e8:	e1a00004 	mov	r0, r4
   102ec:	ebffe43f 	bl	93f0 <iobuf_readbyte>
   102f0:	e2503050 	subs	r3, r0, #80	; 0x50
   102f4:	13a03001 	movne	r3, #1
   102f8:	eafffef4 	b	fed0 <parse.constprop.0+0xb10>
    printf("copy_packet: compressed!\n");
   102fc:	e59f016c 	ldr	r0, [pc, #364]	; 10470 <parse.constprop.0+0x10b0>
   10300:	e28d7034 	add	r7, sp, #52	; 0x34
   10304:	e08f0000 	add	r0, pc, r0
   10308:	eb00043d 	bl	11404 <tfp_printf>
    while ((n = iobuf_read(inp, buf, sizeof(buf))) != -1)
   1030c:	ea000002 	b	1031c <parse.constprop.0+0xf5c>
      if ((rc = iobuf_write(out, buf, n)))
   10310:	ebffe58b 	bl	9944 <iobuf_write>
   10314:	e3500000 	cmp	r0, #0
   10318:	1afffd10 	bne	f760 <parse.constprop.0+0x3a0>
    while ((n = iobuf_read(inp, buf, sizeof(buf))) != -1)
   1031c:	e3a02064 	mov	r2, #100	; 0x64
   10320:	e1a01007 	mov	r1, r7
   10324:	e1a00004 	mov	r0, r4
   10328:	ebffe4e9 	bl	96d4 <iobuf_read>
   1032c:	e1a02000 	mov	r2, r0
      if ((rc = iobuf_write(out, buf, n)))
   10330:	e1a01007 	mov	r1, r7
   10334:	e59d00c4 	ldr	r0, [sp, #196]	; 0xc4
    while ((n = iobuf_read(inp, buf, sizeof(buf))) != -1)
   10338:	e3720001 	cmn	r2, #1
   1033c:	1afffff3 	bne	10310 <parse.constprop.0+0xf50>
   10340:	eafffdbb 	b	fa34 <parse.constprop.0+0x674>
  cipher_algo = iobuf_get_noeof(inp);
   10344:	e1a00004 	mov	r0, r4
   10348:	ebffe428 	bl	93f0 <iobuf_readbyte>
  if (version == 5)
   1034c:	e35b0005 	cmp	fp, #5
  cipher_algo = iobuf_get_noeof(inp);
   10350:	e6ef3070 	uxtb	r3, r0
   10354:	e58d3010 	str	r3, [sp, #16]
  if (version == 5)
   10358:	0a000177 	beq	1093c <parse.constprop.0+0x157c>
  s2kmode = iobuf_get_noeof(inp);
   1035c:	e5943010 	ldr	r3, [r4, #16]
  pktlen--;
   10360:	e2458002 	sub	r8, r5, #2
    aead_algo = 0;
   10364:	e3a0a000 	mov	sl, #0
  s2kmode = iobuf_get_noeof(inp);
   10368:	e3530000 	cmp	r3, #0
   1036c:	0594201c 	ldreq	r2, [r4, #28]
   10370:	0afffe1c 	beq	fbe8 <parse.constprop.0+0x828>
   10374:	e1a00004 	mov	r0, r4
   10378:	ebffe41c 	bl	93f0 <iobuf_readbyte>
  hash_algo = iobuf_get_noeof(inp);
   1037c:	e5943010 	ldr	r3, [r4, #16]
  s2kmode = iobuf_get_noeof(inp);
   10380:	e6ef7070 	uxtb	r7, r0
  hash_algo = iobuf_get_noeof(inp);
   10384:	e3530000 	cmp	r3, #0
   10388:	01c421d8 	ldrdeq	r2, [r4, #24]
   1038c:	0afffe20 	beq	fc14 <parse.constprop.0+0x854>
   10390:	e1a00004 	mov	r0, r4
   10394:	ebffe415 	bl	93f0 <iobuf_readbyte>
   10398:	e6ef3070 	uxtb	r3, r0
   1039c:	e58d3018 	str	r3, [sp, #24]
   103a0:	eafffe25 	b	fc3c <parse.constprop.0+0x87c>
  if (iobuf_get(inp) != 'G')
   103a4:	e1a00004 	mov	r0, r4
   103a8:	ebffe410 	bl	93f0 <iobuf_readbyte>
   103ac:	e3500047 	cmp	r0, #71	; 0x47
   103b0:	1afffeee 	bne	ff70 <parse.constprop.0+0xbb0>
   103b4:	e5943010 	ldr	r3, [r4, #16]
  if (iobuf_get(inp) != 'P')
   103b8:	e3530000 	cmp	r3, #0
   103bc:	0afffed5 	beq	ff18 <parse.constprop.0+0xb58>
   103c0:	e1a00004 	mov	r0, r4
   103c4:	ebffe409 	bl	93f0 <iobuf_readbyte>
   103c8:	e2503050 	subs	r3, r0, #80	; 0x50
   103cc:	13a03001 	movne	r3, #1
   103d0:	eafffedd 	b	ff4c <parse.constprop.0+0xb8c>
   103d4:	000084c8 	.word	0x000084c8
   103d8:	000083ec 	.word	0x000083ec
   103dc:	000084dc 	.word	0x000084dc
   103e0:	0000839c 	.word	0x0000839c
   103e4:	000083a8 	.word	0x000083a8
   103e8:	0002c3fc 	.word	0x0002c3fc
   103ec:	00008410 	.word	0x00008410
   103f0:	0000822c 	.word	0x0000822c
   103f4:	00008330 	.word	0x00008330
   103f8:	000081e4 	.word	0x000081e4
   103fc:	00008544 	.word	0x00008544
   10400:	000081fc 	.word	0x000081fc
   10404:	00008200 	.word	0x00008200
   10408:	00008044 	.word	0x00008044
   1040c:	00008070 	.word	0x00008070
   10410:	00008338 	.word	0x00008338
   10414:	0000833c 	.word	0x0000833c
   10418:	00008344 	.word	0x00008344
   1041c:	00008354 	.word	0x00008354
   10420:	00008350 	.word	0x00008350
   10424:	00008358 	.word	0x00008358
   10428:	00008358 	.word	0x00008358
   1042c:	00008328 	.word	0x00008328
   10430:	00008324 	.word	0x00008324
   10434:	00008338 	.word	0x00008338
   10438:	00008348 	.word	0x00008348
   1043c:	00008050 	.word	0x00008050
   10440:	00007e08 	.word	0x00007e08
   10444:	00007e54 	.word	0x00007e54
   10448:	00007de8 	.word	0x00007de8
   1044c:	00007e70 	.word	0x00007e70
   10450:	00007da8 	.word	0x00007da8
   10454:	00007e60 	.word	0x00007e60
   10458:	00007e68 	.word	0x00007e68
   1045c:	00007de4 	.word	0x00007de4
   10460:	00007e00 	.word	0x00007e00
   10464:	00007acc 	.word	0x00007acc
   10468:	00007900 	.word	0x00007900
   1046c:	0000796c 	.word	0x0000796c
   10470:	0000772c 	.word	0x0000772c
   10474:	00007780 	.word	0x00007780
   10478:	0000753c 	.word	0x0000753c
   1047c:	00007668 	.word	0x00007668
   10480:	000074e0 	.word	0x000074e0
   10484:	000075e4 	.word	0x000075e4
   10488:	00007458 	.word	0x00007458
   1048c:	000072f4 	.word	0x000072f4
   10490:	0000731c 	.word	0x0000731c
   10494:	0000735c 	.word	0x0000735c
   10498:	00007234 	.word	0x00007234
   1049c:	00007258 	.word	0x00007258
   104a0:	000073c4 	.word	0x000073c4
   104a4:	000070c4 	.word	0x000070c4
   104a8:	00007224 	.word	0x00007224
   104ac:	00007094 	.word	0x00007094
   104b0:	00007098 	.word	0x00007098
   104b4:	000070d8 	.word	0x000070d8
   104b8:	00007090 	.word	0x00007090
   104bc:	0000716c 	.word	0x0000716c
    version = iobuf_get_noeof(inp);
   104c0:	e5943010 	ldr	r3, [r4, #16]
   104c4:	e3530000 	cmp	r3, #0
   104c8:	1a00003f 	bne	105cc <parse.constprop.0+0x120c>
   104cc:	e5943018 	ldr	r3, [r4, #24]
   104d0:	e594201c 	ldr	r2, [r4, #28]
   104d4:	e1530002 	cmp	r3, r2
   104d8:	2a00003b 	bcs	105cc <parse.constprop.0+0x120c>
   104dc:	e5942008 	ldr	r2, [r4, #8]
   104e0:	e5941020 	ldr	r1, [r4, #32]
   104e4:	e2822001 	add	r2, r2, #1
   104e8:	e5842008 	str	r2, [r4, #8]
   104ec:	e2832001 	add	r2, r3, #1
   104f0:	e5842018 	str	r2, [r4, #24]
   104f4:	e7d11003 	ldrb	r1, [r1, r3]
    if (orig_pktlen)
   104f8:	e3550000 	cmp	r5, #0
      pktlen--;
   104fc:	12453001 	subne	r3, r5, #1
   10500:	01a03005 	moveq	r3, r5
    if (version != 1)
   10504:	e3510001 	cmp	r1, #1
    ed->mdc_method = DIGEST_ALGO_SHA1;
   10508:	03a02002 	moveq	r2, #2
   1050c:	05c7200a 	strbeq	r2, [r7, #10]
    if (version != 1)
   10510:	0afffd19 	beq	f97c <parse.constprop.0+0x5bc>
      printf("encrypted_mdc packet with unknown version %d\n",
   10514:	e51f00a8 	ldr	r0, [pc, #-168]	; 10474 <parse.constprop.0+0x10b4>
   10518:	e08f0000 	add	r0, pc, r0
   1051c:	eb0003b8 	bl	11404 <tfp_printf>
  free_packet (NULL, ctx);
   10520:	e1a01006 	mov	r1, r6
   10524:	e3a00000 	mov	r0, #0
   10528:	ebfff029 	bl	c5d4 <free_packet>
printf("Packet header (%d bytes):\n", hdrlen);
   1052c:	e51f00bc 	ldr	r0, [pc, #-188]	; 10478 <parse.constprop.0+0x10b8>
   10530:	e1a01009 	mov	r1, r9
   10534:	e08f0000 	add	r0, pc, r0
   10538:	eafffe9a 	b	ffa8 <parse.constprop.0+0xbe8>
    aead_algo = iobuf_get_noeof(inp);
   1053c:	e1a00004 	mov	r0, r4
    pktlen--;
   10540:	e2458003 	sub	r8, r5, #3
    aead_algo = iobuf_get_noeof(inp);
   10544:	ebffe3a9 	bl	93f0 <iobuf_readbyte>
  if (pktlen < 2)
   10548:	e3550004 	cmp	r5, #4
    aead_algo = iobuf_get_noeof(inp);
   1054c:	16efa070 	uxtbne	sl, r0
  s2kmode = iobuf_get_noeof(inp);
   10550:	15943010 	ldrne	r3, [r4, #16]
  if (pktlen < 2)
   10554:	1affff83 	bne	10368 <parse.constprop.0+0xfa8>
    for (i = 0; i < seskeylen && pktlen; i++, pktlen--)
   10558:	e3a05001 	mov	r5, #1
  printf("packet(%d) too short\n", pkttype);
   1055c:	e51f00e8 	ldr	r0, [pc, #-232]	; 1047c <parse.constprop.0+0x10bc>
   10560:	e3a01003 	mov	r1, #3
   10564:	e08f0000 	add	r0, pc, r0
   10568:	eb0003a5 	bl	11404 <tfp_printf>
  iobuf_skip_rest(inp, pktlen, 0);
   1056c:	e3a02000 	mov	r2, #0
   10570:	e1a00004 	mov	r0, r4
   10574:	e1a01005 	mov	r1, r5
   10578:	ebffe935 	bl	aa54 <iobuf_skip_rest>
  free_packet (NULL, ctx);
   1057c:	e1a01006 	mov	r1, r6
   10580:	e3a00000 	mov	r0, #0
   10584:	ebfff012 	bl	c5d4 <free_packet>
printf("Packet header (%d bytes):\n", hdrlen);
   10588:	e51f0110 	ldr	r0, [pc, #-272]	; 10480 <parse.constprop.0+0x10c0>
   1058c:	e1a01009 	mov	r1, r9
   10590:	e08f0000 	add	r0, pc, r0
   10594:	eb00039a 	bl	11404 <tfp_printf>
log_hexdump(hdr, hdrlen);
   10598:	e1a01009 	mov	r1, r9
   1059c:	e28d002c 	add	r0, sp, #44	; 0x2c
   105a0:	ebffea54 	bl	aef8 <log_hexdump>
   105a4:	e3a0000e 	mov	r0, #14
   105a8:	e3400200 	movt	r0, #512	; 0x200
   105ac:	eafffc6d 	b	f768 <parse.constprop.0+0x3a8>
   105b0:	e594201c 	ldr	r2, [r4, #28]
   105b4:	eafffdf4 	b	fd8c <parse.constprop.0+0x9cc>
    printf("Encrypted data length: %lu\n", ed->len);
   105b8:	e1a00005 	mov	r0, r5
   105bc:	eb000390 	bl	11404 <tfp_printf>
   105c0:	eafffcfc 	b	f9b8 <parse.constprop.0+0x5f8>
   105c4:	e3a05000 	mov	r5, #0
   105c8:	eafffeaf 	b	1008c <parse.constprop.0+0xccc>
    version = iobuf_get_noeof(inp);
   105cc:	e1a00004 	mov	r0, r4
   105d0:	ebffe386 	bl	93f0 <iobuf_readbyte>
   105d4:	e6ef1070 	uxtb	r1, r0
   105d8:	eaffffc6 	b	104f8 <parse.constprop.0+0x1138>
    printf("packet(%d) too short\n", pkttype);
   105dc:	e51f0160 	ldr	r0, [pc, #-352]	; 10484 <parse.constprop.0+0x10c4>
   105e0:	e1a01008 	mov	r1, r8
   105e4:	e58d300c 	str	r3, [sp, #12]
   105e8:	e08f0000 	add	r0, pc, r0
   105ec:	eb000384 	bl	11404 <tfp_printf>
    iobuf_skip_rest(inp, pktlen, partial);
   105f0:	e59d300c 	ldr	r3, [sp, #12]
   105f4:	e1a0200a 	mov	r2, sl
   105f8:	e1a00004 	mov	r0, r4
   105fc:	e1a01003 	mov	r1, r3
   10600:	ebffe913 	bl	aa54 <iobuf_skip_rest>
  free_packet (NULL, ctx);
   10604:	e1a01006 	mov	r1, r6
   10608:	e3a00000 	mov	r0, #0
   1060c:	ebffeff0 	bl	c5d4 <free_packet>
printf("Packet header (%d bytes):\n", hdrlen);
   10610:	e51f0190 	ldr	r0, [pc, #-400]	; 10488 <parse.constprop.0+0x10c8>
   10614:	e1a01009 	mov	r1, r9
   10618:	e08f0000 	add	r0, pc, r0
   1061c:	eafffe61 	b	ffa8 <parse.constprop.0+0xbe8>
  switch (s2kmode)
   10620:	e3a03009 	mov	r3, #9
  if (minlen > pktlen)
   10624:	e1550003 	cmp	r5, r3
   10628:	3a0000f4 	bcc	10a00 <parse.constprop.0+0x1640>
  seskeylen = pktlen - minlen;
   1062c:	e0453003 	sub	r3, r5, r3
  if (s2kmode == 1 || s2kmode == 3)
   10630:	e2472003 	sub	r2, r7, #3
   10634:	e16f2f12 	clz	r2, r2
  k = packet->pkt.symkey_enc = xmalloc_clear(sizeof *packet->pkt.symkey_enc + seskeylen - 1);
   10638:	e283001b 	add	r0, r3, #27
   1063c:	e58d3020 	str	r3, [sp, #32]
  if (s2kmode == 1 || s2kmode == 3)
   10640:	e1a022a2 	lsr	r2, r2, #5
   10644:	e58d2014 	str	r2, [sp, #20]
  k = packet->pkt.symkey_enc = xmalloc_clear(sizeof *packet->pkt.symkey_enc + seskeylen - 1);
   10648:	ebfffa86 	bl	f068 <xmalloc_clear>
   1064c:	e59d100c 	ldr	r1, [sp, #12]
  if (s2kmode == 1 || s2kmode == 3)
   10650:	e3c73002 	bic	r3, r7, #2
  k = packet->pkt.symkey_enc = xmalloc_clear(sizeof *packet->pkt.symkey_enc + seskeylen - 1);
   10654:	e5810004 	str	r0, [r1, #4]
  if (s2kmode == 1 || s2kmode == 3)
   10658:	e3530001 	cmp	r3, #1
  k->cipher_algo = cipher_algo;
   1065c:	e59d1010 	ldr	r1, [sp, #16]
  seskeylen = pktlen - minlen;
   10660:	e59d2020 	ldr	r2, [sp, #32]
  k->cipher_algo = cipher_algo;
   10664:	e5c01001 	strb	r1, [r0, #1]
  k->s2k.hash_algo = hash_algo;
   10668:	e59d1018 	ldr	r1, [sp, #24]
  k = packet->pkt.symkey_enc = xmalloc_clear(sizeof *packet->pkt.symkey_enc + seskeylen - 1);
   1066c:	e58d001c 	str	r0, [sp, #28]
  k->version = version;
   10670:	e5c0b000 	strb	fp, [r0]
  k->aead_algo = aead_algo;
   10674:	e5c0a002 	strb	sl, [r0, #2]
  k->s2k.mode = s2kmode;
   10678:	e5807004 	str	r7, [r0, #4]
  k->s2k.hash_algo = hash_algo;
   1067c:	e5c01008 	strb	r1, [r0, #8]
  seskeylen = pktlen - minlen;
   10680:	e58d200c 	str	r2, [sp, #12]
  if (s2kmode == 1 || s2kmode == 3)
   10684:	1a000032 	bne	10754 <parse.constprop.0+0x1394>
    for (i = 0; i < 8 && pktlen; i++, pktlen--)
   10688:	e58d6024 	str	r6, [sp, #36]	; 0x24
   1068c:	e2802008 	add	r2, r0, #8
   10690:	e1a06005 	mov	r6, r5
   10694:	e1a05002 	mov	r5, r2
   10698:	ea000013 	b	106ec <parse.constprop.0+0x132c>
      k->s2k.salt[i] = iobuf_get_noeof(inp);
   1069c:	e5841018 	str	r1, [r4, #24]
   106a0:	e5941008 	ldr	r1, [r4, #8]
   106a4:	e5940020 	ldr	r0, [r4, #32]
   106a8:	e2811001 	add	r1, r1, #1
   106ac:	e5841008 	str	r1, [r4, #8]
   106b0:	e7d03003 	ldrb	r3, [r0, r3]
   106b4:	e5e53001 	strb	r3, [r5, #1]!
    for (i = 0; i < 8 && pktlen; i++, pktlen--)
   106b8:	e30f3ffe 	movw	r3, #65534	; 0xfffe
   106bc:	e34f3fff 	movt	r3, #65535	; 0xffff
   106c0:	e2461001 	sub	r1, r6, #1
   106c4:	e0433001 	sub	r3, r3, r1
   106c8:	e0833008 	add	r3, r3, r8
   106cc:	e3530007 	cmp	r3, #7
   106d0:	c3a03000 	movgt	r3, #0
   106d4:	d3a03001 	movle	r3, #1
   106d8:	e3510000 	cmp	r1, #0
   106dc:	03a03000 	moveq	r3, #0
   106e0:	e3530000 	cmp	r3, #0
   106e4:	0a000064 	beq	1087c <parse.constprop.0+0x14bc>
   106e8:	e1a06001 	mov	r6, r1
      k->s2k.salt[i] = iobuf_get_noeof(inp);
   106ec:	e5943010 	ldr	r3, [r4, #16]
   106f0:	e1a00004 	mov	r0, r4
   106f4:	e3530000 	cmp	r3, #0
   106f8:	1a000004 	bne	10710 <parse.constprop.0+0x1350>
   106fc:	e5943018 	ldr	r3, [r4, #24]
   10700:	e594101c 	ldr	r1, [r4, #28]
   10704:	e1530001 	cmp	r3, r1
   10708:	e2831001 	add	r1, r3, #1
   1070c:	3affffe2 	bcc	1069c <parse.constprop.0+0x12dc>
   10710:	ebffe336 	bl	93f0 <iobuf_readbyte>
   10714:	e6ef3070 	uxtb	r3, r0
   10718:	eaffffe5 	b	106b4 <parse.constprop.0+0x12f4>
  k = packet->pkt.symkey_enc = xmalloc_clear(sizeof *packet->pkt.symkey_enc + seskeylen - 1);
   1071c:	e2880019 	add	r0, r8, #25
   10720:	ebfffa50 	bl	f068 <xmalloc_clear>
   10724:	e59d300c 	ldr	r3, [sp, #12]
   10728:	e58d001c 	str	r0, [sp, #28]
   1072c:	e5830004 	str	r0, [r3, #4]
  k->cipher_algo = cipher_algo;
   10730:	e59d3010 	ldr	r3, [sp, #16]
  k->version = version;
   10734:	e5c0b000 	strb	fp, [r0]
  k->cipher_algo = cipher_algo;
   10738:	e5c03001 	strb	r3, [r0, #1]
  k->s2k.hash_algo = hash_algo;
   1073c:	e59d3018 	ldr	r3, [sp, #24]
  k->aead_algo = aead_algo;
   10740:	e5c0a002 	strb	sl, [r0, #2]
  k->s2k.mode = s2kmode;
   10744:	e5807004 	str	r7, [r0, #4]
  k->s2k.hash_algo = hash_algo;
   10748:	e5c03008 	strb	r3, [r0, #8]
  seskeylen = pktlen - minlen;
   1074c:	e58d500c 	str	r5, [sp, #12]
  pktlen--;
   10750:	e58d5020 	str	r5, [sp, #32]
  k->seskeylen = seskeylen;
   10754:	e5dd3020 	ldrb	r3, [sp, #32]
   10758:	e59d201c 	ldr	r2, [sp, #28]
  if (k->seskeylen)
   1075c:	e3530000 	cmp	r3, #0
  k->seskeylen = seskeylen;
   10760:	e5c23018 	strb	r3, [r2, #24]
  if (k->seskeylen)
   10764:	0a00002a 	beq	10814 <parse.constprop.0+0x1454>
    for (i = 0; i < seskeylen && pktlen; i++, pktlen--)
   10768:	e59d300c 	ldr	r3, [sp, #12]
   1076c:	e3550000 	cmp	r5, #0
   10770:	13530000 	cmpne	r3, #0
   10774:	da00001e 	ble	107f4 <parse.constprop.0+0x1434>
   10778:	e58d7020 	str	r7, [sp, #32]
   1077c:	e2822018 	add	r2, r2, #24
   10780:	e58d6024 	str	r6, [sp, #36]	; 0x24
   10784:	e1a08005 	mov	r8, r5
   10788:	e1a07002 	mov	r7, r2
   1078c:	e1a06003 	mov	r6, r3
   10790:	ea00000b 	b	107c4 <parse.constprop.0+0x1404>
      k->seskey[i] = iobuf_get_noeof(inp);
   10794:	e5940008 	ldr	r0, [r4, #8]
   10798:	e584c018 	str	ip, [r4, #24]
   1079c:	e594c020 	ldr	ip, [r4, #32]
   107a0:	e2800001 	add	r0, r0, #1
   107a4:	e5840008 	str	r0, [r4, #8]
   107a8:	e7dc1001 	ldrb	r1, [ip, r1]
   107ac:	e5e71001 	strb	r1, [r7, #1]!
    for (i = 0; i < seskeylen && pktlen; i++, pktlen--)
   107b0:	e2488001 	sub	r8, r8, #1
   107b4:	e0451008 	sub	r1, r5, r8
   107b8:	e3580000 	cmp	r8, #0
   107bc:	11510006 	cmpne	r1, r6
   107c0:	aa000047 	bge	108e4 <parse.constprop.0+0x1524>
      k->seskey[i] = iobuf_get_noeof(inp);
   107c4:	e5941010 	ldr	r1, [r4, #16]
   107c8:	e1a00004 	mov	r0, r4
   107cc:	e3510000 	cmp	r1, #0
   107d0:	1a000004 	bne	107e8 <parse.constprop.0+0x1428>
   107d4:	e5941018 	ldr	r1, [r4, #24]
   107d8:	e594c01c 	ldr	ip, [r4, #28]
   107dc:	e151000c 	cmp	r1, ip
   107e0:	e281c001 	add	ip, r1, #1
   107e4:	3affffea 	bcc	10794 <parse.constprop.0+0x13d4>
   107e8:	ebffe300 	bl	93f0 <iobuf_readbyte>
   107ec:	e6ef1070 	uxtb	r1, r0
   107f0:	eaffffed 	b	107ac <parse.constprop.0+0x13ec>
    if (s2kmode != 1 && s2kmode != 3)
   107f4:	e3c73002 	bic	r3, r7, #2
   107f8:	e3530001 	cmp	r3, #1
   107fc:	0a000004 	beq	10814 <parse.constprop.0+0x1454>
   10800:	e1a08005 	mov	r8, r5
      printf(("WARNING: potentially insecure symmetrically"
   10804:	e51f0380 	ldr	r0, [pc, #-896]	; 1048c <parse.constprop.0+0x10cc>
   10808:	e1a05008 	mov	r5, r8
   1080c:	e08f0000 	add	r0, pc, r0
   10810:	eb0002fb 	bl	11404 <tfp_printf>
    printf( // listfp,
   10814:	e59d3018 	ldr	r3, [sp, #24]
   10818:	e1a0100b 	mov	r1, fp
   1081c:	e51f0394 	ldr	r0, [pc, #-916]	; 10490 <parse.constprop.0+0x10d0>
   10820:	e58d3004 	str	r3, [sp, #4]
   10824:	e1a0300a 	mov	r3, sl
   10828:	e08f0000 	add	r0, pc, r0
   1082c:	e59d2010 	ldr	r2, [sp, #16]
   10830:	e58d7000 	str	r7, [sp]
   10834:	eb0002f2 	bl	11404 <tfp_printf>
    if (seskeylen)
   10838:	e59d300c 	ldr	r3, [sp, #12]
   1083c:	e3530000 	cmp	r3, #0
   10840:	1a000036 	bne	10920 <parse.constprop.0+0x1560>
      if (s2kmode == 3)
   10844:	e59d3014 	ldr	r3, [sp, #20]
   10848:	e3530000 	cmp	r3, #0
   1084c:	0afffd05 	beq	fc68 <parse.constprop.0+0x8a8>
            S2K_DECODE_COUNT((ulong)k->s2k.count),
   10850:	e59d301c 	ldr	r3, [sp, #28]
        printf( // listfp,
   10854:	e51f03c8 	ldr	r0, [pc, #-968]	; 10494 <parse.constprop.0+0x10d4>
            S2K_DECODE_COUNT((ulong)k->s2k.count),
   10858:	e5932014 	ldr	r2, [r3, #20]
        printf( // listfp,
   1085c:	e08f0000 	add	r0, pc, r0
            S2K_DECODE_COUNT((ulong)k->s2k.count),
   10860:	e1a03222 	lsr	r3, r2, #4
   10864:	e202100f 	and	r1, r2, #15
   10868:	e2833006 	add	r3, r3, #6
   1086c:	e2811010 	add	r1, r1, #16
        printf( // listfp,
   10870:	e1a01311 	lsl	r1, r1, r3
   10874:	eb0002e2 	bl	11404 <tfp_printf>
   10878:	eafffcfa 	b	fc68 <parse.constprop.0+0x8a8>
  if (s2kmode == 3)
   1087c:	e58d3014 	str	r3, [sp, #20]
   10880:	e3570003 	cmp	r7, #3
   10884:	e1a05006 	mov	r5, r6
    for (i = 0; i < 8 && pktlen; i++, pktlen--)
   10888:	11a05001 	movne	r5, r1
  if (s2kmode == 3)
   1088c:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
   10890:	1affffaf 	bne	10754 <parse.constprop.0+0x1394>
    k->s2k.count = iobuf_get_noeof(inp);
   10894:	e5943010 	ldr	r3, [r4, #16]
   10898:	e3530000 	cmp	r3, #0
   1089c:	1a000069 	bne	10a48 <parse.constprop.0+0x1688>
   108a0:	e5943018 	ldr	r3, [r4, #24]
   108a4:	e594201c 	ldr	r2, [r4, #28]
   108a8:	e1530002 	cmp	r3, r2
   108ac:	2a000065 	bcs	10a48 <parse.constprop.0+0x1688>
   108b0:	e5942008 	ldr	r2, [r4, #8]
   108b4:	e5941020 	ldr	r1, [r4, #32]
   108b8:	e2822001 	add	r2, r2, #1
   108bc:	e5842008 	str	r2, [r4, #8]
   108c0:	e2832001 	add	r2, r3, #1
   108c4:	e5842018 	str	r2, [r4, #24]
   108c8:	e7d13003 	ldrb	r3, [r1, r3]
   108cc:	e59d201c 	ldr	r2, [sp, #28]
    pktlen--;
   108d0:	e2455002 	sub	r5, r5, #2
    k->s2k.count = iobuf_get_noeof(inp);
   108d4:	e5823014 	str	r3, [r2, #20]
  if (s2kmode == 1 || s2kmode == 3)
   108d8:	e3a03001 	mov	r3, #1
   108dc:	e58d3014 	str	r3, [sp, #20]
   108e0:	eaffff9b 	b	10754 <parse.constprop.0+0x1394>
   108e4:	e59d7020 	ldr	r7, [sp, #32]
   108e8:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
    if (s2kmode != 1 && s2kmode != 3)
   108ec:	e3c73002 	bic	r3, r7, #2
   108f0:	e3530001 	cmp	r3, #1
   108f4:	1affffc2 	bne	10804 <parse.constprop.0+0x1444>
    printf( // listfp,
   108f8:	e59d3018 	ldr	r3, [sp, #24]
   108fc:	e1a0100b 	mov	r1, fp
   10900:	e51f0470 	ldr	r0, [pc, #-1136]	; 10498 <parse.constprop.0+0x10d8>
    for (i = 0; i < seskeylen && pktlen; i++, pktlen--)
   10904:	e1a05008 	mov	r5, r8
    printf( // listfp,
   10908:	e58d3004 	str	r3, [sp, #4]
   1090c:	e1a0300a 	mov	r3, sl
   10910:	e08f0000 	add	r0, pc, r0
   10914:	e59d2010 	ldr	r2, [sp, #16]
   10918:	e58d7000 	str	r7, [sp]
   1091c:	eb0002b8 	bl	11404 <tfp_printf>
      if (aead_algo)
   10920:	e35a0000 	cmp	sl, #0
   10924:	0a000040 	beq	10a2c <parse.constprop.0+0x166c>
        printf( // listfp,
   10928:	e51f0494 	ldr	r0, [pc, #-1172]	; 1049c <parse.constprop.0+0x10dc>
   1092c:	e59d100c 	ldr	r1, [sp, #12]
   10930:	e08f0000 	add	r0, pc, r0
   10934:	eb0002b2 	bl	11404 <tfp_printf>
   10938:	eaffffc1 	b	10844 <parse.constprop.0+0x1484>
    aead_algo = iobuf_get_noeof(inp);
   1093c:	e5943010 	ldr	r3, [r4, #16]
   10940:	e3530000 	cmp	r3, #0
   10944:	1afffefc 	bne	1053c <parse.constprop.0+0x117c>
   10948:	e5940018 	ldr	r0, [r4, #24]
   1094c:	e594301c 	ldr	r3, [r4, #28]
   10950:	e1500003 	cmp	r0, r3
   10954:	2afffef8 	bcs	1053c <parse.constprop.0+0x117c>
   10958:	e5942008 	ldr	r2, [r4, #8]
  if (pktlen < 2)
   1095c:	e3550004 	cmp	r5, #4
    aead_algo = iobuf_get_noeof(inp);
   10960:	e594c020 	ldr	ip, [r4, #32]
   10964:	e2801001 	add	r1, r0, #1
   10968:	e5841018 	str	r1, [r4, #24]
   1096c:	e2822001 	add	r2, r2, #1
   10970:	e5842008 	str	r2, [r4, #8]
    pktlen--;
   10974:	e2458003 	sub	r8, r5, #3
  if (pktlen < 2)
   10978:	0afffef6 	beq	10558 <parse.constprop.0+0x1198>
    aead_algo = iobuf_get_noeof(inp);
   1097c:	e7dca000 	ldrb	sl, [ip, r0]
   10980:	eafffc9a 	b	fbf0 <parse.constprop.0+0x830>
  switch (s2kmode)
   10984:	e3a03008 	mov	r3, #8
   10988:	eaffff25 	b	10624 <parse.constprop.0+0x1264>
    printf("mdc_packet with invalid encoding\n");
   1098c:	e51f04f4 	ldr	r0, [pc, #-1268]	; 104a0 <parse.constprop.0+0x10e0>
   10990:	e08f0000 	add	r0, pc, r0
   10994:	eb00029a 	bl	11404 <tfp_printf>
  free_packet (NULL, ctx);
   10998:	e1a01006 	mov	r1, r6
   1099c:	e3a00000 	mov	r0, #0
   109a0:	ebffef0b 	bl	c5d4 <free_packet>
printf("Packet header (%d bytes):\n", hdrlen);
   109a4:	e51f0508 	ldr	r0, [pc, #-1288]	; 104a4 <parse.constprop.0+0x10e4>
   109a8:	e1a01009 	mov	r1, r9
   109ac:	e08f0000 	add	r0, pc, r0
   109b0:	eafffd7c 	b	ffa8 <parse.constprop.0+0xbe8>
    printf("packet(%d) too short (%lu)\n", pkttype, (ulong)pktlen);
   109b4:	e51f0514 	ldr	r0, [pc, #-1300]	; 104a8 <parse.constprop.0+0x10e8>
   109b8:	e1a02005 	mov	r2, r5
   109bc:	e3a0100b 	mov	r1, #11
   109c0:	e08f0000 	add	r0, pc, r0
   109c4:	eb00028e 	bl	11404 <tfp_printf>
  free_packet (NULL, ctx);
   109c8:	e1a01006 	mov	r1, r6
   109cc:	e3a00000 	mov	r0, #0
   109d0:	ebffeeff 	bl	c5d4 <free_packet>
printf("Packet header (%d bytes):\n", hdrlen);
   109d4:	e51f0530 	ldr	r0, [pc, #-1328]	; 104ac <parse.constprop.0+0x10ec>
   109d8:	e1a01009 	mov	r1, r9
   109dc:	e08f0000 	add	r0, pc, r0
   109e0:	eafffd70 	b	ffa8 <parse.constprop.0+0xbe8>
    printf("packet(%d) with unknown version %d\n", pkttype, version);
   109e4:	e51f053c 	ldr	r0, [pc, #-1340]	; 104b0 <parse.constprop.0+0x10f0>
   109e8:	e1a0200b 	mov	r2, fp
   109ec:	e3a01003 	mov	r1, #3
  pktlen--;
   109f0:	e1a05007 	mov	r5, r7
    printf("packet(%d) with unknown version %d\n", pkttype, version);
   109f4:	e08f0000 	add	r0, pc, r0
   109f8:	eb000281 	bl	11404 <tfp_printf>
    goto leave;
   109fc:	eafffeda 	b	1056c <parse.constprop.0+0x11ac>
    printf("packet with S2K %d too short\n", s2kmode);
   10a00:	e51f0554 	ldr	r0, [pc, #-1364]	; 104b4 <parse.constprop.0+0x10f4>
   10a04:	e1a01007 	mov	r1, r7
   10a08:	e08f0000 	add	r0, pc, r0
   10a0c:	eb00027c 	bl	11404 <tfp_printf>
    goto leave;
   10a10:	eafffed5 	b	1056c <parse.constprop.0+0x11ac>
    printf("packet(%d) too large\n", pkttype);
   10a14:	e51f0564 	ldr	r0, [pc, #-1380]	; 104b8 <parse.constprop.0+0x10f8>
   10a18:	e3a01003 	mov	r1, #3
    goto leave;
   10a1c:	e1a05007 	mov	r5, r7
    printf("packet(%d) too large\n", pkttype);
   10a20:	e08f0000 	add	r0, pc, r0
   10a24:	eb000276 	bl	11404 <tfp_printf>
    goto leave;
   10a28:	eafffecf 	b	1056c <parse.constprop.0+0x11ac>
            ", seskey %d bits\n", (seskeylen - 1) * 8);
   10a2c:	e59d300c 	ldr	r3, [sp, #12]
        printf( // listfp,
   10a30:	e51f057c 	ldr	r0, [pc, #-1404]	; 104bc <parse.constprop.0+0x10fc>
            ", seskey %d bits\n", (seskeylen - 1) * 8);
   10a34:	e2431001 	sub	r1, r3, #1
        printf( // listfp,
   10a38:	e08f0000 	add	r0, pc, r0
   10a3c:	e1a01181 	lsl	r1, r1, #3
   10a40:	eb00026f 	bl	11404 <tfp_printf>
   10a44:	eaffff7e 	b	10844 <parse.constprop.0+0x1484>
    k->s2k.count = iobuf_get_noeof(inp);
   10a48:	e1a00004 	mov	r0, r4
   10a4c:	ebffe267 	bl	93f0 <iobuf_readbyte>
   10a50:	e6ef3070 	uxtb	r3, r0
   10a54:	eaffff9c 	b	108cc <parse.constprop.0+0x150c>
    for (i = 0; pktlen > 4 && i < namelen; pktlen--, i++)
   10a58:	e1a0a003 	mov	sl, r3
   10a5c:	eafffd80 	b	10064 <parse.constprop.0+0xca4>

00010a60 <dbg_parse_packet>:
{
   10a60:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   10a64:	e1a06000 	mov	r6, r0
  printf("dbg_parse_packet\n");
   10a68:	e59f0058 	ldr	r0, [pc, #88]	; 10ac8 <dbg_parse_packet+0x68>
{
   10a6c:	e24dd01c 	sub	sp, sp, #28
   10a70:	e28d7014 	add	r7, sp, #20
    rc = parse(ctx, pkt, 0, NULL, &skip, NULL, 0, "parse", dbg_f, dbg_l);
   10a74:	e3a04000 	mov	r4, #0
  printf("dbg_parse_packet\n");
   10a78:	e08f0000 	add	r0, pc, r0
{
   10a7c:	e1a05001 	mov	r5, r1
  printf("dbg_parse_packet\n");
   10a80:	eb00025f 	bl	11404 <tfp_printf>
    rc = parse(ctx, pkt, 0, NULL, &skip, NULL, 0, "parse", dbg_f, dbg_l);
   10a84:	e58d4008 	str	r4, [sp, #8]
   10a88:	e3a03000 	mov	r3, #0
   10a8c:	e58d4004 	str	r4, [sp, #4]
   10a90:	e1a02003 	mov	r2, r3
   10a94:	e58d7000 	str	r7, [sp]
   10a98:	e1a01005 	mov	r1, r5
   10a9c:	e1a00006 	mov	r0, r6
   10aa0:	ebfffa46 	bl	f3c0 <parse.constprop.0>
  } while (skip && !rc);
   10aa4:	e59d3014 	ldr	r3, [sp, #20]
   10aa8:	e2533000 	subs	r3, r3, #0
   10aac:	13a03001 	movne	r3, #1
   10ab0:	e3500000 	cmp	r0, #0
   10ab4:	13a03000 	movne	r3, #0
   10ab8:	e3530000 	cmp	r3, #0
   10abc:	1afffff0 	bne	10a84 <dbg_parse_packet+0x24>
}
   10ac0:	e28dd01c 	add	sp, sp, #28
   10ac4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   10ac8:	00007320 	.word	0x00007320

00010acc <dbg_search_packet>:
{
   10acc:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   10ad0:	e3530000 	cmp	r3, #0
   10ad4:	e24dd01c 	sub	sp, sp, #28
   10ad8:	e1a07000 	mov	r7, r0
   10adc:	e1a06001 	mov	r6, r1
   10ae0:	e1a05002 	mov	r5, r2
   10ae4:	13a09002 	movne	r9, #2
   10ae8:	03a09001 	moveq	r9, #1
   10aec:	e28d8014 	add	r8, sp, #20
    rc = parse(ctx, pkt, with_uid ? 2 : 1, retpos, &skip, NULL, 0, "search",
   10af0:	e3a04000 	mov	r4, #0
   10af4:	e58d4008 	str	r4, [sp, #8]
   10af8:	e1a03005 	mov	r3, r5
   10afc:	e58d4004 	str	r4, [sp, #4]
   10b00:	e1a02009 	mov	r2, r9
   10b04:	e58d8000 	str	r8, [sp]
   10b08:	e1a01006 	mov	r1, r6
   10b0c:	e1a00007 	mov	r0, r7
   10b10:	ebfffa2a 	bl	f3c0 <parse.constprop.0>
  } while (skip && !rc);
   10b14:	e59dc014 	ldr	ip, [sp, #20]
    rc = parse(ctx, pkt, with_uid ? 2 : 1, retpos, &skip, NULL, 0, "search",
   10b18:	e1a0e000 	mov	lr, r0
  } while (skip && !rc);
   10b1c:	e25cc000 	subs	ip, ip, #0
   10b20:	13a0c001 	movne	ip, #1
   10b24:	e3500000 	cmp	r0, #0
   10b28:	13a0c000 	movne	ip, #0
   10b2c:	e35c0000 	cmp	ip, #0
   10b30:	1affffef 	bne	10af4 <dbg_search_packet+0x28>
}
   10b34:	e28dd01c 	add	sp, sp, #28
   10b38:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

00010b3c <dbg_copy_all_packets>:
{
   10b3c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  if (!out)
   10b40:	e2516000 	subs	r6, r1, #0
{
   10b44:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   10b48:	e1a04000 	mov	r4, r0
  if (!out)
   10b4c:	0a000021 	beq	10bd8 <dbg_copy_all_packets+0x9c>
  init_parse_packet(&parsectx, inp);
   10b50:	e58d4020 	str	r4, [sp, #32]
   10b54:	e28d9018 	add	r9, sp, #24
   10b58:	e28d7020 	add	r7, sp, #32
   10b5c:	e28d8014 	add	r8, sp, #20
   10b60:	e3a05000 	mov	r5, #0
   10b64:	e5cd5024 	strb	r5, [sp, #36]	; 0x24
   10b68:	e58d5028 	str	r5, [sp, #40]	; 0x28
   10b6c:	e58d502c 	str	r5, [sp, #44]	; 0x2c
   10b70:	e58d5030 	str	r5, [sp, #48]	; 0x30
   10b74:	e58d5034 	str	r5, [sp, #52]	; 0x34
                 parse(&parsectx, &pkt, 0, NULL, &skip, out, 0, "copy",
   10b78:	e58d5008 	str	r5, [sp, #8]
   10b7c:	e3a03000 	mov	r3, #0
   10b80:	e58d6004 	str	r6, [sp, #4]
   10b84:	e1a02003 	mov	r2, r3
   10b88:	e58d8000 	str	r8, [sp]
   10b8c:	e1a01009 	mov	r1, r9
    init_packet(&pkt);
   10b90:	e5cd5018 	strb	r5, [sp, #24]
                 parse(&parsectx, &pkt, 0, NULL, &skip, out, 0, "copy",
   10b94:	e1a00007 	mov	r0, r7
    init_packet(&pkt);
   10b98:	e58d501c 	str	r5, [sp, #28]
                 parse(&parsectx, &pkt, 0, NULL, &skip, out, 0, "copy",
   10b9c:	ebfffa07 	bl	f3c0 <parse.constprop.0>
                       dbg_f, dbg_l)));
   10ba0:	e2504000 	subs	r4, r0, #0
   10ba4:	0afffff3 	beq	10b78 <dbg_copy_all_packets+0x3c>
  deinit_parse_packet(&parsectx);
   10ba8:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
   10bac:	e3530000 	cmp	r3, #0
   10bb0:	1a000002 	bne	10bc0 <dbg_copy_all_packets+0x84>
}
   10bb4:	e1a00004 	mov	r0, r4
   10bb8:	e28dd03c 	add	sp, sp, #60	; 0x3c
   10bbc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  deinit_parse_packet(&parsectx);
   10bc0:	e1a01007 	mov	r1, r7
   10bc4:	e3a00000 	mov	r0, #0
   10bc8:	ebffee81 	bl	c5d4 <free_packet>
}
   10bcc:	e1a00004 	mov	r0, r4
   10bd0:	e28dd03c 	add	sp, sp, #60	; 0x3c
   10bd4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    printf("copy_all_packets: OUT may not be NULL.\n");
   10bd8:	e59f0008 	ldr	r0, [pc, #8]	; 10be8 <dbg_copy_all_packets+0xac>
   10bdc:	e08f0000 	add	r0, pc, r0
   10be0:	eb000207 	bl	11404 <tfp_printf>
   10be4:	eaffffd9 	b	10b50 <dbg_copy_all_packets+0x14>
   10be8:	000071d0 	.word	0x000071d0

00010bec <dbg_copy_some_packets>:
{
   10bec:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10bf0:	e24dd038 	sub	sp, sp, #56	; 0x38
  init_parse_packet(&parsectx, inp);
   10bf4:	e3a05000 	mov	r5, #0
{
   10bf8:	e1a08001 	mov	r8, r1
  init_parse_packet(&parsectx, inp);
   10bfc:	e5cd5024 	strb	r5, [sp, #36]	; 0x24
{
   10c00:	e1a07002 	mov	r7, r2
  init_parse_packet(&parsectx, inp);
   10c04:	e58d0020 	str	r0, [sp, #32]
  } while (!(rc = parse(&parsectx, &pkt, 0, NULL, &skip, out, 0,
   10c08:	e28da018 	add	sl, sp, #24
  init_parse_packet(&parsectx, inp);
   10c0c:	e58d5028 	str	r5, [sp, #40]	; 0x28
  } while (!(rc = parse(&parsectx, &pkt, 0, NULL, &skip, out, 0,
   10c10:	e28d9020 	add	r9, sp, #32
  init_parse_packet(&parsectx, inp);
   10c14:	e58d502c 	str	r5, [sp, #44]	; 0x2c
{
   10c18:	e1a06000 	mov	r6, r0
  init_parse_packet(&parsectx, inp);
   10c1c:	e58d5030 	str	r5, [sp, #48]	; 0x30
   10c20:	e58d5034 	str	r5, [sp, #52]	; 0x34
   10c24:	ea000007 	b	10c48 <dbg_copy_some_packets+0x5c>
  } while (!(rc = parse(&parsectx, &pkt, 0, NULL, &skip, out, 0,
   10c28:	e58d5008 	str	r5, [sp, #8]
   10c2c:	e58d8004 	str	r8, [sp, #4]
   10c30:	e58dc000 	str	ip, [sp]
    init_packet(&pkt);
   10c34:	e5cd5018 	strb	r5, [sp, #24]
   10c38:	e58d501c 	str	r5, [sp, #28]
  } while (!(rc = parse(&parsectx, &pkt, 0, NULL, &skip, out, 0,
   10c3c:	ebfff9df 	bl	f3c0 <parse.constprop.0>
                        "some", dbg_f, dbg_l)));
   10c40:	e2504000 	subs	r4, r0, #0
   10c44:	1a00000e 	bne	10c84 <dbg_copy_some_packets+0x98>
    if (iobuf_tell(inp) >= stopoff)
   10c48:	e1a00006 	mov	r0, r6
   10c4c:	ebffe653 	bl	a5a0 <iobuf_tell>
   10c50:	e1500007 	cmp	r0, r7
  } while (!(rc = parse(&parsectx, &pkt, 0, NULL, &skip, out, 0,
   10c54:	e3a03000 	mov	r3, #0
   10c58:	e28dc014 	add	ip, sp, #20
   10c5c:	e1a02003 	mov	r2, r3
   10c60:	e1a0100a 	mov	r1, sl
   10c64:	e1a00009 	mov	r0, r9
    if (iobuf_tell(inp) >= stopoff)
   10c68:	baffffee 	blt	10c28 <dbg_copy_some_packets+0x3c>
      deinit_parse_packet(&parsectx);
   10c6c:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   10c70:	e1540003 	cmp	r4, r3
   10c74:	1a00000b 	bne	10ca8 <dbg_copy_some_packets+0xbc>
}
   10c78:	e1a00004 	mov	r0, r4
   10c7c:	e28dd038 	add	sp, sp, #56	; 0x38
   10c80:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  deinit_parse_packet(&parsectx);
   10c84:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
   10c88:	e3530000 	cmp	r3, #0
   10c8c:	0afffff9 	beq	10c78 <dbg_copy_some_packets+0x8c>
   10c90:	e1a01009 	mov	r1, r9
   10c94:	e3a00000 	mov	r0, #0
   10c98:	ebffee4d 	bl	c5d4 <free_packet>
}
   10c9c:	e1a00004 	mov	r0, r4
   10ca0:	e28dd038 	add	sp, sp, #56	; 0x38
   10ca4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
      deinit_parse_packet(&parsectx);
   10ca8:	e1a00003 	mov	r0, r3
   10cac:	e28d1020 	add	r1, sp, #32
      return 0;
   10cb0:	e1a04003 	mov	r4, r3
      deinit_parse_packet(&parsectx);
   10cb4:	ebffee46 	bl	c5d4 <free_packet>
}
   10cb8:	e1a00004 	mov	r0, r4
   10cbc:	e28dd038 	add	sp, sp, #56	; 0x38
   10cc0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00010cc4 <dbg_skip_some_packets>:
{
   10cc4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  for (; n && !rc; n--)
   10cc8:	e2516000 	subs	r6, r1, #0
{
   10ccc:	e24dd038 	sub	sp, sp, #56	; 0x38
  init_parse_packet(&parsectx, inp);
   10cd0:	e3a05000 	mov	r5, #0
   10cd4:	e5cd5024 	strb	r5, [sp, #36]	; 0x24
   10cd8:	e58d5028 	str	r5, [sp, #40]	; 0x28
   10cdc:	e58d0020 	str	r0, [sp, #32]
   10ce0:	e58d502c 	str	r5, [sp, #44]	; 0x2c
   10ce4:	e58d5030 	str	r5, [sp, #48]	; 0x30
   10ce8:	e58d5034 	str	r5, [sp, #52]	; 0x34
  for (; n && !rc; n--)
   10cec:	0a00001e 	beq	10d6c <dbg_skip_some_packets+0xa8>
   10cf0:	e28da018 	add	sl, sp, #24
   10cf4:	e28d7020 	add	r7, sp, #32
   10cf8:	e28d9014 	add	r9, sp, #20
    rc = parse(&parsectx, &pkt, 0, NULL, &skip, NULL, 1, "skip",
   10cfc:	e3a08001 	mov	r8, #1
   10d00:	e58d8008 	str	r8, [sp, #8]
   10d04:	e3a03000 	mov	r3, #0
   10d08:	e58d5004 	str	r5, [sp, #4]
   10d0c:	e1a02003 	mov	r2, r3
   10d10:	e58d9000 	str	r9, [sp]
   10d14:	e1a0100a 	mov	r1, sl
    init_packet(&pkt);
   10d18:	e5cd5018 	strb	r5, [sp, #24]
    rc = parse(&parsectx, &pkt, 0, NULL, &skip, NULL, 1, "skip",
   10d1c:	e1a00007 	mov	r0, r7
    init_packet(&pkt);
   10d20:	e58d501c 	str	r5, [sp, #28]
    rc = parse(&parsectx, &pkt, 0, NULL, &skip, NULL, 1, "skip",
   10d24:	ebfff9a5 	bl	f3c0 <parse.constprop.0>
  for (; n && !rc; n--)
   10d28:	e2566001 	subs	r6, r6, #1
   10d2c:	e1a04000 	mov	r4, r0
   10d30:	13a00001 	movne	r0, #1
   10d34:	03a00000 	moveq	r0, #0
   10d38:	e3540000 	cmp	r4, #0
   10d3c:	13a00000 	movne	r0, #0
   10d40:	02000001 	andeq	r0, r0, #1
   10d44:	e3500000 	cmp	r0, #0
   10d48:	1affffec 	bne	10d00 <dbg_skip_some_packets+0x3c>
  deinit_parse_packet(&parsectx);
   10d4c:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
   10d50:	e3530000 	cmp	r3, #0
   10d54:	0a000001 	beq	10d60 <dbg_skip_some_packets+0x9c>
   10d58:	e1a01007 	mov	r1, r7
   10d5c:	ebffee1c 	bl	c5d4 <free_packet>
}
   10d60:	e1a00004 	mov	r0, r4
   10d64:	e28dd038 	add	sp, sp, #56	; 0x38
   10d68:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  int rc = 0;
   10d6c:	e1a04006 	mov	r4, r6
}
   10d70:	e1a00004 	mov	r0, r4
   10d74:	e28dd038 	add	sp, sp, #56	; 0x38
   10d78:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00010d7c <create_gpg_control>:
}

/* Create a GPG control packet to be used internally as a placeholder.  */
PACKET *
create_gpg_control(ctrlpkttype_t type, const byte *data, size_t datalen)
{
   10d7c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10d80:	e1a07000 	mov	r7, r0
  PACKET *packet;
  byte *p;

  packet = xmalloc(sizeof *packet);
   10d84:	e3a00008 	mov	r0, #8
{
   10d88:	e1a05002 	mov	r5, r2
   10d8c:	e1a04001 	mov	r4, r1
  packet = xmalloc(sizeof *packet);
   10d90:	ebfff8a1 	bl	f01c <xmalloc>
  init_packet(packet);
   10d94:	e3a03000 	mov	r3, #0
  packet = xmalloc(sizeof *packet);
   10d98:	e1a06000 	mov	r6, r0
  init_packet(packet);
   10d9c:	e5803004 	str	r3, [r0, #4]
  packet->pkttype = PKT_GPG_CONTROL;
   10da0:	e3a0303f 	mov	r3, #63	; 0x3f
   10da4:	e5c03000 	strb	r3, [r0]
  packet->pkt.gpg_control = xmalloc(sizeof *packet->pkt.gpg_control + datalen - 1);
   10da8:	e285000b 	add	r0, r5, #11
   10dac:	ebfff89a 	bl	f01c <xmalloc>
   10db0:	e5860004 	str	r0, [r6, #4]
  packet->pkt.gpg_control->control = type;
  packet->pkt.gpg_control->datalen = datalen;
  p = packet->pkt.gpg_control->data;
  for (; datalen; datalen--, p++)
   10db4:	e3550000 	cmp	r5, #0
  packet->pkt.gpg_control->control = type;
   10db8:	e5807000 	str	r7, [r0]
  packet->pkt.gpg_control->datalen = datalen;
   10dbc:	e5805004 	str	r5, [r0, #4]
  for (; datalen; datalen--, p++)
   10dc0:	0a000005 	beq	10ddc <create_gpg_control+0x60>
   10dc4:	e0841005 	add	r1, r4, r5
   10dc8:	e2803008 	add	r3, r0, #8
    *p = *data++;
   10dcc:	e4d42001 	ldrb	r2, [r4], #1
  for (; datalen; datalen--, p++)
   10dd0:	e1540001 	cmp	r4, r1
    *p = *data++;
   10dd4:	e4c32001 	strb	r2, [r3], #1
  for (; datalen; datalen--, p++)
   10dd8:	1afffffb 	bne	10dcc <create_gpg_control+0x50>

  return packet;
}
   10ddc:	e1a00006 	mov	r0, r6
   10de0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00010de4 <ui2a>:

static void uli2a(unsigned long int num, unsigned int base, int uc, char *bf)
{
    int n = 0;
    unsigned int d = 1;
    while (num / d >= base)
   10de4:	e1500001 	cmp	r0, r1
    unsigned int d = 1;
   10de8:	e3a0c001 	mov	ip, #1
{
   10dec:	e92d4070 	push	{r4, r5, r6, lr}
    while (num / d >= base)
   10df0:	3a000028 	bcc	10e98 <ui2a+0xb4>
        d *= base;
   10df4:	e00c0c91 	mul	ip, r1, ip
    while (num / d >= base)
   10df8:	e73efc10 	udiv	lr, r0, ip
   10dfc:	e15e0001 	cmp	lr, r1
   10e00:	2afffffb 	bcs	10df4 <ui2a+0x10>
    while (d != 0)
   10e04:	e35c0000 	cmp	ip, #0
   10e08:	0a000020 	beq	10e90 <ui2a+0xac>
    int n = 0;
   10e0c:	e3a04000 	mov	r4, #0
    {
        int dgt = num / d;
        num %= d;
        d /= base;
        if (n || dgt > 0 || d == 0)
   10e10:	e35e0000 	cmp	lr, #0
   10e14:	d3540000 	cmple	r4, #0
        d /= base;
   10e18:	e736f11c 	udiv	r6, ip, r1
        if (n || dgt > 0 || d == 0)
   10e1c:	13a05001 	movne	r5, #1
   10e20:	03a05000 	moveq	r5, #0
        num %= d;
   10e24:	e0600e9c 	mls	r0, ip, lr, r0
        if (n || dgt > 0 || d == 0)
   10e28:	1a000008 	bne	10e50 <ui2a+0x6c>
   10e2c:	e151000c 	cmp	r1, ip
   10e30:	e1a04005 	mov	r4, r5
   10e34:	9a000012 	bls	10e84 <ui2a+0xa0>
        {
            *bf++ = dgt + (dgt < 10 ? '0' : (uc ? 'A' : 'a') - 10);
   10e38:	e1a0c003 	mov	ip, r3
   10e3c:	e28ee030 	add	lr, lr, #48	; 0x30
   10e40:	e4cce001 	strb	lr, [ip], #1
            ++n;
        }
    }
    *bf = 0;
   10e44:	e3a03000 	mov	r3, #0
   10e48:	e5cc3000 	strb	r3, [ip]
}
   10e4c:	e8bd8070 	pop	{r4, r5, r6, pc}
            *bf++ = dgt + (dgt < 10 ? '0' : (uc ? 'A' : 'a') - 10);
   10e50:	e35e0009 	cmp	lr, #9
   10e54:	d3a05030 	movle	r5, #48	; 0x30
   10e58:	da000002 	ble	10e68 <ui2a+0x84>
   10e5c:	e3520000 	cmp	r2, #0
   10e60:	13a05037 	movne	r5, #55	; 0x37
   10e64:	03a05057 	moveq	r5, #87	; 0x57
    while (d != 0)
   10e68:	e151000c 	cmp	r1, ip
            *bf++ = dgt + (dgt < 10 ? '0' : (uc ? 'A' : 'a') - 10);
   10e6c:	e1a0c003 	mov	ip, r3
   10e70:	e085e00e 	add	lr, r5, lr
            ++n;
   10e74:	e2844001 	add	r4, r4, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (uc ? 'A' : 'a') - 10);
   10e78:	e4cce001 	strb	lr, [ip], #1
   10e7c:	e1a0300c 	mov	r3, ip
    while (d != 0)
   10e80:	8affffef 	bhi	10e44 <ui2a+0x60>
   10e84:	e73ef610 	udiv	lr, r0, r6
    int n = 0;
   10e88:	e1a0c006 	mov	ip, r6
   10e8c:	eaffffdf 	b	10e10 <ui2a+0x2c>
    while (d != 0)
   10e90:	e1a0c003 	mov	ip, r3
   10e94:	eaffffea 	b	10e44 <ui2a+0x60>
   10e98:	e1a0e000 	mov	lr, r0
   10e9c:	eaffffda 	b	10e0c <ui2a+0x28>

00010ea0 <putchw>:
    unsigned int num = (unsigned int)ptr;
    ui2a(num, 16, 1, bf); // Convert to hex with uppercase
}

static void putchw(void *putp, putcf putf, int n, char z, char *bf)
{
   10ea0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10ea4:	e1a07001 	mov	r7, r1
    char fc = z ? '0' : ' ';
    char ch;
    char *p = bf;
    while (*p++ && n > 0)
   10ea8:	e59d5018 	ldr	r5, [sp, #24]
    char fc = z ? '0' : ' ';
   10eac:	e3530000 	cmp	r3, #0
   10eb0:	13a08030 	movne	r8, #48	; 0x30
   10eb4:	03a08020 	moveq	r8, #32
    while (*p++ && n > 0)
   10eb8:	e4d51001 	ldrb	r1, [r5], #1
{
   10ebc:	e1a06000 	mov	r6, r0
    while (*p++ && n > 0)
   10ec0:	e3510000 	cmp	r1, #0
   10ec4:	0a00001d 	beq	10f40 <putchw+0xa0>
   10ec8:	e3520000 	cmp	r2, #0
   10ecc:	da000015 	ble	10f28 <putchw+0x88>
   10ed0:	e1a03005 	mov	r3, r5
   10ed4:	ea000001 	b	10ee0 <putchw+0x40>
   10ed8:	e3520000 	cmp	r2, #0
   10edc:	0a000011 	beq	10f28 <putchw+0x88>
   10ee0:	e4d30001 	ldrb	r0, [r3], #1
   10ee4:	e1a04002 	mov	r4, r2
        n--;
   10ee8:	e2422001 	sub	r2, r2, #1
    while (*p++ && n > 0)
   10eec:	e3500000 	cmp	r0, #0
   10ef0:	1afffff8 	bne	10ed8 <putchw+0x38>
    while (n-- > 0)
   10ef4:	e3520000 	cmp	r2, #0
   10ef8:	e2444002 	sub	r4, r4, #2
   10efc:	0a000009 	beq	10f28 <putchw+0x88>
        putf(putp, fc);
   10f00:	e1a01008 	mov	r1, r8
   10f04:	e1a00006 	mov	r0, r6
   10f08:	e12fff37 	blx	r7
    while (n-- > 0)
   10f0c:	e3540000 	cmp	r4, #0
   10f10:	e2444001 	sub	r4, r4, #1
   10f14:	cafffff9 	bgt	10f00 <putchw+0x60>
    while ((ch = *bf++))
   10f18:	e59d3018 	ldr	r3, [sp, #24]
   10f1c:	e5d31000 	ldrb	r1, [r3]
   10f20:	e3510000 	cmp	r1, #0
   10f24:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
        putf(putp, ch);
   10f28:	e1a00006 	mov	r0, r6
   10f2c:	e12fff37 	blx	r7
    while ((ch = *bf++))
   10f30:	e4d51001 	ldrb	r1, [r5], #1
   10f34:	e3510000 	cmp	r1, #0
   10f38:	1afffffa 	bne	10f28 <putchw+0x88>
   10f3c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    while (n-- > 0)
   10f40:	e3520000 	cmp	r2, #0
   10f44:	e2424001 	sub	r4, r2, #1
   10f48:	caffffec 	bgt	10f00 <putchw+0x60>
   10f4c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00010f50 <putcp>:
    va_end(va);
}

static void putcp(void *p, char c)
{
    *(*((char **)p))++ = c;
   10f50:	e5903000 	ldr	r3, [r0]
   10f54:	e2832001 	add	r2, r3, #1
   10f58:	e5802000 	str	r2, [r0]
   10f5c:	e5c31000 	strb	r1, [r3]
}
   10f60:	e12fff1e 	bx	lr

00010f64 <tfp_format>:
{
   10f64:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f68:	e1a04002 	mov	r4, r2
   10f6c:	e1a07001 	mov	r7, r1
   10f70:	e24dd024 	sub	sp, sp, #36	; 0x24
    while ((ch = *(fmt++)))
   10f74:	e4d21001 	ldrb	r1, [r2], #1
   10f78:	e3510000 	cmp	r1, #0
   10f7c:	0a000052 	beq	110cc <tfp_format+0x168>
        d /= 10;
   10f80:	e30c9ccd 	movw	r9, #52429	; 0xcccd
   10f84:	e1a06000 	mov	r6, r0
   10f88:	e34c9ccc 	movt	r9, #52428	; 0xcccc
   10f8c:	e1a0a003 	mov	sl, r3
   10f90:	e28db014 	add	fp, sp, #20
   10f94:	ea000006 	b	10fb4 <tfp_format+0x50>
            putf(putp, ch);
   10f98:	e1a00006 	mov	r0, r6
   10f9c:	e1a04002 	mov	r4, r2
   10fa0:	e12fff37 	blx	r7
    while ((ch = *(fmt++)))
   10fa4:	e1a02004 	mov	r2, r4
   10fa8:	e4d21001 	ldrb	r1, [r2], #1
   10fac:	e3510000 	cmp	r1, #0
   10fb0:	0a000045 	beq	110cc <tfp_format+0x168>
        if (ch != '%')
   10fb4:	e3510025 	cmp	r1, #37	; 0x25
   10fb8:	1afffff6 	bne	10f98 <tfp_format+0x34>
            ch = *(fmt++);
   10fbc:	e5d42001 	ldrb	r2, [r4, #1]
    int num = 0;
   10fc0:	e3a05000 	mov	r5, #0
            if (ch == '0')
   10fc4:	e3520030 	cmp	r2, #48	; 0x30
            ch = *(fmt++);
   10fc8:	12844002 	addne	r4, r4, #2
            char lz = 0;
   10fcc:	13a08000 	movne	r8, #0
                ch = *(fmt++);
   10fd0:	05d42002 	ldrbeq	r2, [r4, #2]
                lz = 1;
   10fd4:	03a08001 	moveq	r8, #1
                ch = *(fmt++);
   10fd8:	02844003 	addeq	r4, r4, #3
            if (ch >= '0' && ch <= '9')
   10fdc:	e2421030 	sub	r1, r2, #48	; 0x30
   10fe0:	e6ef3071 	uxtb	r3, r1
   10fe4:	e3530009 	cmp	r3, #9
   10fe8:	9a000065 	bls	11184 <tfp_format+0x220>
            if (ch == 'l')
   10fec:	e352006c 	cmp	r2, #108	; 0x6c
   10ff0:	0a000037 	beq	110d4 <tfp_format+0x170>
            switch (ch)
   10ff4:	e352007a 	cmp	r2, #122	; 0x7a
   10ff8:	8affffe9 	bhi	10fa4 <tfp_format+0x40>
   10ffc:	e3520057 	cmp	r2, #87	; 0x57
   11000:	9a000026 	bls	110a0 <tfp_format+0x13c>
   11004:	e2423058 	sub	r3, r2, #88	; 0x58
   11008:	e3530022 	cmp	r3, #34	; 0x22
   1100c:	908ff103 	addls	pc, pc, r3, lsl #2
   11010:	eaffffe3 	b	10fa4 <tfp_format+0x40>
   11014:	ea0000cf 	b	11358 <tfp_format+0x3f4>
   11018:	eaffffe1 	b	10fa4 <tfp_format+0x40>
   1101c:	eaffffe0 	b	10fa4 <tfp_format+0x40>
   11020:	eaffffdf 	b	10fa4 <tfp_format+0x40>
   11024:	eaffffde 	b	10fa4 <tfp_format+0x40>
   11028:	eaffffdd 	b	10fa4 <tfp_format+0x40>
   1102c:	eaffffdc 	b	10fa4 <tfp_format+0x40>
   11030:	eaffffdb 	b	10fa4 <tfp_format+0x40>
   11034:	eaffffda 	b	10fa4 <tfp_format+0x40>
   11038:	eaffffd9 	b	10fa4 <tfp_format+0x40>
   1103c:	eaffffd8 	b	10fa4 <tfp_format+0x40>
   11040:	ea000074 	b	11218 <tfp_format+0x2b4>
   11044:	ea000062 	b	111d4 <tfp_format+0x270>
   11048:	eaffffd5 	b	10fa4 <tfp_format+0x40>
   1104c:	eaffffd4 	b	10fa4 <tfp_format+0x40>
   11050:	eaffffd3 	b	10fa4 <tfp_format+0x40>
   11054:	eaffffd2 	b	10fa4 <tfp_format+0x40>
   11058:	ea00005d 	b	111d4 <tfp_format+0x270>
   1105c:	eaffffd0 	b	10fa4 <tfp_format+0x40>
   11060:	eaffffcf 	b	10fa4 <tfp_format+0x40>
   11064:	eaffffce 	b	10fa4 <tfp_format+0x40>
   11068:	eaffffcd 	b	10fa4 <tfp_format+0x40>
   1106c:	eaffffcc 	b	10fa4 <tfp_format+0x40>
   11070:	eaffffcb 	b	10fa4 <tfp_format+0x40>
   11074:	ea00009f 	b	112f8 <tfp_format+0x394>
   11078:	eaffffc9 	b	10fa4 <tfp_format+0x40>
   1107c:	eaffffc8 	b	10fa4 <tfp_format+0x40>
   11080:	ea000094 	b	112d8 <tfp_format+0x374>
   11084:	eaffffc6 	b	10fa4 <tfp_format+0x40>
   11088:	ea0000ac 	b	11340 <tfp_format+0x3dc>
   1108c:	eaffffc4 	b	10fa4 <tfp_format+0x40>
   11090:	eaffffc3 	b	10fa4 <tfp_format+0x40>
   11094:	ea0000af 	b	11358 <tfp_format+0x3f4>
   11098:	eaffffc1 	b	10fa4 <tfp_format+0x40>
   1109c:	ea000062 	b	1122c <tfp_format+0x2c8>
   110a0:	e3520000 	cmp	r2, #0
   110a4:	0a000008 	beq	110cc <tfp_format+0x168>
   110a8:	e3520025 	cmp	r2, #37	; 0x25
   110ac:	1affffbc 	bne	10fa4 <tfp_format+0x40>
                putf(putp, ch);
   110b0:	e3a01025 	mov	r1, #37	; 0x25
   110b4:	e1a00006 	mov	r0, r6
   110b8:	e12fff37 	blx	r7
    while ((ch = *(fmt++)))
   110bc:	e1a02004 	mov	r2, r4
   110c0:	e4d21001 	ldrb	r1, [r2], #1
   110c4:	e3510000 	cmp	r1, #0
   110c8:	1affffb9 	bne	10fb4 <tfp_format+0x50>
}
   110cc:	e28dd024 	add	sp, sp, #36	; 0x24
   110d0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
                ch = *(fmt++);
   110d4:	e4d42001 	ldrb	r2, [r4], #1
            switch (ch)
   110d8:	e352007a 	cmp	r2, #122	; 0x7a
   110dc:	8affffb0 	bhi	10fa4 <tfp_format+0x40>
   110e0:	e3520057 	cmp	r2, #87	; 0x57
   110e4:	9affffed 	bls	110a0 <tfp_format+0x13c>
   110e8:	e2423058 	sub	r3, r2, #88	; 0x58
   110ec:	e3530022 	cmp	r3, #34	; 0x22
   110f0:	908ff103 	addls	pc, pc, r3, lsl #2
   110f4:	eaffffaa 	b	10fa4 <tfp_format+0x40>
   110f8:	ea00009e 	b	11378 <tfp_format+0x414>
   110fc:	eaffffa8 	b	10fa4 <tfp_format+0x40>
   11100:	eaffffa7 	b	10fa4 <tfp_format+0x40>
   11104:	eaffffa6 	b	10fa4 <tfp_format+0x40>
   11108:	eaffffa5 	b	10fa4 <tfp_format+0x40>
   1110c:	eaffffa4 	b	10fa4 <tfp_format+0x40>
   11110:	eaffffa3 	b	10fa4 <tfp_format+0x40>
   11114:	eaffffa2 	b	10fa4 <tfp_format+0x40>
   11118:	eaffffa1 	b	10fa4 <tfp_format+0x40>
   1111c:	eaffffa0 	b	10fa4 <tfp_format+0x40>
   11120:	eaffff9f 	b	10fa4 <tfp_format+0x40>
   11124:	ea00003b 	b	11218 <tfp_format+0x2b4>
   11128:	ea000029 	b	111d4 <tfp_format+0x270>
   1112c:	eaffff9c 	b	10fa4 <tfp_format+0x40>
   11130:	eaffff9b 	b	10fa4 <tfp_format+0x40>
   11134:	eaffff9a 	b	10fa4 <tfp_format+0x40>
   11138:	eaffff99 	b	10fa4 <tfp_format+0x40>
   1113c:	ea000024 	b	111d4 <tfp_format+0x270>
   11140:	eaffff97 	b	10fa4 <tfp_format+0x40>
   11144:	eaffff96 	b	10fa4 <tfp_format+0x40>
   11148:	eaffff95 	b	10fa4 <tfp_format+0x40>
   1114c:	eaffff94 	b	10fa4 <tfp_format+0x40>
   11150:	eaffff93 	b	10fa4 <tfp_format+0x40>
   11154:	eaffff92 	b	10fa4 <tfp_format+0x40>
   11158:	ea000066 	b	112f8 <tfp_format+0x394>
   1115c:	eaffff90 	b	10fa4 <tfp_format+0x40>
   11160:	eaffff8f 	b	10fa4 <tfp_format+0x40>
   11164:	ea00005b 	b	112d8 <tfp_format+0x374>
   11168:	eaffff8d 	b	10fa4 <tfp_format+0x40>
   1116c:	ea000089 	b	11398 <tfp_format+0x434>
   11170:	eaffff8b 	b	10fa4 <tfp_format+0x40>
   11174:	eaffff8a 	b	10fa4 <tfp_format+0x40>
   11178:	ea00007e 	b	11378 <tfp_format+0x414>
   1117c:	eaffff88 	b	10fa4 <tfp_format+0x40>
   11180:	ea000029 	b	1122c <tfp_format+0x2c8>
        num = num * base + digit;
   11184:	e3a0e00a 	mov	lr, #10
   11188:	ea000002 	b	11198 <tfp_format+0x234>
        ch = *p++;
   1118c:	e4d42001 	ldrb	r2, [r4], #1
        num = num * base + digit;
   11190:	e025359e 	mla	r5, lr, r5, r3
        ch = *p++;
   11194:	e2421030 	sub	r1, r2, #48	; 0x30
    if (ch >= '0' && ch <= '9')
   11198:	e6ef3071 	uxtb	r3, r1
    else if (ch >= 'a' && ch <= 'f')
   1119c:	e2420061 	sub	r0, r2, #97	; 0x61
    if (ch >= '0' && ch <= '9')
   111a0:	e3530009 	cmp	r3, #9
    else if (ch >= 'A' && ch <= 'F')
   111a4:	e242c041 	sub	ip, r2, #65	; 0x41
        return ch - 'A' + 10;
   111a8:	e2423037 	sub	r3, r2, #55	; 0x37
        return ch - '0';
   111ac:	91a03001 	movls	r3, r1
    if (ch >= '0' && ch <= '9')
   111b0:	9afffff5 	bls	1118c <tfp_format+0x228>
    else if (ch >= 'a' && ch <= 'f')
   111b4:	e3500005 	cmp	r0, #5
        return ch - 'a' + 10;
   111b8:	92423057 	subls	r3, r2, #87	; 0x57
    else if (ch >= 'a' && ch <= 'f')
   111bc:	9a000001 	bls	111c8 <tfp_format+0x264>
    else if (ch >= 'A' && ch <= 'F')
   111c0:	e35c0005 	cmp	ip, #5
   111c4:	8affff88 	bhi	10fec <tfp_format+0x88>
        if (digit > base)
   111c8:	e353000a 	cmp	r3, #10
   111cc:	0affffee 	beq	1118c <tfp_format+0x228>
   111d0:	eaffff85 	b	10fec <tfp_format+0x88>
                    i2a(va_arg(va, int), bf);
   111d4:	e49a0004 	ldr	r0, [sl], #4
    uli2a(num, 10, 0, bf);
   111d8:	e3a02000 	mov	r2, #0
   111dc:	e3a0100a 	mov	r1, #10
    if (num < 0)
   111e0:	e3500000 	cmp	r0, #0
        *bf++ = '-';
   111e4:	b3a0302d 	movlt	r3, #45	; 0x2d
        num = -num;
   111e8:	b2600000 	rsblt	r0, r0, #0
        *bf++ = '-';
   111ec:	b5cd3014 	strblt	r3, [sp, #20]
   111f0:	a1a0300b 	movge	r3, fp
   111f4:	b28d3015 	addlt	r3, sp, #21
    uli2a(num, 10, 0, bf);
   111f8:	ebfffef9 	bl	10de4 <ui2a>
                putchw(putp, putf, w, lz, bf);
   111fc:	e58db000 	str	fp, [sp]
   11200:	e1a03008 	mov	r3, r8
   11204:	e1a02005 	mov	r2, r5
   11208:	e1a01007 	mov	r1, r7
   1120c:	e1a00006 	mov	r0, r6
   11210:	ebffff22 	bl	10ea0 <putchw>
                break;
   11214:	eaffff62 	b	10fa4 <tfp_format+0x40>
                putf(putp, (char)(va_arg(va, int)));
   11218:	e49a1004 	ldr	r1, [sl], #4
   1121c:	e1a00006 	mov	r0, r6
   11220:	e6ef1071 	uxtb	r1, r1
   11224:	e12fff37 	blx	r7
                break;
   11228:	eaffff5d 	b	10fa4 <tfp_format+0x40>
                if (ch == 'u')
   1122c:	e4d43001 	ldrb	r3, [r4], #1
   11230:	e3530075 	cmp	r3, #117	; 0x75
   11234:	1affff5a 	bne	10fa4 <tfp_format+0x40>
                    size2a(va_arg(va, size_t), bf);
   11238:	e1a0300a 	mov	r3, sl
   1123c:	e493e004 	ldr	lr, [r3], #4
   11240:	e58d3008 	str	r3, [sp, #8]
    while (num / d >= 10)
   11244:	e35e0009 	cmp	lr, #9
    size_t d = 1;
   11248:	e3a03001 	mov	r3, #1
    while (num / d >= 10)
   1124c:	9a000062 	bls	113dc <tfp_format+0x478>
        d *= 10;
   11250:	e3a0100a 	mov	r1, #10
   11254:	e0030391 	mul	r3, r1, r3
    while (num / d >= 10)
   11258:	e732f31e 	udiv	r2, lr, r3
   1125c:	e3520009 	cmp	r2, #9
   11260:	8afffffb 	bhi	11254 <tfp_format+0x2f0>
    while (d != 0)
   11264:	e3530000 	cmp	r3, #0
   11268:	0a00005d 	beq	113e4 <tfp_format+0x480>
    int n = 0;
   1126c:	e58d800c 	str	r8, [sp, #12]
   11270:	e3a0a000 	mov	sl, #0
   11274:	e1a0800b 	mov	r8, fp
   11278:	e1a0c002 	mov	ip, r2
   1127c:	ea000005 	b	11298 <tfp_format+0x334>
            *bf++ = dgt + '0';
   11280:	e4c0c001 	strb	ip, [r0], #1
    while (d != 0)
   11284:	e3530009 	cmp	r3, #9
            *bf++ = dgt + '0';
   11288:	e1a08000 	mov	r8, r0
    while (d != 0)
   1128c:	9a000047 	bls	113b0 <tfp_format+0x44c>
   11290:	e73cf11e 	udiv	ip, lr, r1
    int n = 0;
   11294:	e1a03001 	mov	r3, r1
        d /= 10;
   11298:	e0812399 	umull	r2, r1, r9, r3
        if (n || dgt > 0 || d == 0)
   1129c:	e25a2000 	subs	r2, sl, #0
            *bf++ = dgt + '0';
   112a0:	e1a00008 	mov	r0, r8
        if (n || dgt > 0 || d == 0)
   112a4:	13a02001 	movne	r2, #1
            ++n;
   112a8:	e28aa001 	add	sl, sl, #1
        num %= d;
   112ac:	e06eec93 	mls	lr, r3, ip, lr
        if (n || dgt > 0 || d == 0)
   112b0:	e3530009 	cmp	r3, #9
   112b4:	93822001 	orrls	r2, r2, #1
   112b8:	e35c0000 	cmp	ip, #0
   112bc:	c3822001 	orrgt	r2, r2, #1
            *bf++ = dgt + '0';
   112c0:	e28cc030 	add	ip, ip, #48	; 0x30
        d /= 10;
   112c4:	e1a011a1 	lsr	r1, r1, #3
        if (n || dgt > 0 || d == 0)
   112c8:	e3520000 	cmp	r2, #0
   112cc:	1affffeb 	bne	11280 <tfp_format+0x31c>
   112d0:	e1a0a002 	mov	sl, r2
   112d4:	eaffffed 	b	11290 <tfp_format+0x32c>
                putchw(putp, putf, w, 0, va_arg(va, char *));
   112d8:	e49a3004 	ldr	r3, [sl], #4
   112dc:	e1a02005 	mov	r2, r5
   112e0:	e1a01007 	mov	r1, r7
   112e4:	e1a00006 	mov	r0, r6
   112e8:	e58d3000 	str	r3, [sp]
   112ec:	e3a03000 	mov	r3, #0
   112f0:	ebfffeea 	bl	10ea0 <putchw>
                break;
   112f4:	eaffff2a 	b	10fa4 <tfp_format+0x40>
                putf(putp, '0');
   112f8:	e1a00006 	mov	r0, r6
   112fc:	e3a01030 	mov	r1, #48	; 0x30
   11300:	e12fff37 	blx	r7
                putf(putp, 'x');
   11304:	e1a00006 	mov	r0, r6
   11308:	e3a01078 	mov	r1, #120	; 0x78
   1130c:	e12fff37 	blx	r7
    ui2a(num, 16, 1, bf); // Convert to hex with uppercase
   11310:	e49a0004 	ldr	r0, [sl], #4
   11314:	e1a0300b 	mov	r3, fp
   11318:	e3a02001 	mov	r2, #1
   1131c:	e3a01010 	mov	r1, #16
   11320:	ebfffeaf 	bl	10de4 <ui2a>
                putchw(putp, putf, w, lz, bf);
   11324:	e58db000 	str	fp, [sp]
   11328:	e1a03008 	mov	r3, r8
   1132c:	e1a02005 	mov	r2, r5
   11330:	e1a01007 	mov	r1, r7
   11334:	e1a00006 	mov	r0, r6
   11338:	ebfffed8 	bl	10ea0 <putchw>
                break;
   1133c:	eaffff18 	b	10fa4 <tfp_format+0x40>
                    ui2a(va_arg(va, unsigned int), 10, 0, bf);
   11340:	e49a0004 	ldr	r0, [sl], #4
   11344:	e1a0300b 	mov	r3, fp
   11348:	e3a02000 	mov	r2, #0
   1134c:	e3a0100a 	mov	r1, #10
   11350:	ebfffea3 	bl	10de4 <ui2a>
                putchw(putp, putf, w, lz, bf);
   11354:	eaffffa8 	b	111fc <tfp_format+0x298>
                    ui2a(va_arg(va, unsigned int), 16, (ch == 'X'), bf);
   11358:	e49a0004 	ldr	r0, [sl], #4
   1135c:	e2422058 	sub	r2, r2, #88	; 0x58
   11360:	e16f2f12 	clz	r2, r2
   11364:	e1a0300b 	mov	r3, fp
   11368:	e3a01010 	mov	r1, #16
   1136c:	e1a022a2 	lsr	r2, r2, #5
   11370:	ebfffe9b 	bl	10de4 <ui2a>
                putchw(putp, putf, w, lz, bf);
   11374:	eaffffa0 	b	111fc <tfp_format+0x298>
                    uli2a(va_arg(va, unsigned long int), 16, (ch == 'X'), bf);
   11378:	e49a0004 	ldr	r0, [sl], #4
   1137c:	e2422058 	sub	r2, r2, #88	; 0x58
   11380:	e16f2f12 	clz	r2, r2
   11384:	e1a0300b 	mov	r3, fp
   11388:	e3a01010 	mov	r1, #16
   1138c:	e1a022a2 	lsr	r2, r2, #5
   11390:	ebfffe93 	bl	10de4 <ui2a>
   11394:	eaffff98 	b	111fc <tfp_format+0x298>
                    uli2a(va_arg(va, unsigned long int), 10, 0, bf);
   11398:	e49a0004 	ldr	r0, [sl], #4
   1139c:	e1a0300b 	mov	r3, fp
   113a0:	e3a02000 	mov	r2, #0
   113a4:	e3a0100a 	mov	r1, #10
   113a8:	ebfffe8d 	bl	10de4 <ui2a>
   113ac:	eaffff92 	b	111fc <tfp_format+0x298>
   113b0:	e59d800c 	ldr	r8, [sp, #12]
                    size2a(va_arg(va, size_t), bf);
   113b4:	e59da008 	ldr	sl, [sp, #8]
    *bf = 0;
   113b8:	e3a01000 	mov	r1, #0
   113bc:	e5c01000 	strb	r1, [r0]
                    putchw(putp, putf, w, lz, bf);
   113c0:	e1a03008 	mov	r3, r8
   113c4:	e58db000 	str	fp, [sp]
   113c8:	e1a02005 	mov	r2, r5
   113cc:	e1a01007 	mov	r1, r7
   113d0:	e1a00006 	mov	r0, r6
   113d4:	ebfffeb1 	bl	10ea0 <putchw>
   113d8:	eafffef1 	b	10fa4 <tfp_format+0x40>
   113dc:	e1a0200e 	mov	r2, lr
   113e0:	eaffffa1 	b	1126c <tfp_format+0x308>
    while (d != 0)
   113e4:	e1a0000b 	mov	r0, fp
   113e8:	eafffff1 	b	113b4 <tfp_format+0x450>

000113ec <init_printf>:
    stdout_putf = putf;
   113ec:	e59f300c 	ldr	r3, [pc, #12]	; 11400 <init_printf+0x14>
   113f0:	e08f3003 	add	r3, pc, r3
    stdout_putp = putp;
   113f4:	e5830004 	str	r0, [r3, #4]
    stdout_putf = putf;
   113f8:	e5831000 	str	r1, [r3]
}
   113fc:	e12fff1e 	bx	lr
   11400:	0004ae38 	.word	0x0004ae38

00011404 <tfp_printf>:
{
   11404:	e92d000f 	push	{r0, r1, r2, r3}
    tfp_format(stdout_putp, stdout_putf, fmt, va);
   11408:	e59f0030 	ldr	r0, [pc, #48]	; 11440 <tfp_printf+0x3c>
{
   1140c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   11410:	e24dd00c 	sub	sp, sp, #12
    tfp_format(stdout_putp, stdout_putf, fmt, va);
   11414:	e08f0000 	add	r0, pc, r0
    va_start(va, fmt);
   11418:	e28d3014 	add	r3, sp, #20
    tfp_format(stdout_putp, stdout_putf, fmt, va);
   1141c:	e59d2010 	ldr	r2, [sp, #16]
   11420:	e5901000 	ldr	r1, [r0]
   11424:	e5900004 	ldr	r0, [r0, #4]
    va_start(va, fmt);
   11428:	e58d3004 	str	r3, [sp, #4]
    tfp_format(stdout_putp, stdout_putf, fmt, va);
   1142c:	ebfffecc 	bl	10f64 <tfp_format>
}
   11430:	e28dd00c 	add	sp, sp, #12
   11434:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   11438:	e28dd010 	add	sp, sp, #16
   1143c:	e12fff1e 	bx	lr
   11440:	0004ae14 	.word	0x0004ae14

00011444 <tfp_sprintf>:

void tfp_sprintf(char *s, char *fmt, ...)
{
   11444:	e92d000e 	push	{r1, r2, r3}
    va_list va;
    va_start(va, fmt);
    tfp_format(&s, putcp, fmt, va);
   11448:	e59f103c 	ldr	r1, [pc, #60]	; 1148c <tfp_sprintf+0x48>
{
   1144c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   11450:	e24dd010 	sub	sp, sp, #16
    tfp_format(&s, putcp, fmt, va);
   11454:	e08f1001 	add	r1, pc, r1
    va_start(va, fmt);
   11458:	e28d3018 	add	r3, sp, #24
    tfp_format(&s, putcp, fmt, va);
   1145c:	e59d2014 	ldr	r2, [sp, #20]
{
   11460:	e58d0004 	str	r0, [sp, #4]
    tfp_format(&s, putcp, fmt, va);
   11464:	e28d0004 	add	r0, sp, #4
    va_start(va, fmt);
   11468:	e58d300c 	str	r3, [sp, #12]
    tfp_format(&s, putcp, fmt, va);
   1146c:	ebfffebc 	bl	10f64 <tfp_format>
    *(*((char **)p))++ = c;
   11470:	e59d3004 	ldr	r3, [sp, #4]
   11474:	e3a02000 	mov	r2, #0
   11478:	e5c32000 	strb	r2, [r3]
    putcp(&s, 0);
    va_end(va);
   1147c:	e28dd010 	add	sp, sp, #16
   11480:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   11484:	e28dd00c 	add	sp, sp, #12
   11488:	e12fff1e 	bx	lr
   1148c:	fffffaf4 	.word	0xfffffaf4

00011490 <SHA1Transform>:
/* Hash a single 512-bit block. This is the core of the algorithm. */
void SHA1Transform(
    uint32_t state[5],
    const unsigned char buffer[64]
)
{
   11490:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11494:	e1a04000 	mov	r4, r0
   11498:	e24dd0a4 	sub	sp, sp, #164	; 0xa4
        unsigned char c[64];
        uint32_t l[16];
    } CHAR64LONG16;

    CHAR64LONG16 block[1];      /* use array to appear as a pointer */
    memcpy(block, buffer, 64);
   1149c:	e3a02040 	mov	r2, #64	; 0x40
   114a0:	e28d0060 	add	r0, sp, #96	; 0x60
   114a4:	ebfff70a 	bl	f0d4 <memcpy>
    /* Copy context->state[] to working vars */
    a = state[0];
    b = state[1];
    c = state[2];
   114a8:	e5945008 	ldr	r5, [r4, #8]
   114ac:	e3073999 	movw	r3, #31129	; 0x7999
    d = state[3];
   114b0:	e594100c 	ldr	r1, [r4, #12]
    b = state[1];
   114b4:	e5942004 	ldr	r2, [r4, #4]
    a = state[0];
   114b8:	e5940000 	ldr	r0, [r4]
    e = state[4];
   114bc:	e594c010 	ldr	ip, [r4, #16]
    /* 4 rounds of 20 operations each. Loop unrolled. */
    R0(a, b, c, d, e, 0);
   114c0:	e3453a82 	movt	r3, #23170	; 0x5a82
    a = state[0];
   114c4:	e1a06000 	mov	r6, r0
    R0(a, b, c, d, e, 0);
   114c8:	e0257001 	eor	r7, r5, r1
    a = state[0];
   114cc:	e58d405c 	str	r4, [sp, #92]	; 0x5c
    R0(a, b, c, d, e, 0);
   114d0:	e0077002 	and	r7, r7, r2
   114d4:	e1a04162 	ror	r4, r2, #2
   114d8:	e59db060 	ldr	fp, [sp, #96]	; 0x60
    R0(e, a, b, c, d, 1);
   114dc:	e0258004 	eor	r8, r5, r4
    R0(a, b, c, d, e, 0);
   114e0:	e58d204c 	str	r2, [sp, #76]	; 0x4c
    R0(e, a, b, c, d, 1);
   114e4:	e0088000 	and	r8, r8, r0
   114e8:	e08c2003 	add	r2, ip, r3
   114ec:	e0822de0 	add	r2, r2, r0, ror #27
    R0(a, b, c, d, e, 0);
   114f0:	e0277001 	eor	r7, r7, r1
   114f4:	e59d0064 	ldr	r0, [sp, #100]	; 0x64
    R0(e, a, b, c, d, 1);
   114f8:	e1a0a166 	ror	sl, r6, #2
   114fc:	e58dc058 	str	ip, [sp, #88]	; 0x58
   11500:	e6bfbf3b 	rev	fp, fp
   11504:	e59dc068 	ldr	ip, [sp, #104]	; 0x68
   11508:	e0877002 	add	r7, r7, r2
   1150c:	e0288005 	eor	r8, r8, r5
   11510:	e0812003 	add	r2, r1, r3
    R0(a, b, c, d, e, 0);
   11514:	e08b7007 	add	r7, fp, r7
    R0(e, a, b, c, d, 1);
   11518:	e58d1054 	str	r1, [sp, #84]	; 0x54
   1151c:	e6bf0f30 	rev	r0, r0
    R0(d, e, a, b, c, 2);
   11520:	e024100a 	eor	r1, r4, sl
   11524:	e0888002 	add	r8, r8, r2
   11528:	e0011007 	and	r1, r1, r7
   1152c:	e6bfcf3c 	rev	ip, ip
   11530:	e085e003 	add	lr, r5, r3
   11534:	e0888000 	add	r8, r8, r0
    R0(e, a, b, c, d, 1);
   11538:	e0888de7 	add	r8, r8, r7, ror #27
    R0(d, e, a, b, c, 2);
   1153c:	e08ee00c 	add	lr, lr, ip
   11540:	e1a07167 	ror	r7, r7, #2
   11544:	e0211004 	eor	r1, r1, r4
   11548:	e081100e 	add	r1, r1, lr
    R0(c, d, e, a, b, 3);
   1154c:	e02ae007 	eor	lr, sl, r7
    R0(d, e, a, b, c, 2);
   11550:	e0811de8 	add	r1, r1, r8, ror #27
    R0(c, d, e, a, b, 3);
   11554:	e00ee008 	and	lr, lr, r8
    R0(e, a, b, c, d, 1);
   11558:	e58d6048 	str	r6, [sp, #72]	; 0x48
    R0(c, d, e, a, b, 3);
   1155c:	e1a08168 	ror	r8, r8, #2
   11560:	e59d6070 	ldr	r6, [sp, #112]	; 0x70
    R0(b, c, d, e, a, 4);
   11564:	e0279008 	eor	r9, r7, r8
   11568:	e6bf6f36 	rev	r6, r6
   1156c:	e0099001 	and	r9, r9, r1
   11570:	e59d206c 	ldr	r2, [sp, #108]	; 0x6c
    R0(c, d, e, a, b, 3);
   11574:	e02ee00a 	eor	lr, lr, sl
   11578:	e08aa003 	add	sl, sl, r3
   1157c:	e08aa006 	add	sl, sl, r6
    R0(b, c, d, e, a, 4);
   11580:	e0299007 	eor	r9, r9, r7
   11584:	e6bf2f32 	rev	r2, r2
   11588:	e0844003 	add	r4, r4, r3
   1158c:	e089900a 	add	r9, r9, sl
   11590:	e59da078 	ldr	sl, [sp, #120]	; 0x78
   11594:	e0844002 	add	r4, r4, r2
   11598:	e6bfaf3a 	rev	sl, sl
   1159c:	e58d5050 	str	r5, [sp, #80]	; 0x50
   115a0:	e08ee004 	add	lr, lr, r4
   115a4:	e59d5074 	ldr	r5, [sp, #116]	; 0x74
    R0(c, d, e, a, b, 3);
   115a8:	e08eede1 	add	lr, lr, r1, ror #27
    R0(a, b, c, d, e, 15);
    R1(e, a, b, c, d, 16);
    R1(d, e, a, b, c, 17);
    R1(c, d, e, a, b, 18);
    R1(b, c, d, e, a, 19);
    R2(a, b, c, d, e, 20);
   115ac:	e026400a 	eor	r4, r6, sl
    R0(b, c, d, e, a, 4);
   115b0:	e1a01161 	ror	r1, r1, #2
   115b4:	e6bf5f35 	rev	r5, r5
    R2(a, b, c, d, e, 20);
   115b8:	e58d4004 	str	r4, [sp, #4]
    R0(a, b, c, d, e, 5);
   115bc:	e0284001 	eor	r4, r8, r1
    R1(e, a, b, c, d, 16);
   115c0:	e02bb00c 	eor	fp, fp, ip
    R0(a, b, c, d, e, 5);
   115c4:	e004400e 	and	r4, r4, lr
    R1(c, d, e, a, b, 18);
   115c8:	e02cc006 	eor	ip, ip, r6
   115cc:	e0856003 	add	r6, r5, r3
    R0(a, b, c, d, e, 5);
   115d0:	e0244008 	eor	r4, r4, r8
   115d4:	e0867007 	add	r7, r6, r7
   115d8:	e0847007 	add	r7, r4, r7
   115dc:	e59d407c 	ldr	r4, [sp, #124]	; 0x7c
    R0(b, c, d, e, a, 4);
   115e0:	e0899dee 	add	r9, r9, lr, ror #27
    R0(a, b, c, d, e, 5);
   115e4:	e6bf4f34 	rev	r4, r4
   115e8:	e1a0e16e 	ror	lr, lr, #2
    R2(e, a, b, c, d, 21);
   115ec:	e0256004 	eor	r6, r5, r4
    R1(d, e, a, b, c, 17);
   115f0:	e0200002 	eor	r0, r0, r2
    R1(b, c, d, e, a, 19);
   115f4:	e0222005 	eor	r2, r2, r5
   115f8:	e08a5003 	add	r5, sl, r3
   115fc:	e0855008 	add	r5, r5, r8
    R2(e, a, b, c, d, 21);
   11600:	e58d600c 	str	r6, [sp, #12]
   11604:	e59d8080 	ldr	r8, [sp, #128]	; 0x80
    R0(e, a, b, c, d, 6);
   11608:	e021600e 	eor	r6, r1, lr
   1160c:	e6bf8f38 	rev	r8, r8
   11610:	e0066009 	and	r6, r6, r9
    R0(a, b, c, d, e, 5);
   11614:	e0877de9 	add	r7, r7, r9, ror #27
    R0(e, a, b, c, d, 6);
   11618:	e0266001 	eor	r6, r6, r1
   1161c:	e1a09169 	ror	r9, r9, #2
    R2(d, e, a, b, c, 22);
   11620:	e02aa008 	eor	sl, sl, r8
   11624:	e0866005 	add	r6, r6, r5
    R0(d, e, a, b, c, 7);
   11628:	e02e5009 	eor	r5, lr, r9
    R2(d, e, a, b, c, 22);
   1162c:	e58da01c 	str	sl, [sp, #28]
    R0(d, e, a, b, c, 7);
   11630:	e0055007 	and	r5, r5, r7
   11634:	e084a003 	add	sl, r4, r3
   11638:	e08a1001 	add	r1, sl, r1
   1163c:	e025500e 	eor	r5, r5, lr
   11640:	e0855001 	add	r5, r5, r1
   11644:	e59d1084 	ldr	r1, [sp, #132]	; 0x84
    R0(e, a, b, c, d, 6);
   11648:	e0866de7 	add	r6, r6, r7, ror #27
    R0(d, e, a, b, c, 7);
   1164c:	e6bf1f31 	rev	r1, r1
    R1(d, e, a, b, c, 17);
   11650:	e0200001 	eor	r0, r0, r1
   11654:	e58d0008 	str	r0, [sp, #8]
    R2(c, d, e, a, b, 23);
   11658:	e0240001 	eor	r0, r4, r1
    R0(d, e, a, b, c, 7);
   1165c:	e1a07167 	ror	r7, r7, #2
    R2(c, d, e, a, b, 23);
   11660:	e58d0020 	str	r0, [sp, #32]
   11664:	e0880003 	add	r0, r8, r3
    R0(c, d, e, a, b, 8);
   11668:	e0294007 	eor	r4, r9, r7
   1166c:	e080e00e 	add	lr, r0, lr
   11670:	e0044006 	and	r4, r4, r6
   11674:	e59d0088 	ldr	r0, [sp, #136]	; 0x88
   11678:	e59da08c 	ldr	sl, [sp, #140]	; 0x8c
   1167c:	e6bf0f30 	rev	r0, r0
    R0(d, e, a, b, c, 7);
   11680:	e0855de6 	add	r5, r5, r6, ror #27
    R1(e, a, b, c, d, 16);
   11684:	e02bb008 	eor	fp, fp, r8
    R0(c, d, e, a, b, 8);
   11688:	e1a06166 	ror	r6, r6, #2
   1168c:	e0244009 	eor	r4, r4, r9
   11690:	e6bfaf3a 	rev	sl, sl
    R1(e, a, b, c, d, 16);
   11694:	e58db000 	str	fp, [sp]
   11698:	e084400e 	add	r4, r4, lr
    R1(c, d, e, a, b, 18);
   1169c:	e02cb000 	eor	fp, ip, r0
    R0(b, c, d, e, a, 9);
   116a0:	e027e006 	eor	lr, r7, r6
   116a4:	e081c003 	add	ip, r1, r3
   116a8:	e00ee005 	and	lr, lr, r5
   116ac:	e08cc009 	add	ip, ip, r9
    R2(b, c, d, e, a, 24);
    R2(a, b, c, d, e, 25);
   116b0:	e021900a 	eor	r9, r1, sl
   116b4:	e0801003 	add	r1, r0, r3
    R0(c, d, e, a, b, 8);
   116b8:	e0844de5 	add	r4, r4, r5, ror #27
    R0(b, c, d, e, a, 9);
   116bc:	e0811007 	add	r1, r1, r7
   116c0:	e1a05165 	ror	r5, r5, #2
   116c4:	e02ee007 	eor	lr, lr, r7
   116c8:	e59d7090 	ldr	r7, [sp, #144]	; 0x90
    R1(c, d, e, a, b, 18);
   116cc:	e58db014 	str	fp, [sp, #20]
   116d0:	e08ee00c 	add	lr, lr, ip
    R2(a, b, c, d, e, 25);
   116d4:	e58d9024 	str	r9, [sp, #36]	; 0x24
    R0(a, b, c, d, e, 10);
   116d8:	e026c005 	eor	ip, r6, r5
    R2(a, b, c, d, e, 20);
   116dc:	e59d9004 	ldr	r9, [sp, #4]
    R0(a, b, c, d, e, 10);
   116e0:	e00cc004 	and	ip, ip, r4
    R0(b, c, d, e, a, 9);
   116e4:	e08eede4 	add	lr, lr, r4, ror #27
    R0(a, b, c, d, e, 10);
   116e8:	e6bf7f37 	rev	r7, r7
   116ec:	e1a04164 	ror	r4, r4, #2
    R2(a, b, c, d, e, 20);
   116f0:	e029b007 	eor	fp, r9, r7
    R2(b, c, d, e, a, 24);
   116f4:	e0288000 	eor	r8, r8, r0
    R2(e, a, b, c, d, 26);
   116f8:	e0209007 	eor	r9, r0, r7
    R0(a, b, c, d, e, 10);
   116fc:	e02cc006 	eor	ip, ip, r6
    R0(e, a, b, c, d, 11);
   11700:	e0250004 	eor	r0, r5, r4
   11704:	e08cc001 	add	ip, ip, r1
   11708:	e000000e 	and	r0, r0, lr
   1170c:	e08a1003 	add	r1, sl, r3
    R2(e, a, b, c, d, 26);
   11710:	e58d9034 	str	r9, [sp, #52]	; 0x34
   11714:	e0811006 	add	r1, r1, r6
   11718:	e59d9094 	ldr	r9, [sp, #148]	; 0x94
    R0(e, a, b, c, d, 11);
   1171c:	e0200005 	eor	r0, r0, r5
   11720:	e0800001 	add	r0, r0, r1
    R1(e, a, b, c, d, 16);
   11724:	e59d1000 	ldr	r1, [sp]
   11728:	e6bf9f39 	rev	r9, r9
   1172c:	e0216009 	eor	r6, r1, r9
    R1(b, c, d, e, a, 19);
   11730:	e022200a 	eor	r2, r2, sl
    R1(e, a, b, c, d, 16);
   11734:	e1a06fe6 	ror	r6, r6, #31
    R2(e, a, b, c, d, 21);
   11738:	e59d100c 	ldr	r1, [sp, #12]
    R1(b, c, d, e, a, 19);
   1173c:	e0222006 	eor	r2, r2, r6
    R0(a, b, c, d, e, 10);
   11740:	e08ccdee 	add	ip, ip, lr, ror #27
    R2(e, a, b, c, d, 21);
   11744:	e0211009 	eor	r1, r1, r9
    R0(e, a, b, c, d, 11);
   11748:	e1a0e16e 	ror	lr, lr, #2
    R2(e, a, b, c, d, 21);
   1174c:	e58d1000 	str	r1, [sp]
    R2(d, e, a, b, c, 27);
   11750:	e02aa009 	eor	sl, sl, r9
    R2(b, c, d, e, a, 24);
   11754:	e0288006 	eor	r8, r8, r6
    R1(b, c, d, e, a, 19);
   11758:	e1a02fe2 	ror	r2, r2, #31
    R0(d, e, a, b, c, 12);
   1175c:	e024100e 	eor	r1, r4, lr
    R2(b, c, d, e, a, 24);
   11760:	e58d802c 	str	r8, [sp, #44]	; 0x2c
    R0(d, e, a, b, c, 12);
   11764:	e001100c 	and	r1, r1, ip
    R2(d, e, a, b, c, 27);
   11768:	e02a8002 	eor	r8, sl, r2
   1176c:	e58d2018 	str	r2, [sp, #24]
   11770:	e0872003 	add	r2, r7, r3
    R0(e, a, b, c, d, 11);
   11774:	e0800dec 	add	r0, r0, ip, ror #27
    R0(d, e, a, b, c, 12);
   11778:	e0822005 	add	r2, r2, r5
   1177c:	e0211004 	eor	r1, r1, r4
    R2(d, e, a, b, c, 27);
   11780:	e58d8038 	str	r8, [sp, #56]	; 0x38
   11784:	e0811002 	add	r1, r1, r2
   11788:	e59d8098 	ldr	r8, [sp, #152]	; 0x98
    R0(d, e, a, b, c, 12);
   1178c:	e0812de0 	add	r2, r1, r0, ror #27
    R1(d, e, a, b, c, 17);
   11790:	e59d1008 	ldr	r1, [sp, #8]
   11794:	e6bf8f38 	rev	r8, r8
    R2(d, e, a, b, c, 22);
   11798:	e59da01c 	ldr	sl, [sp, #28]
    R1(d, e, a, b, c, 17);
   1179c:	e0215008 	eor	r5, r1, r8
    R2(d, e, a, b, c, 22);
   117a0:	e59d1018 	ldr	r1, [sp, #24]
   117a4:	e02aa008 	eor	sl, sl, r8
   117a8:	e02aa001 	eor	sl, sl, r1
    R1(d, e, a, b, c, 17);
   117ac:	e1a05fe5 	ror	r5, r5, #31
    R2(d, e, a, b, c, 22);
   117b0:	e1a01fea 	ror	r1, sl, #31
    R2(a, b, c, d, e, 25);
   117b4:	e59da024 	ldr	sl, [sp, #36]	; 0x24
    R2(a, b, c, d, e, 20);
   117b8:	e02bb005 	eor	fp, fp, r5
    R2(a, b, c, d, e, 25);
   117bc:	e02aa005 	eor	sl, sl, r5
   117c0:	e02aa001 	eor	sl, sl, r1
    R2(a, b, c, d, e, 20);
   117c4:	e1a0bfeb 	ror	fp, fp, #31
    R2(c, d, e, a, b, 28);
   117c8:	e0277008 	eor	r7, r7, r8
    R2(a, b, c, d, e, 25);
   117cc:	e1a0afea 	ror	sl, sl, #31
    R2(c, d, e, a, b, 28);
   117d0:	e027700b 	eor	r7, r7, fp
   117d4:	e027700a 	eor	r7, r7, sl
    R0(d, e, a, b, c, 12);
   117d8:	e1a0c16c 	ror	ip, ip, #2
   117dc:	e58d2004 	str	r2, [sp, #4]
    R2(c, d, e, a, b, 28);
   117e0:	e1a07fe7 	ror	r7, r7, #31
    R0(c, d, e, a, b, 13);
   117e4:	e02e200c 	eor	r2, lr, ip
    R2(c, d, e, a, b, 28);
   117e8:	e58d7024 	str	r7, [sp, #36]	; 0x24
    R0(c, d, e, a, b, 13);
   117ec:	e0022000 	and	r2, r2, r0
   117f0:	e0897003 	add	r7, r9, r3
   117f4:	e0874004 	add	r4, r7, r4
   117f8:	e022200e 	eor	r2, r2, lr
   117fc:	e0822004 	add	r2, r2, r4
   11800:	e59d4004 	ldr	r4, [sp, #4]
   11804:	e59d709c 	ldr	r7, [sp, #156]	; 0x9c
   11808:	e0822de4 	add	r2, r2, r4, ror #27
    R2(c, d, e, a, b, 28);
   1180c:	e58da030 	str	sl, [sp, #48]	; 0x30
    R1(c, d, e, a, b, 18);
   11810:	e59d4014 	ldr	r4, [sp, #20]
    R2(c, d, e, a, b, 23);
   11814:	e59da020 	ldr	sl, [sp, #32]
   11818:	e6bf7f37 	rev	r7, r7
    R1(c, d, e, a, b, 18);
   1181c:	e0244007 	eor	r4, r4, r7
    R2(c, d, e, a, b, 23);
   11820:	e02aa007 	eor	sl, sl, r7
   11824:	e02aa00b 	eor	sl, sl, fp
   11828:	e58db028 	str	fp, [sp, #40]	; 0x28
    R2(e, a, b, c, d, 21);
   1182c:	e59db000 	ldr	fp, [sp]
    R1(c, d, e, a, b, 18);
   11830:	e1a04fe4 	ror	r4, r4, #31
    R2(e, a, b, c, d, 21);
   11834:	e02bb004 	eor	fp, fp, r4
    R2(a, b, c, d, e, 25);
   11838:	e58d100c 	str	r1, [sp, #12]
    R2(c, d, e, a, b, 23);
   1183c:	e1a01fea 	ror	r1, sl, #31
    R2(e, a, b, c, d, 26);
   11840:	e59da034 	ldr	sl, [sp, #52]	; 0x34
    R2(e, a, b, c, d, 21);
   11844:	e1a0bfeb 	ror	fp, fp, #31
   11848:	e58db000 	str	fp, [sp]
    R0(c, d, e, a, b, 13);
   1184c:	e1a00160 	ror	r0, r0, #2
    R2(e, a, b, c, d, 26);
   11850:	e02aa004 	eor	sl, sl, r4
    R0(c, d, e, a, b, 13);
   11854:	e58d0010 	str	r0, [sp, #16]
    R2(e, a, b, c, d, 26);
   11858:	e58d101c 	str	r1, [sp, #28]
    R2(b, c, d, e, a, 24);
   1185c:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
    R2(e, a, b, c, d, 26);
   11860:	e02aa001 	eor	sl, sl, r1
    R2(b, c, d, e, a, 24);
   11864:	e59d1000 	ldr	r1, [sp]
    R2(b, c, d, e, a, 29);
   11868:	e0299007 	eor	r9, r9, r7
    R2(b, c, d, e, a, 24);
   1186c:	e020b001 	eor	fp, r0, r1
    R2(e, a, b, c, d, 26);
   11870:	e1a0afea 	ror	sl, sl, #31
    R2(d, e, a, b, c, 27);
   11874:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
    R2(b, c, d, e, a, 29);
   11878:	e0299001 	eor	r9, r9, r1
    R2(b, c, d, e, a, 24);
   1187c:	e1a0bfeb 	ror	fp, fp, #31
    R2(b, c, d, e, a, 29);
   11880:	e029900a 	eor	r9, r9, sl
   11884:	e58da020 	str	sl, [sp, #32]
    R2(d, e, a, b, c, 27);
   11888:	e020a00b 	eor	sl, r0, fp
    R2(b, c, d, e, a, 29);
   1188c:	e1a09fe9 	ror	r9, r9, #31
   11890:	e58d9008 	str	r9, [sp, #8]
    R0(b, c, d, e, a, 14);
   11894:	e59d1010 	ldr	r1, [sp, #16]
    R2(d, e, a, b, c, 27);
   11898:	e1a09fea 	ror	r9, sl, #31
    R0(b, c, d, e, a, 14);
   1189c:	e02ca001 	eor	sl, ip, r1
    R2(d, e, a, b, c, 27);
   118a0:	e1a00009 	mov	r0, r9
    R0(b, c, d, e, a, 14);
   118a4:	e59d9004 	ldr	r9, [sp, #4]
    R2(a, b, c, d, e, 30);
   118a8:	e58d0004 	str	r0, [sp, #4]
    R0(b, c, d, e, a, 14);
   118ac:	e1a01169 	ror	r1, r9, #2
   118b0:	e00aa009 	and	sl, sl, r9
   118b4:	e0889003 	add	r9, r8, r3
   118b8:	e089e00e 	add	lr, r9, lr
    R2(a, b, c, d, e, 30);
   118bc:	e59d900c 	ldr	r9, [sp, #12]
   118c0:	e0288006 	eor	r8, r8, r6
   118c4:	e0288009 	eor	r8, r8, r9
   118c8:	e0288000 	eor	r8, r8, r0
    R0(b, c, d, e, a, 14);
   118cc:	e02aa00c 	eor	sl, sl, ip
    R2(a, b, c, d, e, 30);
   118d0:	e1a08fe8 	ror	r8, r8, #31
   118d4:	e58d800c 	str	r8, [sp, #12]
   118d8:	e0878003 	add	r8, r7, r3
   118dc:	e088c00c 	add	ip, r8, ip
    R2(e, a, b, c, d, 31);
   118e0:	e59d801c 	ldr	r8, [sp, #28]
   118e4:	e0277005 	eor	r7, r7, r5
   118e8:	e0277008 	eor	r7, r7, r8
   118ec:	e59d8024 	ldr	r8, [sp, #36]	; 0x24
    R0(a, b, c, d, e, 15);
   118f0:	e59d0010 	ldr	r0, [sp, #16]
    R2(e, a, b, c, d, 31);
   118f4:	e0277008 	eor	r7, r7, r8
   118f8:	e08aa00e 	add	sl, sl, lr
    R0(a, b, c, d, e, 15);
   118fc:	e020e001 	eor	lr, r0, r1
    R0(b, c, d, e, a, 14);
   11900:	e08aade2 	add	sl, sl, r2, ror #27
    R0(a, b, c, d, e, 15);
   11904:	e00ee002 	and	lr, lr, r2
    R2(e, a, b, c, d, 31);
   11908:	e1a07fe7 	ror	r7, r7, #31
    R0(a, b, c, d, e, 15);
   1190c:	e1a02162 	ror	r2, r2, #2
    R2(e, a, b, c, d, 31);
   11910:	e58d7010 	str	r7, [sp, #16]
    R0(a, b, c, d, e, 15);
   11914:	e02ee000 	eor	lr, lr, r0
    R1(e, a, b, c, d, 16);
   11918:	e0217002 	eor	r7, r1, r2
   1191c:	e08ee00c 	add	lr, lr, ip
   11920:	e007700a 	and	r7, r7, sl
   11924:	e086c003 	add	ip, r6, r3
   11928:	e08c0000 	add	r0, ip, r0
   1192c:	e0277001 	eor	r7, r7, r1
   11930:	e0877000 	add	r7, r7, r0
    R2(d, e, a, b, c, 32);
   11934:	e0266004 	eor	r6, r6, r4
   11938:	e59d0008 	ldr	r0, [sp, #8]
   1193c:	e026600b 	eor	r6, r6, fp
   11940:	e0266000 	eor	r6, r6, r0
    R2(c, d, e, a, b, 33);
   11944:	e59dc018 	ldr	ip, [sp, #24]
    R2(d, e, a, b, c, 32);
   11948:	e1a00fe6 	ror	r0, r6, #31
   1194c:	e0856003 	add	r6, r5, r3
   11950:	e0861001 	add	r1, r6, r1
    R2(c, d, e, a, b, 33);
   11954:	e59d6030 	ldr	r6, [sp, #48]	; 0x30
    R0(a, b, c, d, e, 15);
   11958:	e08eedea 	add	lr, lr, sl, ror #27
    R2(c, d, e, a, b, 33);
   1195c:	e59d800c 	ldr	r8, [sp, #12]
    R1(e, a, b, c, d, 16);
   11960:	e1a0a16a 	ror	sl, sl, #2
    R2(c, d, e, a, b, 33);
   11964:	e025500c 	eor	r5, r5, ip
    R2(d, e, a, b, c, 32);
   11968:	e58d0014 	str	r0, [sp, #20]
    R2(c, d, e, a, b, 33);
   1196c:	e0255006 	eor	r5, r5, r6
    R1(d, e, a, b, c, 17);
   11970:	e022000a 	eor	r0, r2, sl
    R2(c, d, e, a, b, 33);
   11974:	e0255008 	eor	r5, r5, r8
    R1(d, e, a, b, c, 17);
   11978:	e000000e 	and	r0, r0, lr
    R1(e, a, b, c, d, 16);
   1197c:	e0877dee 	add	r7, r7, lr, ror #27
    R1(d, e, a, b, c, 17);
   11980:	e0200002 	eor	r0, r0, r2
   11984:	e1a0e16e 	ror	lr, lr, #2
   11988:	e0800001 	add	r0, r0, r1
    R2(c, d, e, a, b, 33);
   1198c:	e1a05fe5 	ror	r5, r5, #31
    R1(c, d, e, a, b, 18);
   11990:	e02a100e 	eor	r1, sl, lr
    R2(c, d, e, a, b, 33);
   11994:	e58d5018 	str	r5, [sp, #24]
    R1(c, d, e, a, b, 18);
   11998:	e0011007 	and	r1, r1, r7
   1199c:	e0845003 	add	r5, r4, r3
   119a0:	e08c3003 	add	r3, ip, r3
   119a4:	e021100a 	eor	r1, r1, sl
   119a8:	e0852002 	add	r2, r5, r2
   119ac:	e083a00a 	add	sl, r3, sl
    R2(b, c, d, e, a, 34);
    R2(a, b, c, d, e, 35);
   119b0:	e59d3000 	ldr	r3, [sp]
   119b4:	e0812002 	add	r2, r1, r2
    R2(b, c, d, e, a, 34);
   119b8:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
    R2(a, b, c, d, e, 35);
   119bc:	e02c3003 	eor	r3, ip, r3
    R2(b, c, d, e, a, 34);
   119c0:	e59dc020 	ldr	ip, [sp, #32]
   119c4:	e0244001 	eor	r4, r4, r1
   119c8:	e024400c 	eor	r4, r4, ip
    R2(a, b, c, d, e, 35);
   119cc:	e59dc004 	ldr	ip, [sp, #4]
   119d0:	e59d6014 	ldr	r6, [sp, #20]
   119d4:	e023300c 	eor	r3, r3, ip
    R2(b, c, d, e, a, 34);
   119d8:	e59dc010 	ldr	ip, [sp, #16]
    R2(a, b, c, d, e, 35);
   119dc:	e0233006 	eor	r3, r3, r6
    R2(e, a, b, c, d, 36);
   119e0:	e1a06009 	mov	r6, r9
    R2(b, c, d, e, a, 34);
   119e4:	e024400c 	eor	r4, r4, ip
   119e8:	e30ecba1 	movw	ip, #60321	; 0xeba1
    R1(d, e, a, b, c, 17);
   119ec:	e0800de7 	add	r0, r0, r7, ror #27
    R1(c, d, e, a, b, 18);
   119f0:	e1a07167 	ror	r7, r7, #2
    R2(b, c, d, e, a, 34);
   119f4:	e1a08fe4 	ror	r8, r4, #31
    R2(a, b, c, d, e, 35);
   119f8:	e1a04fe3 	ror	r4, r3, #31
    R1(b, c, d, e, a, 19);
   119fc:	e02e3007 	eor	r3, lr, r7
   11a00:	e346ced9 	movt	ip, #28377	; 0x6ed9
   11a04:	e0033000 	and	r3, r3, r0
   11a08:	e023300e 	eor	r3, r3, lr
   11a0c:	e083a00a 	add	sl, r3, sl
   11a10:	e081300c 	add	r3, r1, ip
   11a14:	e083e00e 	add	lr, r3, lr
    R2(e, a, b, c, d, 36);
   11a18:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   11a1c:	e0211009 	eor	r1, r1, r9
   11a20:	e59d9018 	ldr	r9, [sp, #24]
    R1(c, d, e, a, b, 18);
   11a24:	e0822de0 	add	r2, r2, r0, ror #27
    R2(e, a, b, c, d, 36);
   11a28:	e0211003 	eor	r1, r1, r3
    R1(b, c, d, e, a, 19);
   11a2c:	e1a00160 	ror	r0, r0, #2
   11a30:	e59d3000 	ldr	r3, [sp]
    R2(a, b, c, d, e, 35);
   11a34:	e58d4028 	str	r4, [sp, #40]	; 0x28
    R2(e, a, b, c, d, 36);
   11a38:	e0211009 	eor	r1, r1, r9
    R2(a, b, c, d, e, 20);
   11a3c:	e0274000 	eor	r4, r7, r0
    R1(b, c, d, e, a, 19);
   11a40:	e08aade2 	add	sl, sl, r2, ror #27
    R2(a, b, c, d, e, 20);
   11a44:	e0244002 	eor	r4, r4, r2
   11a48:	e1a02162 	ror	r2, r2, #2
    R2(e, a, b, c, d, 36);
   11a4c:	e1a09fe1 	ror	r9, r1, #31
   11a50:	e084400e 	add	r4, r4, lr
   11a54:	e083100c 	add	r1, r3, ip
    R2(e, a, b, c, d, 21);
   11a58:	e020e002 	eor	lr, r0, r2
   11a5c:	e0817007 	add	r7, r1, r7
   11a60:	e02ee00a 	eor	lr, lr, sl
    R2(d, e, a, b, c, 37);
   11a64:	e59d101c 	ldr	r1, [sp, #28]
   11a68:	e08ee007 	add	lr, lr, r7
   11a6c:	e59d7008 	ldr	r7, [sp, #8]
   11a70:	e0233001 	eor	r3, r3, r1
   11a74:	e0233007 	eor	r3, r3, r7
   11a78:	e0233008 	eor	r3, r3, r8
    R2(e, a, b, c, d, 21);
   11a7c:	e1a0516a 	ror	r5, sl, #2
    R2(d, e, a, b, c, 37);
   11a80:	e1a07fe3 	ror	r7, r3, #31
   11a84:	e1a03006 	mov	r3, r6
    R2(a, b, c, d, e, 20);
   11a88:	e0844dea 	add	r4, r4, sl, ror #27
    R2(d, e, a, b, c, 22);
   11a8c:	e0221005 	eor	r1, r2, r5
   11a90:	e086600c 	add	r6, r6, ip
   11a94:	e0860000 	add	r0, r6, r0
   11a98:	e0211004 	eor	r1, r1, r4
   11a9c:	e0811000 	add	r1, r1, r0
    R2(c, d, e, a, b, 38);
   11aa0:	e59d000c 	ldr	r0, [sp, #12]
   11aa4:	e023a00b 	eor	sl, r3, fp
   11aa8:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   11aac:	e02aa000 	eor	sl, sl, r0
   11ab0:	e02aa003 	eor	sl, sl, r3
    R2(e, a, b, c, d, 21);
   11ab4:	e08eede4 	add	lr, lr, r4, ror #27
    R2(c, d, e, a, b, 38);
   11ab8:	e1a00fea 	ror	r0, sl, #31
   11abc:	e59da01c 	ldr	sl, [sp, #28]
    R2(d, e, a, b, c, 22);
   11ac0:	e1a04164 	ror	r4, r4, #2
    R2(c, d, e, a, b, 23);
   11ac4:	e0253004 	eor	r3, r5, r4
    R2(c, d, e, a, b, 38);
   11ac8:	e58d002c 	str	r0, [sp, #44]	; 0x2c
   11acc:	e08a000c 	add	r0, sl, ip
    R2(b, c, d, e, a, 39);
   11ad0:	e59d6030 	ldr	r6, [sp, #48]	; 0x30
    R2(c, d, e, a, b, 23);
   11ad4:	e023300e 	eor	r3, r3, lr
   11ad8:	e0802002 	add	r2, r0, r2
   11adc:	e0832002 	add	r2, r3, r2
    R2(b, c, d, e, a, 39);
   11ae0:	e59d3010 	ldr	r3, [sp, #16]
    R2(d, e, a, b, c, 22);
   11ae4:	e0811dee 	add	r1, r1, lr, ror #27
    R2(b, c, d, e, a, 39);
   11ae8:	e02aa006 	eor	sl, sl, r6
    R2(c, d, e, a, b, 23);
   11aec:	e1a0e16e 	ror	lr, lr, #2
    R2(b, c, d, e, a, 39);
   11af0:	e02a0003 	eor	r0, sl, r3
    R2(b, c, d, e, a, 24);
   11af4:	e024300e 	eor	r3, r4, lr
   11af8:	e08ba00c 	add	sl, fp, ip
   11afc:	e08aa005 	add	sl, sl, r5
   11b00:	e0233001 	eor	r3, r3, r1
   11b04:	e083300a 	add	r3, r3, sl
    R3(a, b, c, d, e, 40);
   11b08:	e59da020 	ldr	sl, [sp, #32]
   11b0c:	e59d5014 	ldr	r5, [sp, #20]
    R2(c, d, e, a, b, 23);
   11b10:	e0822de1 	add	r2, r2, r1, ror #27
    R3(a, b, c, d, e, 40);
   11b14:	e02bb00a 	eor	fp, fp, sl
   11b18:	e1a0a006 	mov	sl, r6
    R2(b, c, d, e, a, 24);
   11b1c:	e1a01161 	ror	r1, r1, #2
   11b20:	e086600c 	add	r6, r6, ip
    R3(a, b, c, d, e, 40);
   11b24:	e02bb005 	eor	fp, fp, r5
    R2(a, b, c, d, e, 25);
   11b28:	e02e5001 	eor	r5, lr, r1
   11b2c:	e0864004 	add	r4, r6, r4
   11b30:	e0255002 	eor	r5, r5, r2
   11b34:	e0855004 	add	r5, r5, r4
    R3(e, a, b, c, d, 41);
   11b38:	e59d4004 	ldr	r4, [sp, #4]
   11b3c:	e59d602c 	ldr	r6, [sp, #44]	; 0x2c
   11b40:	e02aa004 	eor	sl, sl, r4
   11b44:	e59d4018 	ldr	r4, [sp, #24]
    R2(b, c, d, e, a, 39);
   11b48:	e0200009 	eor	r0, r0, r9
    R3(e, a, b, c, d, 41);
   11b4c:	e02aa004 	eor	sl, sl, r4
   11b50:	e02aa006 	eor	sl, sl, r6
    R2(b, c, d, e, a, 39);
   11b54:	e1a00fe0 	ror	r0, r0, #31
    R3(e, a, b, c, d, 41);
   11b58:	e1a06fea 	ror	r6, sl, #31
   11b5c:	e59da020 	ldr	sl, [sp, #32]
   11b60:	e58d601c 	str	r6, [sp, #28]
   11b64:	e08a600c 	add	r6, sl, ip
   11b68:	e086e00e 	add	lr, r6, lr
    R3(d, e, a, b, c, 42);
   11b6c:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
    R2(b, c, d, e, a, 24);
   11b70:	e0833de2 	add	r3, r3, r2, ror #27
    R3(d, e, a, b, c, 42);
   11b74:	e02aa006 	eor	sl, sl, r6
   11b78:	e02aa008 	eor	sl, sl, r8
   11b7c:	e02aa000 	eor	sl, sl, r0
    R2(a, b, c, d, e, 25);
   11b80:	e1a02162 	ror	r2, r2, #2
    R3(d, e, a, b, c, 42);
   11b84:	e1a0afea 	ror	sl, sl, #31
   11b88:	e58da020 	str	sl, [sp, #32]
    R2(e, a, b, c, d, 26);
   11b8c:	e0214002 	eor	r4, r1, r2
   11b90:	e59da004 	ldr	sl, [sp, #4]
    R2(a, b, c, d, e, 25);
   11b94:	e0855de3 	add	r5, r5, r3, ror #27
    R2(e, a, b, c, d, 26);
   11b98:	e0244003 	eor	r4, r4, r3
   11b9c:	e1a03163 	ror	r3, r3, #2
   11ba0:	e08aa00c 	add	sl, sl, ip
   11ba4:	e084400e 	add	r4, r4, lr
    R2(d, e, a, b, c, 27);
   11ba8:	e022e003 	eor	lr, r2, r3
   11bac:	e02ee005 	eor	lr, lr, r5
   11bb0:	e08a1001 	add	r1, sl, r1
   11bb4:	e08e1001 	add	r1, lr, r1
    R3(c, d, e, a, b, 43);
   11bb8:	e99d4400 	ldmib	sp, {sl, lr}
    R3(a, b, c, d, e, 40);
   11bbc:	e02bb007 	eor	fp, fp, r7
    R3(c, d, e, a, b, 43);
   11bc0:	e02ea00a 	eor	sl, lr, sl
   11bc4:	e59de028 	ldr	lr, [sp, #40]	; 0x28
    R3(a, b, c, d, e, 40);
   11bc8:	e1a0bfeb 	ror	fp, fp, #31
    R3(c, d, e, a, b, 43);
   11bcc:	e02aa00e 	eor	sl, sl, lr
   11bd0:	e02aa00b 	eor	sl, sl, fp
    R2(e, a, b, c, d, 26);
   11bd4:	e0844de5 	add	r4, r4, r5, ror #27
    R3(c, d, e, a, b, 43);
   11bd8:	e1a0afea 	ror	sl, sl, #31
   11bdc:	e58da000 	str	sl, [sp]
   11be0:	e1a0a006 	mov	sl, r6
    R2(d, e, a, b, c, 27);
   11be4:	e1a05165 	ror	r5, r5, #2
   11be8:	e086600c 	add	r6, r6, ip
    R2(c, d, e, a, b, 28);
   11bec:	e023e005 	eor	lr, r3, r5
   11bf0:	e0862002 	add	r2, r6, r2
    R3(b, c, d, e, a, 44);
   11bf4:	e59d600c 	ldr	r6, [sp, #12]
    R2(c, d, e, a, b, 28);
   11bf8:	e02ee004 	eor	lr, lr, r4
   11bfc:	e08e2002 	add	r2, lr, r2
    R3(b, c, d, e, a, 44);
   11c00:	e02ae006 	eor	lr, sl, r6
   11c04:	e59d601c 	ldr	r6, [sp, #28]
   11c08:	e02ee009 	eor	lr, lr, r9
   11c0c:	e02ee006 	eor	lr, lr, r6
   11c10:	e59da008 	ldr	sl, [sp, #8]
   11c14:	e1a06fee 	ror	r6, lr, #31
    R2(d, e, a, b, c, 27);
   11c18:	e0811de4 	add	r1, r1, r4, ror #27
    R3(b, c, d, e, a, 44);
   11c1c:	e58d6024 	str	r6, [sp, #36]	; 0x24
    R2(c, d, e, a, b, 28);
   11c20:	e1a04164 	ror	r4, r4, #2
   11c24:	e08a600c 	add	r6, sl, ip
    R2(b, c, d, e, a, 29);
   11c28:	e025e004 	eor	lr, r5, r4
   11c2c:	e0863003 	add	r3, r6, r3
    R3(a, b, c, d, e, 45);
   11c30:	e59d6010 	ldr	r6, [sp, #16]
    R2(b, c, d, e, a, 29);
   11c34:	e02ee001 	eor	lr, lr, r1
   11c38:	e08e3003 	add	r3, lr, r3
    R3(a, b, c, d, e, 45);
   11c3c:	e02ae006 	eor	lr, sl, r6
   11c40:	e59da020 	ldr	sl, [sp, #32]
   11c44:	e02ee007 	eor	lr, lr, r7
   11c48:	e02ee00a 	eor	lr, lr, sl
   11c4c:	e59da00c 	ldr	sl, [sp, #12]
    R2(c, d, e, a, b, 28);
   11c50:	e0822de1 	add	r2, r2, r1, ror #27
    R2(b, c, d, e, a, 29);
   11c54:	e08a600c 	add	r6, sl, ip
   11c58:	e1a01161 	ror	r1, r1, #2
    R3(a, b, c, d, e, 45);
   11c5c:	e1a0efee 	ror	lr, lr, #31
   11c60:	e58de004 	str	lr, [sp, #4]
   11c64:	e0865005 	add	r5, r6, r5
    R2(a, b, c, d, e, 30);
   11c68:	e024e001 	eor	lr, r4, r1
    R3(e, a, b, c, d, 46);
   11c6c:	e59d6014 	ldr	r6, [sp, #20]
    R2(a, b, c, d, e, 30);
   11c70:	e02ee002 	eor	lr, lr, r2
   11c74:	e08e5005 	add	r5, lr, r5
    R3(e, a, b, c, d, 46);
   11c78:	e02ae006 	eor	lr, sl, r6
   11c7c:	e59da02c 	ldr	sl, [sp, #44]	; 0x2c
    R2(b, c, d, e, a, 29);
   11c80:	e0833de2 	add	r3, r3, r2, ror #27
    R3(e, a, b, c, d, 46);
   11c84:	e02ee00a 	eor	lr, lr, sl
   11c88:	e59da000 	ldr	sl, [sp]
    R2(a, b, c, d, e, 30);
   11c8c:	e1a02162 	ror	r2, r2, #2
    R3(e, a, b, c, d, 46);
   11c90:	e02ee00a 	eor	lr, lr, sl
    R2(a, b, c, d, e, 30);
   11c94:	e0855de3 	add	r5, r5, r3, ror #27
    R3(e, a, b, c, d, 46);
   11c98:	e1a0afee 	ror	sl, lr, #31
   11c9c:	e58da030 	str	sl, [sp, #48]	; 0x30
   11ca0:	e59da010 	ldr	sl, [sp, #16]
    R2(e, a, b, c, d, 31);
   11ca4:	e021e002 	eor	lr, r1, r2
   11ca8:	e08a600c 	add	r6, sl, ip
   11cac:	e0864004 	add	r4, r6, r4
    R3(d, e, a, b, c, 47);
   11cb0:	e59d6018 	ldr	r6, [sp, #24]
    R2(e, a, b, c, d, 31);
   11cb4:	e02ee003 	eor	lr, lr, r3
   11cb8:	e08e4004 	add	r4, lr, r4
    R3(d, e, a, b, c, 47);
   11cbc:	e02ae006 	eor	lr, sl, r6
   11cc0:	e59da024 	ldr	sl, [sp, #36]	; 0x24
   11cc4:	e02ee000 	eor	lr, lr, r0
   11cc8:	e02ee00a 	eor	lr, lr, sl
    R2(e, a, b, c, d, 31);
   11ccc:	e1a03163 	ror	r3, r3, #2
    R3(d, e, a, b, c, 47);
   11cd0:	e1a06fee 	ror	r6, lr, #31
   11cd4:	e59de014 	ldr	lr, [sp, #20]
    R2(d, e, a, b, c, 32);
   11cd8:	e022a003 	eor	sl, r2, r3
    R3(d, e, a, b, c, 47);
   11cdc:	e58d6034 	str	r6, [sp, #52]	; 0x34
   11ce0:	e08e600c 	add	r6, lr, ip
   11ce4:	e0861001 	add	r1, r6, r1
    R2(d, e, a, b, c, 32);
   11ce8:	e02aa005 	eor	sl, sl, r5
    R3(c, d, e, a, b, 48);
   11cec:	e02e6008 	eor	r6, lr, r8
   11cf0:	e08aa001 	add	sl, sl, r1
   11cf4:	e59d1004 	ldr	r1, [sp, #4]
   11cf8:	e026600b 	eor	r6, r6, fp
   11cfc:	e0266001 	eor	r6, r6, r1
    R2(e, a, b, c, d, 31);
   11d00:	e0844de5 	add	r4, r4, r5, ror #27
    R3(c, d, e, a, b, 48);
   11d04:	e1a01fe6 	ror	r1, r6, #31
    R2(d, e, a, b, c, 32);
   11d08:	e1a05165 	ror	r5, r5, #2
    R3(c, d, e, a, b, 48);
   11d0c:	e58d1038 	str	r1, [sp, #56]	; 0x38
    R2(c, d, e, a, b, 33);
   11d10:	e0231005 	eor	r1, r3, r5
    R2(d, e, a, b, c, 32);
   11d14:	e08aade4 	add	sl, sl, r4, ror #27
    R2(c, d, e, a, b, 33);
   11d18:	e0211004 	eor	r1, r1, r4
   11d1c:	e1a04164 	ror	r4, r4, #2
   11d20:	e58d4008 	str	r4, [sp, #8]
   11d24:	e59d4018 	ldr	r4, [sp, #24]
    R3(b, c, d, e, a, 49);
   11d28:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
   11d2c:	e084e00c 	add	lr, r4, ip
   11d30:	e08e2002 	add	r2, lr, r2
   11d34:	e0811002 	add	r1, r1, r2
   11d38:	e59d201c 	ldr	r2, [sp, #28]
   11d3c:	e0244006 	eor	r4, r4, r6
   11d40:	e0244002 	eor	r4, r4, r2
   11d44:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
    R2(b, c, d, e, a, 34);
   11d48:	e59de008 	ldr	lr, [sp, #8]
    R3(b, c, d, e, a, 49);
   11d4c:	e0244002 	eor	r4, r4, r2
    R2(b, c, d, e, a, 34);
   11d50:	e025200e 	eor	r2, r5, lr
    R3(b, c, d, e, a, 49);
   11d54:	e1a04fe4 	ror	r4, r4, #31
   11d58:	e58d4028 	str	r4, [sp, #40]	; 0x28
   11d5c:	e088400c 	add	r4, r8, ip
   11d60:	e0843003 	add	r3, r4, r3
    R2(b, c, d, e, a, 34);
   11d64:	e022200a 	eor	r2, r2, sl
   11d68:	e0822003 	add	r2, r2, r3
    R3(a, b, c, d, e, 50);
   11d6c:	e59d3020 	ldr	r3, [sp, #32]
   11d70:	e0284009 	eor	r4, r8, r9
   11d74:	e0244003 	eor	r4, r4, r3
   11d78:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
    R2(c, d, e, a, b, 33);
   11d7c:	e0811dea 	add	r1, r1, sl, ror #27
    R3(a, b, c, d, e, 50);
   11d80:	e0244003 	eor	r4, r4, r3
    R2(b, c, d, e, a, 34);
   11d84:	e1a0a16a 	ror	sl, sl, #2
    R2(a, b, c, d, e, 35);
   11d88:	e02e300a 	eor	r3, lr, sl
    R2(b, c, d, e, a, 34);
   11d8c:	e0822de1 	add	r2, r2, r1, ror #27
    R3(a, b, c, d, e, 50);
   11d90:	e1a08fe4 	ror	r8, r4, #31
    R2(a, b, c, d, e, 35);
   11d94:	e1a0400e 	mov	r4, lr
   11d98:	e0233001 	eor	r3, r3, r1
   11d9c:	e1a0e161 	ror	lr, r1, #2
   11da0:	e1a01006 	mov	r1, r6
   11da4:	e086600c 	add	r6, r6, ip
   11da8:	e0865005 	add	r5, r6, r5
   11dac:	e0835005 	add	r5, r3, r5
    R3(e, a, b, c, d, 51);
   11db0:	e0213007 	eor	r3, r1, r7
   11db4:	e59d1000 	ldr	r1, [sp]
   11db8:	e59d6038 	ldr	r6, [sp, #56]	; 0x38
   11dbc:	e0233001 	eor	r3, r3, r1
   11dc0:	e0233006 	eor	r3, r3, r6
   11dc4:	e089100c 	add	r1, r9, ip
   11dc8:	e1a06fe3 	ror	r6, r3, #31
   11dcc:	e58d6040 	str	r6, [sp, #64]	; 0x40
    R2(e, a, b, c, d, 36);
   11dd0:	e02a600e 	eor	r6, sl, lr
   11dd4:	e0814004 	add	r4, r1, r4
   11dd8:	e0266002 	eor	r6, r6, r2
   11ddc:	e0866004 	add	r6, r6, r4
    R3(d, e, a, b, c, 52);
   11de0:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
    R3(a, b, c, d, e, 50);
   11de4:	e58d803c 	str	r8, [sp, #60]	; 0x3c
    R3(d, e, a, b, c, 52);
   11de8:	e59d8024 	ldr	r8, [sp, #36]	; 0x24
   11dec:	e0291004 	eor	r1, r9, r4
   11df0:	e59d9028 	ldr	r9, [sp, #40]	; 0x28
   11df4:	e0211008 	eor	r1, r1, r8
   11df8:	e0211009 	eor	r1, r1, r9
    R2(a, b, c, d, e, 35);
   11dfc:	e0855de2 	add	r5, r5, r2, ror #27
    R3(d, e, a, b, c, 52);
   11e00:	e1a09fe1 	ror	r9, r1, #31
   11e04:	e58d902c 	str	r9, [sp, #44]	; 0x2c
   11e08:	e087100c 	add	r1, r7, ip
    R3(c, d, e, a, b, 53);
   11e0c:	e59d9004 	ldr	r9, [sp, #4]
   11e10:	e081a00a 	add	sl, r1, sl
   11e14:	e0277000 	eor	r7, r7, r0
   11e18:	e59d103c 	ldr	r1, [sp, #60]	; 0x3c
   11e1c:	e0277009 	eor	r7, r7, r9
    R2(e, a, b, c, d, 36);
   11e20:	e1a02162 	ror	r2, r2, #2
    R3(c, d, e, a, b, 53);
   11e24:	e0277001 	eor	r7, r7, r1
    R2(d, e, a, b, c, 37);
   11e28:	e02e3002 	eor	r3, lr, r2
    R2(e, a, b, c, d, 36);
   11e2c:	e0866de5 	add	r6, r6, r5, ror #27
    R3(c, d, e, a, b, 53);
   11e30:	e1a01fe7 	ror	r1, r7, #31
    R2(d, e, a, b, c, 37);
   11e34:	e0233005 	eor	r3, r3, r5
    R3(c, d, e, a, b, 53);
   11e38:	e1a09001 	mov	r9, r1
    R3(b, c, d, e, a, 54);
    R3(a, b, c, d, e, 55);
   11e3c:	e59d701c 	ldr	r7, [sp, #28]
    R2(d, e, a, b, c, 37);
   11e40:	e1a05165 	ror	r5, r5, #2
   11e44:	e083300a 	add	r3, r3, sl
   11e48:	e084100c 	add	r1, r4, ip
   11e4c:	e080c00c 	add	ip, r0, ip
   11e50:	e0838de6 	add	r8, r3, r6, ror #27
    R2(c, d, e, a, b, 38);
   11e54:	e0223005 	eor	r3, r2, r5
   11e58:	e08c2002 	add	r2, ip, r2
    R3(a, b, c, d, e, 55);
   11e5c:	e59dc034 	ldr	ip, [sp, #52]	; 0x34
   11e60:	e0200007 	eor	r0, r0, r7
    R2(c, d, e, a, b, 38);
   11e64:	e0233006 	eor	r3, r3, r6
    R3(b, c, d, e, a, 54);
   11e68:	e024a00b 	eor	sl, r4, fp
   11e6c:	e081100e 	add	r1, r1, lr
   11e70:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
    R3(a, b, c, d, e, 55);
   11e74:	e020000c 	eor	r0, r0, ip
   11e78:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
    R2(c, d, e, a, b, 38);
   11e7c:	e1a06166 	ror	r6, r6, #2
   11e80:	e0831001 	add	r1, r3, r1
    R3(b, c, d, e, a, 54);
   11e84:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
   11e88:	e02aa004 	eor	sl, sl, r4
    R3(a, b, c, d, e, 55);
   11e8c:	e020000c 	eor	r0, r0, ip
    R2(b, c, d, e, a, 39);
   11e90:	e025c006 	eor	ip, r5, r6
    R2(c, d, e, a, b, 38);
   11e94:	e0811de8 	add	r1, r1, r8, ror #27
    R3(b, c, d, e, a, 54);
   11e98:	e02aa003 	eor	sl, sl, r3
    R2(b, c, d, e, a, 39);
   11e9c:	e02cc008 	eor	ip, ip, r8
    R3(a, b, c, d, e, 55);
   11ea0:	e1a00fe0 	ror	r0, r0, #31
    R2(b, c, d, e, a, 39);
   11ea4:	e1a08168 	ror	r8, r8, #2
   11ea8:	e08c2002 	add	r2, ip, r2
   11eac:	e082cde1 	add	ip, r2, r1, ror #27
    R3(a, b, c, d, e, 40);
   11eb0:	e30b2cdc 	movw	r2, #48348	; 0xbcdc
    R3(b, c, d, e, a, 54);
   11eb4:	e1a04fea 	ror	r4, sl, #31
    R3(a, b, c, d, e, 55);
   11eb8:	e58d0008 	str	r0, [sp, #8]
    R3(b, c, d, e, a, 54);
   11ebc:	e1a0e004 	mov	lr, r4
    R3(a, b, c, d, e, 40);
   11ec0:	e1810008 	orr	r0, r1, r8
   11ec4:	e3482f1b 	movt	r2, #36635	; 0x8f1b
   11ec8:	e0000006 	and	r0, r0, r6
   11ecc:	e1a04161 	ror	r4, r1, #2
   11ed0:	e0011008 	and	r1, r1, r8
   11ed4:	e1801001 	orr	r1, r0, r1
   11ed8:	e08b0002 	add	r0, fp, r2
   11edc:	e0805005 	add	r5, r0, r5
   11ee0:	e0811005 	add	r1, r1, r5
    R3(e, a, b, c, d, 56);
   11ee4:	e59d5020 	ldr	r5, [sp, #32]
   11ee8:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
    R3(e, a, b, c, d, 41);
   11eec:	e18c0004 	orr	r0, ip, r4
    R3(e, a, b, c, d, 56);
   11ef0:	e02bb005 	eor	fp, fp, r5
    R3(e, a, b, c, d, 41);
   11ef4:	e0000008 	and	r0, r0, r8
    R3(e, a, b, c, d, 56);
   11ef8:	e02bb003 	eor	fp, fp, r3
    R3(e, a, b, c, d, 41);
   11efc:	e00c3004 	and	r3, ip, r4
   11f00:	e1800003 	orr	r0, r0, r3
   11f04:	e0873002 	add	r3, r7, r2
   11f08:	e0836006 	add	r6, r3, r6
    R3(d, e, a, b, c, 57);
   11f0c:	e59d3000 	ldr	r3, [sp]
    R3(a, b, c, d, e, 40);
   11f10:	e0811dec 	add	r1, r1, ip, ror #27
    R3(e, a, b, c, d, 41);
   11f14:	e1a0c16c 	ror	ip, ip, #2
    R3(d, e, a, b, c, 57);
   11f18:	e027a003 	eor	sl, r7, r3
   11f1c:	e0800006 	add	r0, r0, r6
    R3(d, e, a, b, c, 42);
   11f20:	e181300c 	orr	r3, r1, ip
    R3(d, e, a, b, c, 57);
   11f24:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
    R3(d, e, a, b, c, 42);
   11f28:	e0033004 	and	r3, r3, r4
    R3(e, a, b, c, d, 41);
   11f2c:	e0800de1 	add	r0, r0, r1, ror #27
    R3(e, a, b, c, d, 56);
   11f30:	e58d9020 	str	r9, [sp, #32]
   11f34:	e02bb009 	eor	fp, fp, r9
    R3(d, e, a, b, c, 42);
   11f38:	e1a09161 	ror	r9, r1, #2
   11f3c:	e001100c 	and	r1, r1, ip
    R3(d, e, a, b, c, 57);
   11f40:	e02aa006 	eor	sl, sl, r6
    R3(d, e, a, b, c, 42);
   11f44:	e1831001 	orr	r1, r3, r1
   11f48:	e0853002 	add	r3, r5, r2
   11f4c:	e0838008 	add	r8, r3, r8
    R3(d, e, a, b, c, 57);
   11f50:	e02aa00e 	eor	sl, sl, lr
   11f54:	e58de044 	str	lr, [sp, #68]	; 0x44
   11f58:	e0811008 	add	r1, r1, r8
    R3(c, d, e, a, b, 58);
   11f5c:	e59d8024 	ldr	r8, [sp, #36]	; 0x24
   11f60:	e59d703c 	ldr	r7, [sp, #60]	; 0x3c
    R3(d, e, a, b, c, 57);
   11f64:	e1a0afea 	ror	sl, sl, #31
   11f68:	e58da00c 	str	sl, [sp, #12]
    R3(c, d, e, a, b, 58);
   11f6c:	e59d6008 	ldr	r6, [sp, #8]
   11f70:	e025a008 	eor	sl, r5, r8
    R3(c, d, e, a, b, 43);
   11f74:	e1805009 	orr	r5, r0, r9
   11f78:	e0003009 	and	r3, r0, r9
   11f7c:	e005500c 	and	r5, r5, ip
    R3(c, d, e, a, b, 58);
   11f80:	e02aa007 	eor	sl, sl, r7
   11f84:	e02ae006 	eor	lr, sl, r6
    R3(c, d, e, a, b, 43);
   11f88:	e1855003 	orr	r5, r5, r3
   11f8c:	e59d3000 	ldr	r3, [sp]
    R3(c, d, e, a, b, 58);
   11f90:	e1a0afee 	ror	sl, lr, #31
   11f94:	e083e002 	add	lr, r3, r2
   11f98:	e08ee004 	add	lr, lr, r4
    R3(b, c, d, e, a, 59);
   11f9c:	e59d4004 	ldr	r4, [sp, #4]
    R3(c, d, e, a, b, 58);
   11fa0:	e58da010 	str	sl, [sp, #16]
    R3(b, c, d, e, a, 59);
   11fa4:	e023a004 	eor	sl, r3, r4
   11fa8:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
    R3(e, a, b, c, d, 56);
   11fac:	e1a0bfeb 	ror	fp, fp, #31
    R3(b, c, d, e, a, 59);
   11fb0:	e02aa003 	eor	sl, sl, r3
    R3(d, e, a, b, c, 42);
   11fb4:	e0811de0 	add	r1, r1, r0, ror #27
    R3(b, c, d, e, a, 59);
   11fb8:	e02a700b 	eor	r7, sl, fp
    R3(c, d, e, a, b, 43);
   11fbc:	e1a00160 	ror	r0, r0, #2
    R4(a, b, c, d, e, 60);
   11fc0:	e59da030 	ldr	sl, [sp, #48]	; 0x30
   11fc4:	e085500e 	add	r5, r5, lr
    R3(b, c, d, e, a, 44);
   11fc8:	e181e000 	orr	lr, r1, r0
   11fcc:	e1a06161 	ror	r6, r1, #2
   11fd0:	e00ee009 	and	lr, lr, r9
    R3(c, d, e, a, b, 43);
   11fd4:	e0855de1 	add	r5, r5, r1, ror #27
    R3(b, c, d, e, a, 44);
   11fd8:	e0011000 	and	r1, r1, r0
    R4(a, b, c, d, e, 60);
   11fdc:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
    R3(b, c, d, e, a, 59);
   11fe0:	e1a03fe7 	ror	r3, r7, #31
   11fe4:	e58d3014 	str	r3, [sp, #20]
    R3(b, c, d, e, a, 44);
   11fe8:	e18e1001 	orr	r1, lr, r1
   11fec:	e0883002 	add	r3, r8, r2
    R4(a, b, c, d, e, 60);
   11ff0:	e028e00a 	eor	lr, r8, sl
   11ff4:	e59d800c 	ldr	r8, [sp, #12]
   11ff8:	e02ee004 	eor	lr, lr, r4
   11ffc:	e02e4008 	eor	r4, lr, r8
   12000:	e083c00c 	add	ip, r3, ip
   12004:	e081100c 	add	r1, r1, ip
    R3(a, b, c, d, e, 45);
   12008:	e1853006 	orr	r3, r5, r6
    R4(a, b, c, d, e, 60);
   1200c:	e1a0cfe4 	ror	ip, r4, #31
    R3(a, b, c, d, e, 45);
   12010:	e0033000 	and	r3, r3, r0
    R4(a, b, c, d, e, 60);
   12014:	e58dc000 	str	ip, [sp]
    R3(a, b, c, d, e, 45);
   12018:	e005c006 	and	ip, r5, r6
   1201c:	e183300c 	orr	r3, r3, ip
   12020:	e59dc004 	ldr	ip, [sp, #4]
    R4(e, a, b, c, d, 61);
   12024:	e59d4010 	ldr	r4, [sp, #16]
   12028:	e08c7002 	add	r7, ip, r2
   1202c:	e0877009 	add	r7, r7, r9
   12030:	e0833007 	add	r3, r3, r7
   12034:	e59d7034 	ldr	r7, [sp, #52]	; 0x34
    R3(b, c, d, e, a, 44);
   12038:	e0811de5 	add	r1, r1, r5, ror #27
    R4(e, a, b, c, d, 61);
   1203c:	e02ce007 	eor	lr, ip, r7
   12040:	e59dc020 	ldr	ip, [sp, #32]
    R3(a, b, c, d, e, 45);
   12044:	e1a05165 	ror	r5, r5, #2
    R4(e, a, b, c, d, 61);
   12048:	e02ee00c 	eor	lr, lr, ip
   1204c:	e02ee004 	eor	lr, lr, r4
    R4(d, e, a, b, c, 62);
   12050:	e59d8038 	ldr	r8, [sp, #56]	; 0x38
    R4(e, a, b, c, d, 61);
   12054:	e1a04fee 	ror	r4, lr, #31
    R3(e, a, b, c, d, 46);
   12058:	e181e005 	orr	lr, r1, r5
    R3(a, b, c, d, e, 45);
   1205c:	e0833de1 	add	r3, r3, r1, ror #27
    R3(e, a, b, c, d, 46);
   12060:	e00ee006 	and	lr, lr, r6
   12064:	e08ac002 	add	ip, sl, r2
    R4(e, a, b, c, d, 61);
   12068:	e58d4004 	str	r4, [sp, #4]
    R3(e, a, b, c, d, 46);
   1206c:	e1a04161 	ror	r4, r1, #2
   12070:	e0011005 	and	r1, r1, r5
   12074:	e18e1001 	orr	r1, lr, r1
   12078:	e08c0000 	add	r0, ip, r0
    R4(d, e, a, b, c, 62);
   1207c:	e02ae008 	eor	lr, sl, r8
   12080:	e59da044 	ldr	sl, [sp, #68]	; 0x44
   12084:	e0810000 	add	r0, r1, r0
   12088:	e59d1014 	ldr	r1, [sp, #20]
   1208c:	e02ee00a 	eor	lr, lr, sl
   12090:	e02ee001 	eor	lr, lr, r1
    R3(d, e, a, b, c, 47);
   12094:	e183c004 	orr	ip, r3, r4
    R4(d, e, a, b, c, 62);
   12098:	e1a01fee 	ror	r1, lr, #31
    R3(d, e, a, b, c, 47);
   1209c:	e00cc005 	and	ip, ip, r5
    R4(d, e, a, b, c, 62);
   120a0:	e58d1018 	str	r1, [sp, #24]
    R3(d, e, a, b, c, 47);
   120a4:	e0031004 	and	r1, r3, r4
    R4(c, d, e, a, b, 63);
   120a8:	e59d9028 	ldr	r9, [sp, #40]	; 0x28
    R3(d, e, a, b, c, 47);
   120ac:	e18cc001 	orr	ip, ip, r1
   120b0:	e0871002 	add	r1, r7, r2
   120b4:	e0811006 	add	r1, r1, r6
    R4(c, d, e, a, b, 63);
   120b8:	e59d6008 	ldr	r6, [sp, #8]
   120bc:	e027e009 	eor	lr, r7, r9
   120c0:	e08c1001 	add	r1, ip, r1
   120c4:	e59dc000 	ldr	ip, [sp]
   120c8:	e02ee006 	eor	lr, lr, r6
   120cc:	e02ee00c 	eor	lr, lr, ip
    R3(e, a, b, c, d, 46);
   120d0:	e0800de3 	add	r0, r0, r3, ror #27
    R3(d, e, a, b, c, 47);
   120d4:	e1a03163 	ror	r3, r3, #2
    R4(c, d, e, a, b, 63);
   120d8:	e1a06fee 	ror	r6, lr, #31
    R3(c, d, e, a, b, 48);
   120dc:	e180e003 	orr	lr, r0, r3
   120e0:	e1a0c160 	ror	ip, r0, #2
   120e4:	e00ee004 	and	lr, lr, r4
    R3(d, e, a, b, c, 47);
   120e8:	e0811de0 	add	r1, r1, r0, ror #27
    R3(c, d, e, a, b, 48);
   120ec:	e0000003 	and	r0, r0, r3
    R4(b, c, d, e, a, 64);
   120f0:	e59d703c 	ldr	r7, [sp, #60]	; 0x3c
    R3(c, d, e, a, b, 48);
   120f4:	e18e0000 	orr	r0, lr, r0
   120f8:	e088e002 	add	lr, r8, r2
   120fc:	e08e5005 	add	r5, lr, r5
    R4(c, d, e, a, b, 63);
   12100:	e58d601c 	str	r6, [sp, #28]
   12104:	e0805005 	add	r5, r0, r5
    R4(b, c, d, e, a, 64);
   12108:	e0286007 	eor	r6, r8, r7
   1210c:	e59d0004 	ldr	r0, [sp, #4]
   12110:	e026600b 	eor	r6, r6, fp
   12114:	e026e000 	eor	lr, r6, r0
    R3(b, c, d, e, a, 49);
   12118:	e001a00c 	and	sl, r1, ip
    R4(b, c, d, e, a, 64);
   1211c:	e1a00fee 	ror	r0, lr, #31
   12120:	e58d0024 	str	r0, [sp, #36]	; 0x24
   12124:	e58d0060 	str	r0, [sp, #96]	; 0x60
    R3(b, c, d, e, a, 49);
   12128:	e181000c 	orr	r0, r1, ip
    R4(a, b, c, d, e, 65);
   1212c:	e59d8040 	ldr	r8, [sp, #64]	; 0x40
    R3(b, c, d, e, a, 49);
   12130:	e0000003 	and	r0, r0, r3
   12134:	e180000a 	orr	r0, r0, sl
   12138:	e089a002 	add	sl, r9, r2
   1213c:	e08aa004 	add	sl, sl, r4
   12140:	e080a00a 	add	sl, r0, sl
    R4(a, b, c, d, e, 65);
   12144:	e59d000c 	ldr	r0, [sp, #12]
   12148:	e0294008 	eor	r4, r9, r8
   1214c:	e59d9018 	ldr	r9, [sp, #24]
   12150:	e0244000 	eor	r4, r4, r0
   12154:	e0244009 	eor	r4, r4, r9
    R3(c, d, e, a, b, 48);
   12158:	e0855de1 	add	r5, r5, r1, ror #27
    R3(b, c, d, e, a, 49);
   1215c:	e1a01161 	ror	r1, r1, #2
    R4(a, b, c, d, e, 65);
   12160:	e1a09fe4 	ror	r9, r4, #31
    R3(a, b, c, d, e, 50);
   12164:	e185e001 	orr	lr, r5, r1
    R3(b, c, d, e, a, 49);
   12168:	e08aade5 	add	sl, sl, r5, ror #27
    R3(a, b, c, d, e, 50);
   1216c:	e00ee00c 	and	lr, lr, ip
    R4(a, b, c, d, e, 65);
   12170:	e58d9028 	str	r9, [sp, #40]	; 0x28
   12174:	e0870002 	add	r0, r7, r2
   12178:	e58d9064 	str	r9, [sp, #100]	; 0x64
    R3(a, b, c, d, e, 50);
   1217c:	e1a09165 	ror	r9, r5, #2
   12180:	e0055001 	and	r5, r5, r1
   12184:	e18e5005 	orr	r5, lr, r5
   12188:	e0800003 	add	r0, r0, r3
   1218c:	e0850000 	add	r0, r5, r0
    R4(e, a, b, c, d, 66);
   12190:	e59d502c 	ldr	r5, [sp, #44]	; 0x2c
   12194:	e59d3010 	ldr	r3, [sp, #16]
   12198:	e0274005 	eor	r4, r7, r5
   1219c:	e0244003 	eor	r4, r4, r3
   121a0:	e59d701c 	ldr	r7, [sp, #28]
    R3(e, a, b, c, d, 51);
   121a4:	e18a3009 	orr	r3, sl, r9
   121a8:	e00a6009 	and	r6, sl, r9
   121ac:	e0033001 	and	r3, r3, r1
   121b0:	e1833006 	orr	r3, r3, r6
    R4(e, a, b, c, d, 66);
   121b4:	e0244007 	eor	r4, r4, r7
   121b8:	e0886002 	add	r6, r8, r2
   121bc:	e086600c 	add	r6, r6, ip
    R4(d, e, a, b, c, 67);
   121c0:	e59dc020 	ldr	ip, [sp, #32]
   121c4:	e59d7014 	ldr	r7, [sp, #20]
    R4(e, a, b, c, d, 66);
   121c8:	e1a04fe4 	ror	r4, r4, #31
    R3(a, b, c, d, e, 50);
   121cc:	e0800dea 	add	r0, r0, sl, ror #27
    R4(e, a, b, c, d, 66);
   121d0:	e58d402c 	str	r4, [sp, #44]	; 0x2c
    R3(e, a, b, c, d, 51);
   121d4:	e1a0a16a 	ror	sl, sl, #2
    R4(e, a, b, c, d, 66);
   121d8:	e58d4068 	str	r4, [sp, #104]	; 0x68
   121dc:	e0836006 	add	r6, r3, r6
    R4(d, e, a, b, c, 67);
   121e0:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   121e4:	e028300c 	eor	r3, r8, ip
   121e8:	e023c007 	eor	ip, r3, r7
    R4(c, d, e, a, b, 68);
   121ec:	e59d8044 	ldr	r8, [sp, #68]	; 0x44
    R3(d, e, a, b, c, 52);
   121f0:	e180e00a 	orr	lr, r0, sl
   121f4:	e1a07160 	ror	r7, r0, #2
   121f8:	e00ee009 	and	lr, lr, r9
    R3(e, a, b, c, d, 51);
   121fc:	e0866de0 	add	r6, r6, r0, ror #27
    R3(d, e, a, b, c, 52);
   12200:	e000000a 	and	r0, r0, sl
    R4(c, d, e, a, b, 68);
   12204:	e59d3000 	ldr	r3, [sp]
    R4(d, e, a, b, c, 67);
   12208:	e02cc004 	eor	ip, ip, r4
   1220c:	e0854002 	add	r4, r5, r2
    R3(d, e, a, b, c, 52);
   12210:	e18e0000 	orr	r0, lr, r0
   12214:	e0844001 	add	r4, r4, r1
    R4(c, d, e, a, b, 68);
   12218:	e0251008 	eor	r1, r5, r8
   1221c:	e0804004 	add	r4, r0, r4
   12220:	e0210003 	eor	r0, r1, r3
   12224:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   12228:	e59d1020 	ldr	r1, [sp, #32]
   1222c:	e0200003 	eor	r0, r0, r3
    R3(c, d, e, a, b, 53);
   12230:	e1863007 	orr	r3, r6, r7
   12234:	e006e007 	and	lr, r6, r7
   12238:	e003300a 	and	r3, r3, sl
   1223c:	e183300e 	orr	r3, r3, lr
   12240:	e081e002 	add	lr, r1, r2
   12244:	e08ee009 	add	lr, lr, r9
   12248:	e083e00e 	add	lr, r3, lr
    R4(b, c, d, e, a, 69);
   1224c:	e59d3008 	ldr	r3, [sp, #8]
   12250:	e59d9004 	ldr	r9, [sp, #4]
    R3(d, e, a, b, c, 52);
   12254:	e0844de6 	add	r4, r4, r6, ror #27
    R4(b, c, d, e, a, 69);
   12258:	e0213003 	eor	r3, r1, r3
    R3(c, d, e, a, b, 53);
   1225c:	e1a06166 	ror	r6, r6, #2
    R4(b, c, d, e, a, 69);
   12260:	e0235009 	eor	r5, r3, r9
    R3(b, c, d, e, a, 54);
   12264:	e1843006 	orr	r3, r4, r6
   12268:	e1a01164 	ror	r1, r4, #2
   1226c:	e0033007 	and	r3, r3, r7
    R3(c, d, e, a, b, 53);
   12270:	e08eede4 	add	lr, lr, r4, ror #27
    R3(b, c, d, e, a, 54);
   12274:	e0044006 	and	r4, r4, r6
   12278:	e1834004 	orr	r4, r3, r4
   1227c:	e1a03008 	mov	r3, r8
   12280:	e0888002 	add	r8, r8, r2
   12284:	e088800a 	add	r8, r8, sl
   12288:	e0848008 	add	r8, r4, r8
    R4(a, b, c, d, e, 70);
   1228c:	e59d4018 	ldr	r4, [sp, #24]
   12290:	e023a00b 	eor	sl, r3, fp
    R4(d, e, a, b, c, 67);
   12294:	e1a0cfec 	ror	ip, ip, #31
    R4(a, b, c, d, e, 70);
   12298:	e02aa004 	eor	sl, sl, r4
    R4(b, c, d, e, a, 69);
   1229c:	e59d902c 	ldr	r9, [sp, #44]	; 0x2c
    R4(a, b, c, d, e, 70);
   122a0:	e02aa00c 	eor	sl, sl, ip
    R3(a, b, c, d, e, 55);
   122a4:	e18e3001 	orr	r3, lr, r1
    R4(b, c, d, e, a, 69);
   122a8:	e0255009 	eor	r5, r5, r9
    R3(a, b, c, d, e, 55);
   122ac:	e0033006 	and	r3, r3, r6
    R4(a, b, c, d, e, 70);
   122b0:	e1a09fea 	ror	r9, sl, #31
   122b4:	e59da008 	ldr	sl, [sp, #8]
    R3(a, b, c, d, e, 55);
   122b8:	e00e4001 	and	r4, lr, r1
   122bc:	e1833004 	orr	r3, r3, r4
   122c0:	e08a4002 	add	r4, sl, r2
   122c4:	e0844007 	add	r4, r4, r7
   122c8:	e0834004 	add	r4, r3, r4
    R4(e, a, b, c, d, 71);
   122cc:	e59d300c 	ldr	r3, [sp, #12]
    R4(c, d, e, a, b, 68);
   122d0:	e1a00fe0 	ror	r0, r0, #31
    R4(e, a, b, c, d, 71);
   122d4:	e02a3003 	eor	r3, sl, r3
   122d8:	e59da01c 	ldr	sl, [sp, #28]
   122dc:	e08b7002 	add	r7, fp, r2
   122e0:	e023300a 	eor	r3, r3, sl
   122e4:	e0233000 	eor	r3, r3, r0
    R3(b, c, d, e, a, 54);
   122e8:	e0888dee 	add	r8, r8, lr, ror #27
    R3(a, b, c, d, e, 55);
   122ec:	e0877006 	add	r7, r7, r6
   122f0:	e1a0e16e 	ror	lr, lr, #2
    R4(d, e, a, b, c, 72);
   122f4:	e59d6010 	ldr	r6, [sp, #16]
    R4(e, a, b, c, d, 71);
   122f8:	e1a0afe3 	ror	sl, r3, #31
    R3(e, a, b, c, d, 56);
   122fc:	e188300e 	orr	r3, r8, lr
    R3(a, b, c, d, e, 55);
   12300:	e0844de8 	add	r4, r4, r8, ror #27
    R3(e, a, b, c, d, 56);
   12304:	e0033001 	and	r3, r3, r1
    R4(e, a, b, c, d, 71);
   12308:	e58da008 	str	sl, [sp, #8]
   1230c:	e58da07c 	str	sl, [sp, #124]	; 0x7c
    R4(d, e, a, b, c, 72);
   12310:	e02bb006 	eor	fp, fp, r6
    R3(e, a, b, c, d, 56);
   12314:	e1a0a168 	ror	sl, r8, #2
   12318:	e008800e 	and	r8, r8, lr
    R4(d, e, a, b, c, 72);
   1231c:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
    R3(e, a, b, c, d, 56);
   12320:	e1838008 	orr	r8, r3, r8
    R4(b, c, d, e, a, 69);
   12324:	e1a05fe5 	ror	r5, r5, #31
    R3(d, e, a, b, c, 57);
   12328:	e184300a 	orr	r3, r4, sl
   1232c:	e0887007 	add	r7, r8, r7
   12330:	e003300e 	and	r3, r3, lr
   12334:	e59d800c 	ldr	r8, [sp, #12]
    R4(d, e, a, b, c, 72);
   12338:	e02bb006 	eor	fp, fp, r6
   1233c:	e02bb005 	eor	fp, fp, r5
    R3(d, e, a, b, c, 57);
   12340:	e004600a 	and	r6, r4, sl
   12344:	e1833006 	orr	r3, r3, r6
   12348:	e0886002 	add	r6, r8, r2
    R4(d, e, a, b, c, 72);
   1234c:	e1a0bfeb 	ror	fp, fp, #31
   12350:	e0866001 	add	r6, r6, r1
    R4(d, e, a, b, c, 67);
   12354:	e58dc06c 	str	ip, [sp, #108]	; 0x6c
    R4(c, d, e, a, b, 68);
   12358:	e58d0070 	str	r0, [sp, #112]	; 0x70
    R4(b, c, d, e, a, 69);
   1235c:	e58d5074 	str	r5, [sp, #116]	; 0x74
    R4(a, b, c, d, e, 70);
   12360:	e58d9078 	str	r9, [sp, #120]	; 0x78
    R4(d, e, a, b, c, 72);
   12364:	e58db080 	str	fp, [sp, #128]	; 0x80
   12368:	e0836006 	add	r6, r3, r6
    R4(c, d, e, a, b, 73);
   1236c:	e59d3014 	ldr	r3, [sp, #20]
   12370:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
   12374:	e0288003 	eor	r8, r8, r3
   12378:	e0288001 	eor	r8, r8, r1
   1237c:	e0288009 	eor	r8, r8, r9
    R3(e, a, b, c, d, 56);
   12380:	e0877de4 	add	r7, r7, r4, ror #27
    R3(d, e, a, b, c, 57);
   12384:	e1a04164 	ror	r4, r4, #2
    R4(c, d, e, a, b, 73);
   12388:	e1a08fe8 	ror	r8, r8, #31
    R3(c, d, e, a, b, 58);
   1238c:	e1871004 	orr	r1, r7, r4
    R3(d, e, a, b, c, 57);
   12390:	e0866de7 	add	r6, r6, r7, ror #27
    R3(c, d, e, a, b, 58);
   12394:	e001100a 	and	r1, r1, sl
    R4(c, d, e, a, b, 73);
   12398:	e58d800c 	str	r8, [sp, #12]
   1239c:	e58d8084 	str	r8, [sp, #132]	; 0x84
    R3(c, d, e, a, b, 58);
   123a0:	e1a08167 	ror	r8, r7, #2
   123a4:	e0077004 	and	r7, r7, r4
   123a8:	e1817007 	orr	r7, r1, r7
   123ac:	e59d1010 	ldr	r1, [sp, #16]
   123b0:	e0813002 	add	r3, r1, r2
   123b4:	e083300e 	add	r3, r3, lr
   123b8:	e0873003 	add	r3, r7, r3
   123bc:	e59d7014 	ldr	r7, [sp, #20]
   123c0:	e0833de6 	add	r3, r3, r6, ror #27
    R3(b, c, d, e, a, 59);
   123c4:	e0872002 	add	r2, r7, r2
   123c8:	e082200a 	add	r2, r2, sl
    R4(b, c, d, e, a, 74);
   123cc:	e59da000 	ldr	sl, [sp]
   123d0:	e021e00a 	eor	lr, r1, sl
   123d4:	e59da02c 	ldr	sl, [sp, #44]	; 0x2c
    R4(a, b, c, d, e, 75);
   123d8:	e59d1004 	ldr	r1, [sp, #4]
    R4(b, c, d, e, a, 74);
   123dc:	e02ee00a 	eor	lr, lr, sl
   123e0:	e59da008 	ldr	sl, [sp, #8]
    R4(a, b, c, d, e, 75);
   123e4:	e0277001 	eor	r7, r7, r1
    R3(b, c, d, e, a, 59);
   123e8:	e1861008 	orr	r1, r6, r8
    R4(b, c, d, e, a, 74);
   123ec:	e02ee00a 	eor	lr, lr, sl
    R3(b, c, d, e, a, 59);
   123f0:	e0011004 	and	r1, r1, r4
   123f4:	e006a008 	and	sl, r6, r8
   123f8:	e181100a 	orr	r1, r1, sl
   123fc:	e0811002 	add	r1, r1, r2
   12400:	e30c21d6 	movw	r2, #49622	; 0xc1d6
   12404:	e34c2a62 	movt	r2, #51810	; 0xca62
    R4(a, b, c, d, e, 75);
   12408:	e027700c 	eor	r7, r7, ip
   1240c:	e027700b 	eor	r7, r7, fp
   12410:	e08bb002 	add	fp, fp, r2
   12414:	e58db014 	str	fp, [sp, #20]
    R4(e, a, b, c, d, 76);
    R4(d, e, a, b, c, 77);
    R4(c, d, e, a, b, 78);
    R4(b, c, d, e, a, 79);
    /* Add the working vars back into context.state[] */
    state[0] += a;
   12418:	e59db048 	ldr	fp, [sp, #72]	; 0x48
    R3(b, c, d, e, a, 59);
   1241c:	e1a06166 	ror	r6, r6, #2
   12420:	e08cc002 	add	ip, ip, r2
    state[0] += a;
   12424:	e08bb002 	add	fp, fp, r2
   12428:	e58dc010 	str	ip, [sp, #16]
    R4(a, b, c, d, e, 60);
   1242c:	e028c006 	eor	ip, r8, r6
    R3(b, c, d, e, a, 59);
   12430:	e0811de3 	add	r1, r1, r3, ror #27
    R4(a, b, c, d, e, 60);
   12434:	e59da02c 	ldr	sl, [sp, #44]	; 0x2c
   12438:	e02cc003 	eor	ip, ip, r3
    state[0] += a;
   1243c:	e58db02c 	str	fp, [sp, #44]	; 0x2c
    R4(a, b, c, d, e, 60);
   12440:	e1a0b163 	ror	fp, r3, #2
   12444:	e59d3000 	ldr	r3, [sp]
    R4(b, c, d, e, a, 74);
   12448:	e1a0efee 	ror	lr, lr, #31
   1244c:	e0833002 	add	r3, r3, r2
   12450:	e0833004 	add	r3, r3, r4
   12454:	e08cc003 	add	ip, ip, r3
    R4(e, a, b, c, d, 76);
   12458:	e59d4018 	ldr	r4, [sp, #24]
   1245c:	e59d3000 	ldr	r3, [sp]
    R4(a, b, c, d, e, 60);
   12460:	e08ccde1 	add	ip, ip, r1, ror #27
    R4(e, a, b, c, d, 76);
   12464:	e0234004 	eor	r4, r3, r4
   12468:	e0244000 	eor	r4, r4, r0
   1246c:	e0800002 	add	r0, r0, r2
   12470:	e58d0000 	str	r0, [sp]
   12474:	e59d000c 	ldr	r0, [sp, #12]
   12478:	e59d3004 	ldr	r3, [sp, #4]
   1247c:	e0244000 	eor	r4, r4, r0
   12480:	e0800002 	add	r0, r0, r2
   12484:	e58d000c 	str	r0, [sp, #12]
   12488:	e0833002 	add	r3, r3, r2
    R4(e, a, b, c, d, 61);
   1248c:	e026000b 	eor	r0, r6, fp
   12490:	e0833008 	add	r3, r3, r8
   12494:	e0200001 	eor	r0, r0, r1
    R4(d, e, a, b, c, 77);
   12498:	e59d801c 	ldr	r8, [sp, #28]
   1249c:	e0800003 	add	r0, r0, r3
   124a0:	e59d3004 	ldr	r3, [sp, #4]
    R4(e, a, b, c, d, 61);
   124a4:	e1a01161 	ror	r1, r1, #2
    R4(d, e, a, b, c, 77);
   124a8:	e0233008 	eor	r3, r3, r8
   124ac:	e0233005 	eor	r3, r3, r5
   124b0:	e023300e 	eor	r3, r3, lr
   124b4:	e08e8002 	add	r8, lr, r2
   124b8:	e1a03fe3 	ror	r3, r3, #31
   124bc:	e58d8004 	str	r8, [sp, #4]
   124c0:	e59d8018 	ldr	r8, [sp, #24]
    R4(b, c, d, e, a, 74);
   124c4:	e58de088 	str	lr, [sp, #136]	; 0x88
   124c8:	e083e002 	add	lr, r3, r2
    R4(d, e, a, b, c, 77);
   124cc:	e58d3094 	str	r3, [sp, #148]	; 0x94
   124d0:	e58de020 	str	lr, [sp, #32]
    R4(d, e, a, b, c, 62);
   124d4:	e02b3001 	eor	r3, fp, r1
   124d8:	e088e002 	add	lr, r8, r2
   124dc:	e023300c 	eor	r3, r3, ip
   124e0:	e08e6006 	add	r6, lr, r6
   124e4:	e0836006 	add	r6, r3, r6
    R4(c, d, e, a, b, 78);
   124e8:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
    R4(a, b, c, d, e, 75);
   124ec:	e1a07fe7 	ror	r7, r7, #31
    R4(c, d, e, a, b, 78);
   124f0:	e0288003 	eor	r8, r8, r3
   124f4:	e0288009 	eor	r8, r8, r9
   124f8:	e0288007 	eor	r8, r8, r7
    R4(e, a, b, c, d, 76);
   124fc:	e1a04fe4 	ror	r4, r4, #31
    R4(c, d, e, a, b, 78);
   12500:	e1a08fe8 	ror	r8, r8, #31
    R4(a, b, c, d, e, 75);
   12504:	e58d708c 	str	r7, [sp, #140]	; 0x8c
   12508:	e0877002 	add	r7, r7, r2
    R4(e, a, b, c, d, 76);
   1250c:	e58d4090 	str	r4, [sp, #144]	; 0x90
   12510:	e58d7018 	str	r7, [sp, #24]
   12514:	e0887002 	add	r7, r8, r2
   12518:	e58d7024 	str	r7, [sp, #36]	; 0x24
   1251c:	e59d701c 	ldr	r7, [sp, #28]
    R4(e, a, b, c, d, 61);
   12520:	e0800dec 	add	r0, r0, ip, ror #27
    R4(d, e, a, b, c, 62);
   12524:	e083e002 	add	lr, r3, r2
   12528:	e1a0c16c 	ror	ip, ip, #2
   1252c:	e08ee001 	add	lr, lr, r1
   12530:	e0873002 	add	r3, r7, r2
    R4(c, d, e, a, b, 63);
   12534:	e021100c 	eor	r1, r1, ip
   12538:	e083300b 	add	r3, r3, fp
   1253c:	e0211000 	eor	r1, r1, r0
   12540:	e0811003 	add	r1, r1, r3
    R4(b, c, d, e, a, 79);
   12544:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    R4(d, e, a, b, c, 62);
   12548:	e0866de0 	add	r6, r6, r0, ror #27
    R4(c, d, e, a, b, 78);
   1254c:	e58d8098 	str	r8, [sp, #152]	; 0x98
    R4(c, d, e, a, b, 63);
   12550:	e1a00160 	ror	r0, r0, #2
   12554:	e0838002 	add	r8, r3, r2
   12558:	e088800c 	add	r8, r8, ip
    R4(b, c, d, e, a, 64);
   1255c:	e02cc000 	eor	ip, ip, r0
    R4(c, d, e, a, b, 63);
   12560:	e0811de6 	add	r1, r1, r6, ror #27
    R4(b, c, d, e, a, 64);
   12564:	e08aa002 	add	sl, sl, r2
   12568:	e02cc006 	eor	ip, ip, r6
   1256c:	e1a06166 	ror	r6, r6, #2
   12570:	e08aa000 	add	sl, sl, r0
    R4(a, b, c, d, e, 65);
   12574:	e0200006 	eor	r0, r0, r6
   12578:	e0200001 	eor	r0, r0, r1
   1257c:	e08cc00e 	add	ip, ip, lr
   12580:	e0800008 	add	r0, r0, r8
   12584:	e59d8010 	ldr	r8, [sp, #16]
    R4(b, c, d, e, a, 64);
   12588:	e08ccde1 	add	ip, ip, r1, ror #27
    R4(a, b, c, d, e, 65);
   1258c:	e1a01161 	ror	r1, r1, #2
   12590:	e0888006 	add	r8, r8, r6
    R4(b, c, d, e, a, 79);
   12594:	e0277003 	eor	r7, r7, r3
    R4(e, a, b, c, d, 66);
   12598:	e0266001 	eor	r6, r6, r1
   1259c:	e59d3000 	ldr	r3, [sp]
    R4(a, b, c, d, e, 65);
   125a0:	e0800dec 	add	r0, r0, ip, ror #27
    R4(e, a, b, c, d, 66);
   125a4:	e026600c 	eor	r6, r6, ip
   125a8:	e1a0c16c 	ror	ip, ip, #2
   125ac:	e083b001 	add	fp, r3, r1
   125b0:	e086600a 	add	r6, r6, sl
    R4(d, e, a, b, c, 67);
   125b4:	e021100c 	eor	r1, r1, ip
    R4(e, a, b, c, d, 66);
   125b8:	e0866de0 	add	r6, r6, r0, ror #27
    R4(d, e, a, b, c, 67);
   125bc:	e0855002 	add	r5, r5, r2
   125c0:	e0211000 	eor	r1, r1, r0
   125c4:	e1a00160 	ror	r0, r0, #2
   125c8:	e085500c 	add	r5, r5, ip
   125cc:	e0811008 	add	r1, r1, r8
    R4(c, d, e, a, b, 68);
   125d0:	e02cc000 	eor	ip, ip, r0
    R4(d, e, a, b, c, 67);
   125d4:	e0811de6 	add	r1, r1, r6, ror #27
    R4(b, c, d, e, a, 79);
   125d8:	e59d3008 	ldr	r3, [sp, #8]
   125dc:	e0899002 	add	r9, r9, r2
    R4(c, d, e, a, b, 68);
   125e0:	e02cc006 	eor	ip, ip, r6
   125e4:	e1a06166 	ror	r6, r6, #2
   125e8:	e0899000 	add	r9, r9, r0
   125ec:	e08cc00b 	add	ip, ip, fp
    R4(b, c, d, e, a, 69);
   125f0:	e0200006 	eor	r0, r0, r6
    R4(c, d, e, a, b, 68);
   125f4:	e08ccde1 	add	ip, ip, r1, ror #27
    R4(b, c, d, e, a, 69);
   125f8:	e0200001 	eor	r0, r0, r1
    R4(b, c, d, e, a, 79);
   125fc:	e0277003 	eor	r7, r7, r3
    R4(b, c, d, e, a, 69);
   12600:	e1a01161 	ror	r1, r1, #2
   12604:	e0833002 	add	r3, r3, r2
   12608:	e59db014 	ldr	fp, [sp, #20]
   1260c:	e0833006 	add	r3, r3, r6
   12610:	e0800005 	add	r0, r0, r5
    R4(a, b, c, d, e, 70);
   12614:	e0266001 	eor	r6, r6, r1
    R4(b, c, d, e, a, 69);
   12618:	e0800dec 	add	r0, r0, ip, ror #27
    R4(a, b, c, d, e, 70);
   1261c:	e026600c 	eor	r6, r6, ip
   12620:	e1a0c16c 	ror	ip, ip, #2
   12624:	e08bb001 	add	fp, fp, r1
    R4(e, a, b, c, d, 71);
   12628:	e021100c 	eor	r1, r1, ip
   1262c:	e0211000 	eor	r1, r1, r0
   12630:	e0869009 	add	r9, r6, r9
   12634:	e0811003 	add	r1, r1, r3
   12638:	e59d300c 	ldr	r3, [sp, #12]
    R4(a, b, c, d, e, 70);
   1263c:	e0899de0 	add	r9, r9, r0, ror #27
    R4(e, a, b, c, d, 71);
   12640:	e1a00160 	ror	r0, r0, #2
   12644:	e083800c 	add	r8, r3, ip
   12648:	e59d3004 	ldr	r3, [sp, #4]
    R4(d, e, a, b, c, 72);
   1264c:	e02cc000 	eor	ip, ip, r0
    R4(e, a, b, c, d, 71);
   12650:	e0811de9 	add	r1, r1, r9, ror #27
    R4(d, e, a, b, c, 72);
   12654:	e02cc009 	eor	ip, ip, r9
   12658:	e1a09169 	ror	r9, r9, #2
   1265c:	e083e000 	add	lr, r3, r0
   12660:	e59d6018 	ldr	r6, [sp, #24]
   12664:	e08cc00b 	add	ip, ip, fp
    R4(c, d, e, a, b, 73);
   12668:	e0200009 	eor	r0, r0, r9
    R4(d, e, a, b, c, 72);
   1266c:	e08ccde1 	add	ip, ip, r1, ror #27
    R4(c, d, e, a, b, 73);
   12670:	e0200001 	eor	r0, r0, r1
   12674:	e1a01161 	ror	r1, r1, #2
   12678:	e0865009 	add	r5, r6, r9
   1267c:	e0800008 	add	r0, r0, r8
    R4(b, c, d, e, a, 74);
   12680:	e0299001 	eor	r9, r9, r1
    R4(c, d, e, a, b, 73);
   12684:	e0800dec 	add	r0, r0, ip, ror #27
    R4(b, c, d, e, a, 74);
   12688:	e0842002 	add	r2, r4, r2
   1268c:	e029900c 	eor	r9, r9, ip
   12690:	e1a0c16c 	ror	ip, ip, #2
   12694:	e59d3020 	ldr	r3, [sp, #32]
   12698:	e089900e 	add	r9, r9, lr
   1269c:	e0822001 	add	r2, r2, r1
    R4(a, b, c, d, e, 75);
   126a0:	e021100c 	eor	r1, r1, ip
    R4(b, c, d, e, a, 74);
   126a4:	e0899de0 	add	r9, r9, r0, ror #27
    R4(a, b, c, d, e, 75);
   126a8:	e0211000 	eor	r1, r1, r0
   126ac:	e1a00160 	ror	r0, r0, #2
    R4(b, c, d, e, a, 79);
   126b0:	e0277004 	eor	r7, r7, r4
   126b4:	e083300c 	add	r3, r3, ip
   126b8:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   126bc:	e0811005 	add	r1, r1, r5
    R4(e, a, b, c, d, 76);
   126c0:	e02cc000 	eor	ip, ip, r0
    R4(a, b, c, d, e, 75);
   126c4:	e0811de9 	add	r1, r1, r9, ror #27
    R4(e, a, b, c, d, 76);
   126c8:	e02cc009 	eor	ip, ip, r9
   126cc:	e1a09169 	ror	r9, r9, #2
   126d0:	e0848000 	add	r8, r4, r0
   126d4:	e08c2002 	add	r2, ip, r2
    R4(d, e, a, b, c, 77);
   126d8:	e0200009 	eor	r0, r0, r9
    R4(e, a, b, c, d, 76);
   126dc:	e0822de1 	add	r2, r2, r1, ror #27
    R4(d, e, a, b, c, 77);
   126e0:	e0200001 	eor	r0, r0, r1
   126e4:	e0803003 	add	r3, r0, r3
   126e8:	e0833de2 	add	r3, r3, r2, ror #27
    state[0] += a;
   126ec:	e59db02c 	ldr	fp, [sp, #44]	; 0x2c
    state[1] += b;
    state[2] += c;
   126f0:	e59d5050 	ldr	r5, [sp, #80]	; 0x50
   126f4:	e59de05c 	ldr	lr, [sp, #92]	; 0x5c
    R4(b, c, d, e, a, 79);
   126f8:	e1a07fe7 	ror	r7, r7, #31
    state[2] += c;
   126fc:	e085c163 	add	ip, r5, r3, ror #2
    R4(d, e, a, b, c, 77);
   12700:	e1a01161 	ror	r1, r1, #2
    state[0] += a;
   12704:	e08b0007 	add	r0, fp, r7
   12708:	e0800009 	add	r0, r0, r9
    state[2] += c;
   1270c:	e58ec008 	str	ip, [lr, #8]
    R4(c, d, e, a, b, 78);
   12710:	e0299001 	eor	r9, r9, r1
    state[3] += d;
   12714:	e59dc054 	ldr	ip, [sp, #84]	; 0x54
    R4(c, d, e, a, b, 78);
   12718:	e0299002 	eor	r9, r9, r2
   1271c:	e1a02162 	ror	r2, r2, #2
    state[3] += d;
   12720:	e08cc002 	add	ip, ip, r2
   12724:	e0898008 	add	r8, r9, r8
    R4(b, c, d, e, a, 79);
   12728:	e0222001 	eor	r2, r2, r1
    R4(c, d, e, a, b, 78);
   1272c:	e0888de3 	add	r8, r8, r3, ror #27
    state[3] += d;
   12730:	e58ec00c 	str	ip, [lr, #12]
    R4(b, c, d, e, a, 79);
   12734:	e0233002 	eor	r3, r3, r2
    state[4] += e;
   12738:	e59dc058 	ldr	ip, [sp, #88]	; 0x58
    state[1] += b;
   1273c:	e59d204c 	ldr	r2, [sp, #76]	; 0x4c
    state[0] += a;
   12740:	e0803003 	add	r3, r0, r3
    /* Wipe variables */
    a = b = c = d = e = 0;
#ifdef SHA1HANDSOFF
    memset(block, '\0', sizeof(block));
   12744:	e28d0060 	add	r0, sp, #96	; 0x60
    state[4] += e;
   12748:	e08c1001 	add	r1, ip, r1
    state[1] += b;
   1274c:	e082c008 	add	ip, r2, r8
    memset(block, '\0', sizeof(block));
   12750:	e3a02040 	mov	r2, #64	; 0x40
    state[0] += a;
   12754:	e0838de8 	add	r8, r3, r8, ror #27
    state[4] += e;
   12758:	e58e1010 	str	r1, [lr, #16]
    memset(block, '\0', sizeof(block));
   1275c:	e3a01000 	mov	r1, #0
    state[1] += b;
   12760:	e88e1100 	stm	lr, {r8, ip}
    R4(b, c, d, e, a, 79);
   12764:	e58d709c 	str	r7, [sp, #156]	; 0x9c
    memset(block, '\0', sizeof(block));
   12768:	ebfff222 	bl	eff8 <memset>
#endif
}
   1276c:	e28dd0a4 	add	sp, sp, #164	; 0xa4
   12770:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012774 <SHA1Init>:
void SHA1Init(
    SHA1_CTX * context
)
{
    /* SHA1 initialization constants */
    context->state[0] = 0x67452301;
   12774:	e3023301 	movw	r3, #8961	; 0x2301
    context->state[1] = 0xEFCDAB89;
   12778:	e30acb89 	movw	ip, #43913	; 0xab89
    context->state[0] = 0x67452301;
   1277c:	e3463745 	movt	r3, #26437	; 0x6745
    context->state[2] = 0x98BADCFE;
    context->state[3] = 0x10325476;
   12780:	e3051476 	movw	r1, #21622	; 0x5476
    context->state[0] = 0x67452301;
   12784:	e5803000 	str	r3, [r0]
    context->state[2] = 0x98BADCFE;
   12788:	e30d3cfe 	movw	r3, #56574	; 0xdcfe
   1278c:	e34938ba 	movt	r3, #39098	; 0x98ba
    context->state[4] = 0xC3D2E1F0;
   12790:	e30e21f0 	movw	r2, #57840	; 0xe1f0
    context->state[1] = 0xEFCDAB89;
   12794:	e34ecfcd 	movt	ip, #61389	; 0xefcd
    context->state[3] = 0x10325476;
   12798:	e3411032 	movt	r1, #4146	; 0x1032
    context->state[4] = 0xC3D2E1F0;
   1279c:	e34c23d2 	movt	r2, #50130	; 0xc3d2
    context->state[2] = 0x98BADCFE;
   127a0:	e5803008 	str	r3, [r0, #8]
    context->count[0] = context->count[1] = 0;
   127a4:	e3a03000 	mov	r3, #0
    context->state[1] = 0xEFCDAB89;
   127a8:	e580c004 	str	ip, [r0, #4]
    context->state[3] = 0x10325476;
   127ac:	e580100c 	str	r1, [r0, #12]
    context->state[4] = 0xC3D2E1F0;
   127b0:	e5802010 	str	r2, [r0, #16]
    context->count[0] = context->count[1] = 0;
   127b4:	e5803018 	str	r3, [r0, #24]
   127b8:	e5803014 	str	r3, [r0, #20]
}
   127bc:	e12fff1e 	bx	lr

000127c0 <SHA1Update>:
void SHA1Update(
    SHA1_CTX * context,
    const unsigned char *data,
    uint32_t len
)
{
   127c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   127c4:	e1a05000 	mov	r5, r0
    uint32_t i;
    uint32_t j = context->count[0];
   127c8:	e5900014 	ldr	r0, [r0, #20]
{
   127cc:	e1a06002 	mov	r6, r2
    if ((context->count[0] += len << 3) < j)
   127d0:	e1a03182 	lsl	r3, r2, #3
{
   127d4:	e1a07001 	mov	r7, r1
   127d8:	e0933000 	adds	r3, r3, r0
    if ((context->count[0] += len << 3) < j)
   127dc:	e5853014 	str	r3, [r5, #20]
        context->count[1]++;
   127e0:	e5953018 	ldr	r3, [r5, #24]
    context->count[1] += (len >> 29);
    j = (j >> 3) & 63;
   127e4:	e7e581d0 	ubfx	r8, r0, #3, #6
        context->count[1]++;
   127e8:	22833001 	addcs	r3, r3, #1
    context->count[1] += (len >> 29);
   127ec:	e0833ea2 	add	r3, r3, r2, lsr #29
   127f0:	e5853018 	str	r3, [r5, #24]
    if ((j + len) > 63)
   127f4:	e0823008 	add	r3, r2, r8
   127f8:	e353003f 	cmp	r3, #63	; 0x3f
   127fc:	9288001c 	addls	r0, r8, #28
   12800:	8a000004 	bhi	12818 <SHA1Update+0x58>
        }
        j = 0;
    }
    else
        i = 0;
    memcpy(&context->buffer[j], &data[i], len - i);
   12804:	e0850000 	add	r0, r5, r0
   12808:	e1a02006 	mov	r2, r6
   1280c:	e1a01007 	mov	r1, r7
}
   12810:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    memcpy(&context->buffer[j], &data[i], len - i);
   12814:	eafff22e 	b	f0d4 <memcpy>
        memcpy(&context->buffer[j], data, (i = 64 - j));
   12818:	e2684040 	rsb	r4, r8, #64	; 0x40
   1281c:	e288001c 	add	r0, r8, #28
   12820:	e0850000 	add	r0, r5, r0
   12824:	e1a02004 	mov	r2, r4
   12828:	ebfff229 	bl	f0d4 <memcpy>
        SHA1Transform(context->state, context->buffer);
   1282c:	e1a00005 	mov	r0, r5
   12830:	e285101c 	add	r1, r5, #28
   12834:	ebfffb15 	bl	11490 <SHA1Transform>
        for (; i + 63 < len; i += 64)
   12838:	e268307f 	rsb	r3, r8, #127	; 0x7f
   1283c:	e1560003 	cmp	r6, r3
    memcpy(&context->buffer[j], &data[i], len - i);
   12840:	90877004 	addls	r7, r7, r4
   12844:	92480040 	subls	r0, r8, #64	; 0x40
   12848:	90866000 	addls	r6, r6, r0
   1284c:	93a0001c 	movls	r0, #28
        for (; i + 63 < len; i += 64)
   12850:	9affffeb 	bls	12804 <SHA1Update+0x44>
            SHA1Transform(context->state, &data[i]);
   12854:	e0871004 	add	r1, r7, r4
   12858:	e1a00005 	mov	r0, r5
   1285c:	ebfffb0b 	bl	11490 <SHA1Transform>
        for (; i + 63 < len; i += 64)
   12860:	e284307f 	add	r3, r4, #127	; 0x7f
   12864:	e2844040 	add	r4, r4, #64	; 0x40
   12868:	e1560003 	cmp	r6, r3
   1286c:	8afffff8 	bhi	12854 <SHA1Update+0x94>
    memcpy(&context->buffer[j], &data[i], len - i);
   12870:	e0877004 	add	r7, r7, r4
   12874:	e3a0001c 	mov	r0, #28
   12878:	e0466004 	sub	r6, r6, r4
   1287c:	eaffffe0 	b	12804 <SHA1Update+0x44>

00012880 <SHA1Final>:

void SHA1Final(
    unsigned char digest[20],
    SHA1_CTX * context
)
{
   12880:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12884:	e24dd010 	sub	sp, sp, #16
   12888:	e28d5008 	add	r5, sp, #8
   1288c:	e1a06000 	mov	r6, r0
   12890:	e1a04001 	mov	r4, r1
   12894:	e1a00005 	mov	r0, r5
    unsigned i;
    unsigned char finalcount[8];
    unsigned char c;
    for (i = 0; i < 8; i++)
   12898:	e3a02000 	mov	r2, #0
    {
        finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >> ((3 - (i & 3)) * 8)) & 255);      /* Endian independent */
   1289c:	e1e03002 	mvn	r3, r2
   128a0:	e3520003 	cmp	r2, #3
   128a4:	83a01000 	movhi	r1, #0
   128a8:	93a01001 	movls	r1, #1
   128ac:	e2033003 	and	r3, r3, #3
    for (i = 0; i < 8; i++)
   128b0:	e2822001 	add	r2, r2, #1
        finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >> ((3 - (i & 3)) * 8)) & 255);      /* Endian independent */
   128b4:	e0841101 	add	r1, r4, r1, lsl #2
    for (i = 0; i < 8; i++)
   128b8:	e3520008 	cmp	r2, #8
        finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >> ((3 - (i & 3)) * 8)) & 255);      /* Endian independent */
   128bc:	e1a03183 	lsl	r3, r3, #3
   128c0:	e5911014 	ldr	r1, [r1, #20]
   128c4:	e1a03331 	lsr	r3, r1, r3
   128c8:	e4c03001 	strb	r3, [r0], #1
    for (i = 0; i < 8; i++)
   128cc:	1afffff2 	bne	1289c <SHA1Final+0x1c>
    }
    c = 0200;
    SHA1Update(context, &c, 1);
   128d0:	e28d7007 	add	r7, sp, #7
    c = 0200;
   128d4:	e3e0307f 	mvn	r3, #127	; 0x7f
   128d8:	e5cd3007 	strb	r3, [sp, #7]
    SHA1Update(context, &c, 1);
   128dc:	e3a02001 	mov	r2, #1
   128e0:	e1a01007 	mov	r1, r7
   128e4:	e1a00004 	mov	r0, r4
   128e8:	ebffffb4 	bl	127c0 <SHA1Update>
    while ((context->count[0] & 504) != 448)
   128ec:	e5943014 	ldr	r3, [r4, #20]
   128f0:	e2033f7e 	and	r3, r3, #504	; 0x1f8
   128f4:	e3530d07 	cmp	r3, #448	; 0x1c0
   128f8:	0a000009 	beq	12924 <SHA1Final+0xa4>
    {
        c = 0000;
   128fc:	e3a08000 	mov	r8, #0
   12900:	e5cd8007 	strb	r8, [sp, #7]
        SHA1Update(context, &c, 1);
   12904:	e3a02001 	mov	r2, #1
   12908:	e1a01007 	mov	r1, r7
   1290c:	e1a00004 	mov	r0, r4
   12910:	ebffffaa 	bl	127c0 <SHA1Update>
    while ((context->count[0] & 504) != 448)
   12914:	e5943014 	ldr	r3, [r4, #20]
   12918:	e2033f7e 	and	r3, r3, #504	; 0x1f8
   1291c:	e3530d07 	cmp	r3, #448	; 0x1c0
   12920:	1afffff6 	bne	12900 <SHA1Final+0x80>
    }
    SHA1Update(context, finalcount, 8); /* Should cause a SHA1Transform() */
   12924:	e3a02008 	mov	r2, #8
   12928:	e1a01005 	mov	r1, r5
   1292c:	e1a00004 	mov	r0, r4
   12930:	ebffffa2 	bl	127c0 <SHA1Update>
    for (i = 0; i < 20; i++)
   12934:	e2461001 	sub	r1, r6, #1
   12938:	e3a02000 	mov	r2, #0
    {
        digest[i] = (unsigned char)
            ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
   1293c:	e1e03002 	mvn	r3, r2
   12940:	e1a00122 	lsr	r0, r2, #2
   12944:	e2033003 	and	r3, r3, #3
    for (i = 0; i < 20; i++)
   12948:	e2822001 	add	r2, r2, #1
            ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
   1294c:	e794c100 	ldr	ip, [r4, r0, lsl #2]
    for (i = 0; i < 20; i++)
   12950:	e3520014 	cmp	r2, #20
            ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
   12954:	e1a03183 	lsl	r3, r3, #3
   12958:	e1a0333c 	lsr	r3, ip, r3
        digest[i] = (unsigned char)
   1295c:	e5e13001 	strb	r3, [r1, #1]!
    for (i = 0; i < 20; i++)
   12960:	1afffff5 	bne	1293c <SHA1Final+0xbc>
    }
    /* Wipe variables */
    memset(context, '\0', sizeof(*context));
   12964:	e3a0205c 	mov	r2, #92	; 0x5c
   12968:	e3a01000 	mov	r1, #0
   1296c:	e1a00004 	mov	r0, r4
   12970:	ebfff1a0 	bl	eff8 <memset>
    memset(&finalcount, '\0', sizeof(finalcount));
   12974:	e3a02008 	mov	r2, #8
   12978:	e3a01000 	mov	r1, #0
   1297c:	e1a00005 	mov	r0, r5
   12980:	ebfff19c 	bl	eff8 <memset>
}
   12984:	e28dd010 	add	sp, sp, #16
   12988:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001298c <SHA1>:

void SHA1(
    char *hash_out,
    const char *str,
    int len)
{
   1298c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   12990:	e24dd064 	sub	sp, sp, #100	; 0x64
    // printf('SHA1)\n');
    SHA1_CTX ctx;
    unsigned int ii;

    SHA1Init(&ctx);
   12994:	e28d6004 	add	r6, sp, #4
{
   12998:	e1a05002 	mov	r5, r2
   1299c:	e1a07000 	mov	r7, r0
    SHA1Init(&ctx);
   129a0:	e1a00006 	mov	r0, r6
{
   129a4:	e1a04001 	mov	r4, r1
    SHA1Init(&ctx);
   129a8:	ebffff71 	bl	12774 <SHA1Init>
    for (ii=0; ii<len; ii+=1)
   129ac:	e3550000 	cmp	r5, #0
   129b0:	0a000007 	beq	129d4 <SHA1+0x48>
   129b4:	e0845005 	add	r5, r4, r5
        SHA1Update(&ctx, (const unsigned char*)str + ii, 1);
   129b8:	e3a02001 	mov	r2, #1
   129bc:	e1a01004 	mov	r1, r4
    for (ii=0; ii<len; ii+=1)
   129c0:	e0844002 	add	r4, r4, r2
        SHA1Update(&ctx, (const unsigned char*)str + ii, 1);
   129c4:	e1a00006 	mov	r0, r6
   129c8:	ebffff7c 	bl	127c0 <SHA1Update>
    for (ii=0; ii<len; ii+=1)
   129cc:	e1540005 	cmp	r4, r5
   129d0:	1afffff8 	bne	129b8 <SHA1+0x2c>
    SHA1Final((unsigned char *)hash_out, &ctx);
   129d4:	e1a01006 	mov	r1, r6
   129d8:	e1a00007 	mov	r0, r7
   129dc:	ebffffa7 	bl	12880 <SHA1Final>
}
   129e0:	e28dd064 	add	sp, sp, #100	; 0x64
   129e4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

000129e8 <text_filter>:
    int rc=0;

    if( control == IOBUFCTRL_UNDERFLOW ) {
	// rc = standard( tfx, a, buf, size, ret_len );
    }
    else if( control == IOBUFCTRL_FREE ) {
   129e8:	e3510002 	cmp	r1, #2
   129ec:	0a000001 	beq	129f8 <text_filter+0x10>
	tfx->buffer = NULL;
    }
    // else if( control == IOBUFCTRL_DESC )
    //     mem2str (buf, "text_filter", *ret_len);
    return rc;
}
   129f0:	e3a00000 	mov	r0, #0
   129f4:	e12fff1e 	bx	lr
{
   129f8:	e92d4010 	push	{r4, lr}
   129fc:	e1a04000 	mov	r4, r0
	xfree( tfx->buffer );
   12a00:	e5900000 	ldr	r0, [r0]
   12a04:	ebfff178 	bl	efec <xfree>
	tfx->buffer = NULL;
   12a08:	e3a03000 	mov	r3, #0
}
   12a0c:	e3a00000 	mov	r0, #0
	tfx->buffer = NULL;
   12a10:	e5843000 	str	r3, [r4]
}
   12a14:	e8bd8010 	pop	{r4, pc}

00012a18 <strlen>:
void print_memory_map(void);

size_t strlen(const char *str)
{
    const char *s;
    for (s = str; *s; ++s);
   12a18:	e5d03000 	ldrb	r3, [r0]
   12a1c:	e3530000 	cmp	r3, #0
   12a20:	0a000005 	beq	12a3c <strlen+0x24>
   12a24:	e1a03000 	mov	r3, r0
   12a28:	e5f32001 	ldrb	r2, [r3, #1]!
   12a2c:	e3520000 	cmp	r2, #0
   12a30:	1afffffc 	bne	12a28 <strlen+0x10>
    return (s - str);
   12a34:	e0430000 	sub	r0, r3, r0
   12a38:	e12fff1e 	bx	lr
    for (s = str; *s; ++s);
   12a3c:	e1a00003 	mov	r0, r3
}
   12a40:	e12fff1e 	bx	lr

00012a44 <print_memory_map>:
void print_memory_map(void)
{
    printf("Memory Map:\n");
   12a44:	e59f0084 	ldr	r0, [pc, #132]	; 12ad0 <print_memory_map+0x8c>
{
   12a48:	e92d4010 	push	{r4, lr}
   12a4c:	e59f4080 	ldr	r4, [pc, #128]	; 12ad4 <print_memory_map+0x90>
    printf("Memory Map:\n");
   12a50:	e08f0000 	add	r0, pc, r0
{
   12a54:	e08f4004 	add	r4, pc, r4
    printf("Memory Map:\n");
   12a58:	ebfffa69 	bl	11404 <tfp_printf>
    printf(" text: %p - %p\n", __text_start, __text_end);
   12a5c:	e59f3074 	ldr	r3, [pc, #116]	; 12ad8 <print_memory_map+0x94>
   12a60:	e59f2074 	ldr	r2, [pc, #116]	; 12adc <print_memory_map+0x98>
   12a64:	e59f0074 	ldr	r0, [pc, #116]	; 12ae0 <print_memory_map+0x9c>
   12a68:	e7941003 	ldr	r1, [r4, r3]
   12a6c:	e7942002 	ldr	r2, [r4, r2]
   12a70:	e08f0000 	add	r0, pc, r0
   12a74:	ebfffa62 	bl	11404 <tfp_printf>
    printf(" rodata: %p - %p\n", __rodata_start, __rodata_end);
   12a78:	e59f3064 	ldr	r3, [pc, #100]	; 12ae4 <print_memory_map+0xa0>
   12a7c:	e59f2064 	ldr	r2, [pc, #100]	; 12ae8 <print_memory_map+0xa4>
   12a80:	e59f0064 	ldr	r0, [pc, #100]	; 12aec <print_memory_map+0xa8>
   12a84:	e7941003 	ldr	r1, [r4, r3]
   12a88:	e7942002 	ldr	r2, [r4, r2]
   12a8c:	e08f0000 	add	r0, pc, r0
   12a90:	ebfffa5b 	bl	11404 <tfp_printf>
    printf(" data: %p - %p\n", __data_start, __data_end);
   12a94:	e59f3054 	ldr	r3, [pc, #84]	; 12af0 <print_memory_map+0xac>
   12a98:	e59f2054 	ldr	r2, [pc, #84]	; 12af4 <print_memory_map+0xb0>
   12a9c:	e59f0054 	ldr	r0, [pc, #84]	; 12af8 <print_memory_map+0xb4>
   12aa0:	e7941003 	ldr	r1, [r4, r3]
   12aa4:	e7942002 	ldr	r2, [r4, r2]
   12aa8:	e08f0000 	add	r0, pc, r0
   12aac:	ebfffa54 	bl	11404 <tfp_printf>
    printf(" bss: %p - %p\n", __bss_start, __bss_end);
   12ab0:	e59f2044 	ldr	r2, [pc, #68]	; 12afc <print_memory_map+0xb8>
   12ab4:	e59f3044 	ldr	r3, [pc, #68]	; 12b00 <print_memory_map+0xbc>
   12ab8:	e59f0044 	ldr	r0, [pc, #68]	; 12b04 <print_memory_map+0xc0>
   12abc:	e7942002 	ldr	r2, [r4, r2]
   12ac0:	e7941003 	ldr	r1, [r4, r3]
   12ac4:	e08f0000 	add	r0, pc, r0
}
   12ac8:	e8bd4010 	pop	{r4, lr}
    printf(" bss: %p - %p\n", __bss_start, __bss_end);
   12acc:	eafffa4c 	b	11404 <tfp_printf>
   12ad0:	00005448 	.word	0x00005448
   12ad4:	00028f68 	.word	0x00028f68
   12ad8:	00000008 	.word	0x00000008
   12adc:	00000038 	.word	0x00000038
   12ae0:	00005438 	.word	0x00005438
   12ae4:	00000030 	.word	0x00000030
   12ae8:	00000018 	.word	0x00000018
   12aec:	0000542c 	.word	0x0000542c
   12af0:	00000054 	.word	0x00000054
   12af4:	00000034 	.word	0x00000034
   12af8:	00005424 	.word	0x00005424
   12afc:	00000020 	.word	0x00000020
   12b00:	0000003c 	.word	0x0000003c
   12b04:	00005418 	.word	0x00005418

00012b08 <uart_putc>:

void uart_putc(char c)
{
    UART0_DR = c;
   12b08:	e3a03a01 	mov	r3, #4096	; 0x1000
   12b0c:	e341301f 	movt	r3, #4127	; 0x101f
   12b10:	e5830000 	str	r0, [r3]
}
   12b14:	e12fff1e 	bx	lr

00012b18 <putc_uart>:

void putc_uart(void *p, char c)
{
    (void)p;
    uart_putc(c);
   12b18:	e1a00001 	mov	r0, r1
   12b1c:	eafffff9 	b	12b08 <uart_putc>

00012b20 <putc_uart2>:
   12b20:	e1a00001 	mov	r0, r1
   12b24:	eafffff7 	b	12b08 <uart_putc>

00012b28 <reset_literals_seen>:

/* Reset the literal data counter.  This is required to setup a new
 * decryption or verification context.  */
void reset_literals_seen(void)
{
  literals_seen = 0;
   12b28:	e59f300c 	ldr	r3, [pc, #12]	; 12b3c <reset_literals_seen+0x14>
   12b2c:	e3a02000 	mov	r2, #0
   12b30:	e08f3003 	add	r3, pc, r3
   12b34:	e5832000 	str	r2, [r3]
}
   12b38:	e12fff1e 	bx	lr
   12b3c:	00049700 	.word	0x00049700

00012b40 <derive_key>:
//   return 0;
// }

#define GETPASSWORD_FLAG_SYMDECRYPT 1
void derive_key(const uint8_t *salt, const char *password, unsigned int pass_len, uint32_t iterations, uint8_t *key)
{
   12b40:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b44:	e1a0a000 	mov	sl, r0
    printf("Deriving key...\n");
   12b48:	e59f0120 	ldr	r0, [pc, #288]	; 12c70 <derive_key+0x130>
{
   12b4c:	e24dd06c 	sub	sp, sp, #108	; 0x6c
    // // Print first few chars of password (be careful with security)
    // printf("Password: %.*s%s\n", pass_len > 3 ? 3 : pass_len, 
    //        password, pass_len > 3 ? "..." : "");
    
    SHA1_CTX ctx;
    SHA1Init(&ctx);
   12b50:	e28d800c 	add	r8, sp, #12
{
   12b54:	e1a06003 	mov	r6, r3
    printf("Deriving key...\n");
   12b58:	e08f0000 	add	r0, pc, r0
{
   12b5c:	e1a07002 	mov	r7, r2
   12b60:	e58d1004 	str	r1, [sp, #4]
    printf("Deriving key...\n");
   12b64:	ebfffa26 	bl	11404 <tfp_printf>
    SHA1Init(&ctx);
   12b68:	e1a00008 	mov	r0, r8
   12b6c:	ebffff00 	bl	12774 <SHA1Init>
    unsigned int bytesProcessed = 0;
    unsigned int index = 0;
    unsigned int progress_milestone = iterations / 10; // Report at 10% intervals
    unsigned int next_milestone = progress_milestone;
    
    while (bytesProcessed < iterations)
   12b70:	e3560000 	cmp	r6, #0
   12b74:	0a00003b 	beq	12c68 <derive_key+0x128>
   12b78:	e28db00b 	add	fp, sp, #11
   12b7c:	e1a03008 	mov	r3, r8
    unsigned int index = 0;
   12b80:	e3a04000 	mov	r4, #0
   12b84:	e1a0800b 	mov	r8, fp
        
        SHA1Update(&ctx, &byte, 1);
        bytesProcessed++;
        index++;
        
        if (index >= 8 + pass_len)
   12b88:	e2879008 	add	r9, r7, #8
    unsigned int bytesProcessed = 0;
   12b8c:	e1a05004 	mov	r5, r4
   12b90:	e1a0b003 	mov	fp, r3
        if (index < 8)
   12b94:	e3540007 	cmp	r4, #7
   12b98:	9a00002f 	bls	12c5c <derive_key+0x11c>
            byte = password[(index - 8) % pass_len];
   12b9c:	e2443008 	sub	r3, r4, #8
   12ba0:	e2844001 	add	r4, r4, #1
   12ba4:	e732f713 	udiv	r2, r3, r7
   12ba8:	e0633297 	mls	r3, r7, r2, r3
   12bac:	e59d2004 	ldr	r2, [sp, #4]
   12bb0:	e7d23003 	ldrb	r3, [r2, r3]
   12bb4:	e5cd300b 	strb	r3, [sp, #11]
        SHA1Update(&ctx, &byte, 1);
   12bb8:	e3a02001 	mov	r2, #1
   12bbc:	e1a01008 	mov	r1, r8
   12bc0:	e1a0000b 	mov	r0, fp
        bytesProcessed++;
   12bc4:	e2855001 	add	r5, r5, #1
        SHA1Update(&ctx, &byte, 1);
   12bc8:	ebfffefc 	bl	127c0 <SHA1Update>
        if (index >= 8 + pass_len)
   12bcc:	e1590004 	cmp	r9, r4
   12bd0:	8a000005 	bhi	12bec <derive_key+0xac>
    while (bytesProcessed < iterations)
   12bd4:	e1560005 	cmp	r6, r5
        {
            index = 0;
   12bd8:	e3a03000 	mov	r3, #0
   12bdc:	e3a04001 	mov	r4, #1
    while (bytesProcessed < iterations)
   12be0:	9a000003 	bls	12bf4 <derive_key+0xb4>
            byte = salt[index];
   12be4:	e7da3003 	ldrb	r3, [sl, r3]
   12be8:	eafffff1 	b	12bb4 <derive_key+0x74>
    while (bytesProcessed < iterations)
   12bec:	e1560005 	cmp	r6, r5
   12bf0:	8affffe7 	bhi	12b94 <derive_key+0x54>
   12bf4:	e1a0800b 	mov	r8, fp
            
        //     next_milestone += progress_milestone;
        // }
    }
    
    printf("SHA1 update complete after processing %u bytes\n", bytesProcessed);
   12bf8:	e59f0074 	ldr	r0, [pc, #116]	; 12c74 <derive_key+0x134>
   12bfc:	e1a01005 	mov	r1, r5
    SHA1Final(key, &ctx);
    
    // Print derived key
    printf("Derived key: ");
    for (int i = 0; i < 20; i++) { // SHA1 produces 20-byte output
        printf("%02x", key[i]);
   12c00:	e59f6070 	ldr	r6, [pc, #112]	; 12c78 <derive_key+0x138>
    printf("SHA1 update complete after processing %u bytes\n", bytesProcessed);
   12c04:	e08f0000 	add	r0, pc, r0
        printf("%02x", key[i]);
   12c08:	e08f6006 	add	r6, pc, r6
    printf("SHA1 update complete after processing %u bytes\n", bytesProcessed);
   12c0c:	ebfff9fc 	bl	11404 <tfp_printf>
    SHA1Final(key, &ctx);
   12c10:	e59d0090 	ldr	r0, [sp, #144]	; 0x90
   12c14:	e1a01008 	mov	r1, r8
   12c18:	ebffff18 	bl	12880 <SHA1Final>
    printf("Derived key: ");
   12c1c:	e59f0058 	ldr	r0, [pc, #88]	; 12c7c <derive_key+0x13c>
   12c20:	e59d3090 	ldr	r3, [sp, #144]	; 0x90
   12c24:	e08f0000 	add	r0, pc, r0
   12c28:	e2434001 	sub	r4, r3, #1
   12c2c:	e2835013 	add	r5, r3, #19
   12c30:	ebfff9f3 	bl	11404 <tfp_printf>
        printf("%02x", key[i]);
   12c34:	e5f41001 	ldrb	r1, [r4, #1]!
   12c38:	e1a00006 	mov	r0, r6
   12c3c:	ebfff9f0 	bl	11404 <tfp_printf>
    for (int i = 0; i < 20; i++) { // SHA1 produces 20-byte output
   12c40:	e1540005 	cmp	r4, r5
   12c44:	1afffffa 	bne	12c34 <derive_key+0xf4>
    }
    printf("\n");
   12c48:	e59f0030 	ldr	r0, [pc, #48]	; 12c80 <derive_key+0x140>
   12c4c:	e08f0000 	add	r0, pc, r0
   12c50:	ebfff9eb 	bl	11404 <tfp_printf>
    
    // printf("Key derivation completed\n");
}
   12c54:	e28dd06c 	add	sp, sp, #108	; 0x6c
   12c58:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        index++;
   12c5c:	e1a03004 	mov	r3, r4
   12c60:	e2844001 	add	r4, r4, #1
   12c64:	eaffffde 	b	12be4 <derive_key+0xa4>
    unsigned int bytesProcessed = 0;
   12c68:	e1a05006 	mov	r5, r6
   12c6c:	eaffffe1 	b	12bf8 <derive_key+0xb8>
   12c70:	00005488 	.word	0x00005488
   12c74:	000053f0 	.word	0x000053f0
   12c78:	00003e8c 	.word	0x00003e8c
   12c7c:	00005400 	.word	0x00005400
   12c80:	000045e4 	.word	0x000045e4

00012c84 <hex_to_bytes>:
  return 0;
}

void hex_to_bytes(const char *hex, uint8_t *bytes, size_t length)
{
  for (size_t i = 0; i < length; i++)
   12c84:	e3520000 	cmp	r2, #0
   12c88:	012fff1e 	bxeq	lr
   12c8c:	e080c082 	add	ip, r0, r2, lsl #1
   12c90:	e2411001 	sub	r1, r1, #1
{
   12c94:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   12c98:	ea000018 	b	12d00 <hex_to_bytes+0x7c>
  if (h >= 'a' && h <= 'f')
   12c9c:	e2423061 	sub	r3, r2, #97	; 0x61
   12ca0:	e3530005 	cmp	r3, #5
    return h - 'a' + 10;
   12ca4:	92423057 	subls	r3, r2, #87	; 0x57
   12ca8:	83a03000 	movhi	r3, #0
  {
    bytes[i] = (hex_digit(hex[i * 2]) << 4) | hex_digit(hex[i * 2 + 1]);
   12cac:	97a33053 	sbfxls	r3, r3, #0, #4
   12cb0:	91a03203 	lslls	r3, r3, #4
   12cb4:	e5d0e001 	ldrb	lr, [r0, #1]
  if (h >= '0' && h <= '9')
   12cb8:	e24e2030 	sub	r2, lr, #48	; 0x30
   12cbc:	e6ef2072 	uxtb	r2, r2
   12cc0:	e3520009 	cmp	r2, #9
    bytes[i] = (hex_digit(hex[i * 2]) << 4) | hex_digit(hex[i * 2 + 1]);
   12cc4:	91833002 	orrls	r3, r3, r2
   12cc8:	96af3073 	sxtbls	r3, r3
  if (h >= '0' && h <= '9')
   12ccc:	9a000007 	bls	12cf0 <hex_to_bytes+0x6c>
  if (h >= 'A' && h <= 'F')
   12cd0:	e24e2041 	sub	r2, lr, #65	; 0x41
   12cd4:	e3520005 	cmp	r2, #5
   12cd8:	9a000016 	bls	12d38 <hex_to_bytes+0xb4>
  if (h >= 'a' && h <= 'f')
   12cdc:	e24e2061 	sub	r2, lr, #97	; 0x61
   12ce0:	e3520005 	cmp	r2, #5
    return h - 'a' + 10;
   12ce4:	924ee057 	subls	lr, lr, #87	; 0x57
    bytes[i] = (hex_digit(hex[i * 2]) << 4) | hex_digit(hex[i * 2 + 1]);
   12ce8:	9183300e 	orrls	r3, r3, lr
   12cec:	96af3073 	sxtbls	r3, r3
   12cf0:	e5e13001 	strb	r3, [r1, #1]!
  for (size_t i = 0; i < length; i++)
   12cf4:	e2800002 	add	r0, r0, #2
   12cf8:	e150000c 	cmp	r0, ip
   12cfc:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
    bytes[i] = (hex_digit(hex[i * 2]) << 4) | hex_digit(hex[i * 2 + 1]);
   12d00:	e5d02000 	ldrb	r2, [r0]
  if (h >= '0' && h <= '9')
   12d04:	e2423030 	sub	r3, r2, #48	; 0x30
   12d08:	e6ef3073 	uxtb	r3, r3
   12d0c:	e3530009 	cmp	r3, #9
    bytes[i] = (hex_digit(hex[i * 2]) << 4) | hex_digit(hex[i * 2 + 1]);
   12d10:	91a03203 	lslls	r3, r3, #4
   12d14:	96af3073 	sxtbls	r3, r3
  if (h >= '0' && h <= '9')
   12d18:	9affffe5 	bls	12cb4 <hex_to_bytes+0x30>
  if (h >= 'A' && h <= 'F')
   12d1c:	e2423041 	sub	r3, r2, #65	; 0x41
   12d20:	e3530005 	cmp	r3, #5
   12d24:	8affffdc 	bhi	12c9c <hex_to_bytes+0x18>
    return h - 'A' + 10;
   12d28:	e2423037 	sub	r3, r2, #55	; 0x37
    bytes[i] = (hex_digit(hex[i * 2]) << 4) | hex_digit(hex[i * 2 + 1]);
   12d2c:	e7a33053 	sbfx	r3, r3, #0, #4
   12d30:	e1a03203 	lsl	r3, r3, #4
    return h - 'A' + 10;
   12d34:	eaffffde 	b	12cb4 <hex_to_bytes+0x30>
   12d38:	e24ee037 	sub	lr, lr, #55	; 0x37
    bytes[i] = (hex_digit(hex[i * 2]) << 4) | hex_digit(hex[i * 2 + 1]);
   12d3c:	e183300e 	orr	r3, r3, lr
   12d40:	e6af3073 	sxtb	r3, r3
    return h - 'A' + 10;
   12d44:	eaffffe9 	b	12cf0 <hex_to_bytes+0x6c>

00012d48 <passphrase_to_dek>:

DEK *passphrase_to_dek(int cipher_algo, STRING2KEY *s2k,
                       int create, int nocache,
                       const char *tryagain_text, unsigned int flags,
                       int *canceled, const char *passphrase, const char *derivedKey)
{
   12d48:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12d4c:	e28db01c 	add	fp, sp, #28
   12d50:	e1a04000 	mov	r4, r0
   12d54:	e24dd010 	sub	sp, sp, #16
  printf("passphrase_to_dek\n");
   12d58:	e59f0208 	ldr	r0, [pc, #520]	; 12f68 <passphrase_to_dek+0x220>
{
   12d5c:	e59b800c 	ldr	r8, [fp, #12]
   12d60:	e1a05002 	mov	r5, r2
  printf("passphrase_to_dek\n");
   12d64:	e08f0000 	add	r0, pc, r0
{
   12d68:	e1a07001 	mov	r7, r1
   12d6c:	e59b6014 	ldr	r6, [fp, #20]
  printf("passphrase_to_dek\n");
   12d70:	ebfff9a3 	bl	11404 <tfp_printf>
  STRING2KEY help_s2k;
  int dummy_canceled;
  char s2k_cacheidbuf[1 + 16 + 1];
  char *s2k_cacheid = NULL;

  if (!canceled)
   12d74:	e3580000 	cmp	r8, #0
    canceled = &dummy_canceled;
  *canceled = 0;
   12d78:	e3a03000 	mov	r3, #0
    canceled = &dummy_canceled;
   12d7c:	024b8020 	subeq	r8, fp, #32
  //     s2k->hash_algo = S2K_DIGEST_ALGO;
  //   }

  /* Create a new salt or what else to be filled into the s2k for a
     new key.  */
  if (create && (s2k->mode == 1 || s2k->mode == 3))
   12d80:	e3550000 	cmp	r5, #0
  *canceled = 0;
   12d84:	e5883000 	str	r3, [r8]
  if (create && (s2k->mode == 1 || s2k->mode == 3))
   12d88:	0a000003 	beq	12d9c <passphrase_to_dek+0x54>
   12d8c:	e5973000 	ldr	r3, [r7]
   12d90:	e3c33002 	bic	r3, r3, #2
   12d94:	e3530001 	cmp	r3, #1
   12d98:	0a000061 	beq	12f24 <passphrase_to_dek+0x1dc>
  //   write_status( STATUS_MISSING_PASSPHRASE );

  /* Hash the passphrase and store it in a newly allocated DEK object.
     Keep a copy of the passphrase in LAST_PW for use by
     get_last_passphrase(). */
  dek = xmalloc_clear(sizeof *dek);
   12d9c:	e3a0003c 	mov	r0, #60	; 0x3c
   12da0:	ebfff0b0 	bl	f068 <xmalloc_clear>
  // }
  // if (s2k_cacheid)
  //   memcpy (dek->s2k_cacheid, s2k_cacheid, sizeof dek->s2k_cacheid);
  // xfree(last_pw);
  // last_pw = pw;
  uint32_t iterations = ((uint32_t)16 + (s2k->count & 15)) << ((s2k->count >> 4) + 6);
   12da4:	e5973010 	ldr	r3, [r7, #16]
  // printf("\n\n\n GOT HERE \n\n\n");
  if (derivedKey != NULL)
   12da8:	e3560000 	cmp	r6, #0
  dek->algo = cipher_algo;
   12dac:	e5804000 	str	r4, [r0]
  dek->keylen = 16; // openpgp_cipher_get_algo_keylen (dek->algo);
   12db0:	e3a02010 	mov	r2, #16
   12db4:	e5802004 	str	r2, [r0, #4]
  uint32_t iterations = ((uint32_t)16 + (s2k->count & 15)) << ((s2k->count >> 4) + 6);
   12db8:	e203400f 	and	r4, r3, #15
   12dbc:	e1a03223 	lsr	r3, r3, #4
   12dc0:	e2844010 	add	r4, r4, #16
   12dc4:	e2833006 	add	r3, r3, #6
  dek = xmalloc_clear(sizeof *dek);
   12dc8:	e1a05000 	mov	r5, r0
  uint32_t iterations = ((uint32_t)16 + (s2k->count & 15)) << ((s2k->count >> 4) + 6);
   12dcc:	e1a04314 	lsl	r4, r4, r3
  if (derivedKey != NULL)
   12dd0:	0a000048 	beq	12ef8 <passphrase_to_dek+0x1b0>
  {
    printf("OVERRIDDEN: %s\n", derivedKey);
   12dd4:	e59f0190 	ldr	r0, [pc, #400]	; 12f6c <passphrase_to_dek+0x224>
   12dd8:	e1a01006 	mov	r1, r6
  {
   12ddc:	e1a0800d 	mov	r8, sp
    printf("OVERRIDDEN: %s\n", derivedKey);
   12de0:	e08f0000 	add	r0, pc, r0
   12de4:	ebfff986 	bl	11404 <tfp_printf>
    // Usage example:
    uint8_t key[dek->keylen]; // For SHA1 output
   12de8:	e5952004 	ldr	r2, [r5, #4]
    hex_to_bytes(derivedKey, key, dek->keylen);
   12dec:	e1a00006 	mov	r0, r6
   12df0:	e2876005 	add	r6, r7, #5
    uint8_t key[dek->keylen]; // For SHA1 output
   12df4:	e2823007 	add	r3, r2, #7
   12df8:	e3c33007 	bic	r3, r3, #7
   12dfc:	e04dd003 	sub	sp, sp, r3
   12e00:	e28d9008 	add	r9, sp, #8
    hex_to_bytes(derivedKey, key, dek->keylen);
   12e04:	e1a01009 	mov	r1, r9
   12e08:	ebffff9d 	bl	12c84 <hex_to_bytes>
    memcpy(dek->key, key, dek->keylen);
   12e0c:	e5952004 	ldr	r2, [r5, #4]
   12e10:	e1a01009 	mov	r1, r9
   12e14:	e2850009 	add	r0, r5, #9
   12e18:	ebfff0ad 	bl	f0d4 <memcpy>
   12e1c:	e1a0d008 	mov	sp, r8
  }
  else
    derive_key(s2k->salt, passphrase, strlen(passphrase), iterations, dek->key);

  printf("DEK Information:\n");
   12e20:	e59f0148 	ldr	r0, [pc, #328]	; 12f70 <passphrase_to_dek+0x228>
   12e24:	e08f0000 	add	r0, pc, r0
   12e28:	ebfff975 	bl	11404 <tfp_printf>
  printf("Algorithm: %d\n", dek->algo);
   12e2c:	e59f0140 	ldr	r0, [pc, #320]	; 12f74 <passphrase_to_dek+0x22c>
   12e30:	e5951000 	ldr	r1, [r5]
   12e34:	e08f0000 	add	r0, pc, r0
   12e38:	ebfff971 	bl	11404 <tfp_printf>
  printf("Key Length: %d bytes\n", dek->keylen);
   12e3c:	e59f0134 	ldr	r0, [pc, #308]	; 12f78 <passphrase_to_dek+0x230>
   12e40:	e5951004 	ldr	r1, [r5, #4]
   12e44:	e08f0000 	add	r0, pc, r0
   12e48:	ebfff96d 	bl	11404 <tfp_printf>
  printf("Iterations: %d\n", iterations);
   12e4c:	e59f0128 	ldr	r0, [pc, #296]	; 12f7c <passphrase_to_dek+0x234>
   12e50:	e1a01004 	mov	r1, r4
   12e54:	e08f0000 	add	r0, pc, r0
   12e58:	ebfff969 	bl	11404 <tfp_printf>
  
  // printf("Algorithm Info Printed: %s\n", dek->algo_info_printed ? "Yes" : "No");
  // printf("Use AEAD: %d\n", dek->use_aead);
  // printf("Use MDC: %s\n", dek->use_mdc ? "Yes" : "No");
  // printf("Symmetric: %s\n", dek->symmetric ? "Yes" : "No");
  printf("Key: ");
   12e5c:	e59f011c 	ldr	r0, [pc, #284]	; 12f80 <passphrase_to_dek+0x238>
   12e60:	e08f0000 	add	r0, pc, r0
   12e64:	ebfff966 	bl	11404 <tfp_printf>
  for (int i = 0; i < dek->keylen; i++)
   12e68:	e5953004 	ldr	r3, [r5, #4]
   12e6c:	e3530000 	cmp	r3, #0
   12e70:	da00000b 	ble	12ea4 <passphrase_to_dek+0x15c>
  {
    printf("%02x", dek->key[i]);
   12e74:	e59f9108 	ldr	r9, [pc, #264]	; 12f84 <passphrase_to_dek+0x23c>
   12e78:	e2858008 	add	r8, r5, #8
   12e7c:	e08f9009 	add	r9, pc, r9
   12e80:	e1a04008 	mov	r4, r8
   12e84:	e1a00009 	mov	r0, r9
   12e88:	e5f81001 	ldrb	r1, [r8, #1]!
  for (int i = 0; i < dek->keylen; i++)
   12e8c:	e2444007 	sub	r4, r4, #7
   12e90:	e0444005 	sub	r4, r4, r5
    printf("%02x", dek->key[i]);
   12e94:	ebfff95a 	bl	11404 <tfp_printf>
  for (int i = 0; i < dek->keylen; i++)
   12e98:	e5953004 	ldr	r3, [r5, #4]
   12e9c:	e1530004 	cmp	r3, r4
   12ea0:	cafffff6 	bgt	12e80 <passphrase_to_dek+0x138>
  }
  printf("\n");
   12ea4:	e59f00dc 	ldr	r0, [pc, #220]	; 12f88 <passphrase_to_dek+0x240>
   12ea8:	e1a04006 	mov	r4, r6
  printf("SALT: ");
  for (int i = 0; i < 8; i++)
  {
    printf("%02x", s2k->salt[i]);
   12eac:	e59f60d8 	ldr	r6, [pc, #216]	; 12f8c <passphrase_to_dek+0x244>
   12eb0:	e287700d 	add	r7, r7, #13
  printf("\n");
   12eb4:	e08f0000 	add	r0, pc, r0
    printf("%02x", s2k->salt[i]);
   12eb8:	e08f6006 	add	r6, pc, r6
  printf("\n");
   12ebc:	ebfff950 	bl	11404 <tfp_printf>
  printf("SALT: ");
   12ec0:	e59f00c8 	ldr	r0, [pc, #200]	; 12f90 <passphrase_to_dek+0x248>
   12ec4:	e08f0000 	add	r0, pc, r0
   12ec8:	ebfff94d 	bl	11404 <tfp_printf>
    printf("%02x", s2k->salt[i]);
   12ecc:	e4d41001 	ldrb	r1, [r4], #1
   12ed0:	e1a00006 	mov	r0, r6
   12ed4:	ebfff94a 	bl	11404 <tfp_printf>
  for (int i = 0; i < 8; i++)
   12ed8:	e1540007 	cmp	r4, r7
   12edc:	1afffffa 	bne	12ecc <passphrase_to_dek+0x184>
  }
  printf("\n");
   12ee0:	e59f00ac 	ldr	r0, [pc, #172]	; 12f94 <passphrase_to_dek+0x24c>
   12ee4:	e08f0000 	add	r0, pc, r0
   12ee8:	ebfff945 	bl	11404 <tfp_printf>
  // printf("S2K Cache ID: %s\n", dek->s2k_cacheid);
  return dek;
}
   12eec:	e1a00005 	mov	r0, r5
   12ef0:	e24bd01c 	sub	sp, fp, #28
   12ef4:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    derive_key(s2k->salt, passphrase, strlen(passphrase), iterations, dek->key);
   12ef8:	e59b0010 	ldr	r0, [fp, #16]
   12efc:	e2876005 	add	r6, r7, #5
   12f00:	ebfffec4 	bl	12a18 <strlen>
   12f04:	e2853009 	add	r3, r5, #9
   12f08:	e1a02000 	mov	r2, r0
   12f0c:	e58d3000 	str	r3, [sp]
   12f10:	e1a00006 	mov	r0, r6
   12f14:	e59b1010 	ldr	r1, [fp, #16]
   12f18:	e1a03004 	mov	r3, r4
   12f1c:	ebffff07 	bl	12b40 <derive_key>
   12f20:	eaffffbe 	b	12e20 <passphrase_to_dek+0xd8>
    printf("FIXING SALT VALUE\n");
   12f24:	e59f006c 	ldr	r0, [pc, #108]	; 12f98 <passphrase_to_dek+0x250>
   12f28:	e08f0000 	add	r0, pc, r0
   12f2c:	ebfff934 	bl	11404 <tfp_printf>
    if (s2k->mode == 3)
   12f30:	e5971000 	ldr	r1, [r7]
    s2k->salt[0] = 0x0a;
   12f34:	e3a0200a 	mov	r2, #10
   12f38:	e5c72005 	strb	r2, [r7, #5]
    s2k->salt[3] = 0x0d;
   12f3c:	e3003e0d 	movw	r3, #3597	; 0xe0d
   12f40:	e341300f 	movt	r3, #4111	; 0x100f
    if (s2k->mode == 3)
   12f44:	e3510003 	cmp	r1, #3
    s2k->salt[3] = 0x0d;
   12f48:	e5873008 	str	r3, [r7, #8]
    s2k->salt[1] = 0x0b;
   12f4c:	e3002c0b 	movw	r2, #3083	; 0xc0b
   12f50:	e1c720b6 	strh	r2, [r7, #6]
      s2k->count = 0xFF; // opt.s2k_count;
   12f54:	03a030ff 	moveq	r3, #255	; 0xff
   12f58:	05873010 	streq	r3, [r7, #16]
    s2k->salt[7] = 0x11;
   12f5c:	e3a02011 	mov	r2, #17
   12f60:	e5c7200c 	strb	r2, [r7, #12]
      s2k->count = 0xFF; // opt.s2k_count;
   12f64:	eaffff8c 	b	12d9c <passphrase_to_dek+0x54>
   12f68:	000052d0 	.word	0x000052d0
   12f6c:	0000527c 	.word	0x0000527c
   12f70:	00005248 	.word	0x00005248
   12f74:	0000524c 	.word	0x0000524c
   12f78:	0000524c 	.word	0x0000524c
   12f7c:	00005254 	.word	0x00005254
   12f80:	00005258 	.word	0x00005258
   12f84:	00003c18 	.word	0x00003c18
   12f88:	0000437c 	.word	0x0000437c
   12f8c:	00003bdc 	.word	0x00003bdc
   12f90:	000051fc 	.word	0x000051fc
   12f94:	0000434c 	.word	0x0000434c
   12f98:	00005120 	.word	0x00005120

00012f9c <do_proc_packets>:
  return 0;
}

static int
do_proc_packets(ctrl_t ctrl, CTX c, iobuf_t a)
{
   12f9c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fa0:	e1a05000 	mov	r5, r0
  printf("do_proc_packets %d\n", ctrl->enc_length);// %s\n", ctrl->passphrase);
   12fa4:	e59f05dc 	ldr	r0, [pc, #1500]	; 13588 <do_proc_packets+0x5ec>
{
   12fa8:	e24dd044 	sub	sp, sp, #68	; 0x44
   12fac:	e1a04001 	mov	r4, r1
   12fb0:	e1a0a002 	mov	sl, r2
  printf("do_proc_packets %d\n", ctrl->enc_length);// %s\n", ctrl->passphrase);
   12fb4:	e08f0000 	add	r0, pc, r0
   12fb8:	e5951020 	ldr	r1, [r5, #32]
   12fbc:	ebfff910 	bl	11404 <tfp_printf>

  // printf("do_proc_packets\n");// %s\n", ctrl->passphrase);
  // Copy across any main ctx passphrase or session_key
  if (ctrl->passphrase != NULL)
   12fc0:	e5950018 	ldr	r0, [r5, #24]
   12fc4:	e3500000 	cmp	r0, #0
   12fc8:	0a000009 	beq	12ff4 <do_proc_packets+0x58>
  {
    c->passphrase = malloc(strlen(ctrl->passphrase) + 1);
   12fcc:	ebfffe91 	bl	12a18 <strlen>
   12fd0:	e2800001 	add	r0, r0, #1
   12fd4:	ebffefa3 	bl	ee68 <malloc>
    my_strcpy(c->passphrase, ctrl->passphrase);
   12fd8:	e5951018 	ldr	r1, [r5, #24]
   12fdc:	e2402001 	sub	r2, r0, #1
    c->passphrase = malloc(strlen(ctrl->passphrase) + 1);
   12fe0:	e5840030 	str	r0, [r4, #48]	; 0x30

#define printf tfp_printf
#define sprintf tfp_sprintf

static inline void my_strcpy(char *dst, const char *src) {
   while ((*dst++ = *src++));
   12fe4:	e4d13001 	ldrb	r3, [r1], #1
   12fe8:	e5e23001 	strb	r3, [r2, #1]!
   12fec:	e3530000 	cmp	r3, #0
   12ff0:	1afffffb 	bne	12fe4 <do_proc_packets+0x48>
    // printf("Copied passphrase: %s\n", c->passphrase);
  }
  if (ctrl->session_key != NULL)
   12ff4:	e595001c 	ldr	r0, [r5, #28]
   12ff8:	e3500000 	cmp	r0, #0
   12ffc:	0a0000cd 	beq	13338 <do_proc_packets+0x39c>
  {
    c->session_key = malloc(strlen(ctrl->session_key) + 1);
   13000:	ebfffe84 	bl	12a18 <strlen>
   13004:	e2800001 	add	r0, r0, #1
   13008:	ebffef96 	bl	ee68 <malloc>
    my_strcpy(c->session_key, ctrl->session_key);
   1300c:	e595101c 	ldr	r1, [r5, #28]
   13010:	e2402001 	sub	r2, r0, #1
    c->session_key = malloc(strlen(ctrl->session_key) + 1);
   13014:	e5840034 	str	r0, [r4, #52]	; 0x34
   13018:	e4d13001 	ldrb	r3, [r1], #1
   1301c:	e5e23001 	strb	r3, [r2, #1]!
   13020:	e3530000 	cmp	r3, #0
   13024:	1afffffb 	bne	13018 <do_proc_packets+0x7c>
    // printf("Overriding passphrase DEK with session key\n");//, c->passphrase);
  }
  else printf("Will derive key from passphrase\n");
  c->enc_len = ctrl->enc_length;
   13028:	e5953020 	ldr	r3, [r5, #32]
   1302c:	e1a06004 	mov	r6, r4
   13030:	e584301c 	str	r3, [r4, #28]
  for (level = 0; c; c = c->anchor)
   13034:	e3a03000 	mov	r3, #0
   13038:	e5966004 	ldr	r6, [r6, #4]
    level++;
   1303c:	e2833001 	add	r3, r3, #1
  for (level = 0; c; c = c->anchor)
   13040:	e3560000 	cmp	r6, #0
   13044:	1afffffb 	bne	13038 <do_proc_packets+0x9c>
  if (level > MAX_NESTING_DEPTH)
   13048:	e3530020 	cmp	r3, #32
   1304c:	ca0000da 	bgt	133bc <do_proc_packets+0x420>

  pkt = xmalloc(sizeof *pkt);
  c->iobuf = a;
  init_packet(pkt);
  init_parse_packet(&parsectx, a);
  while ((rc = parse_packet(&parsectx, pkt)) != -1)
   13050:	e59f7534 	ldr	r7, [pc, #1332]	; 1358c <do_proc_packets+0x5f0>
  pkt = xmalloc(sizeof *pkt);
   13054:	e3a00008 	mov	r0, #8
    //           default: newpkt = 0; break;
    //     }
    // }
    if (c->encrypt_only)
    {
      printf("Encrypt only\n");
   13058:	e59f8530 	ldr	r8, [pc, #1328]	; 13590 <do_proc_packets+0x5f4>
  pkt = xmalloc(sizeof *pkt);
   1305c:	ebffefee 	bl	f01c <xmalloc>
  int early_plaintext = literals_seen;
   13060:	e59f352c 	ldr	r3, [pc, #1324]	; 13594 <do_proc_packets+0x5f8>
  pkt = xmalloc(sizeof *pkt);
   13064:	e1a05000 	mov	r5, r0
  printf("processing encrypted packet\n");
   13068:	e59f9528 	ldr	r9, [pc, #1320]	; 13598 <do_proc_packets+0x5fc>
  int early_plaintext = literals_seen;
   1306c:	e08f3003 	add	r3, pc, r3
  c->iobuf = a;
   13070:	e584a040 	str	sl, [r4, #64]	; 0x40
  while ((rc = parse_packet(&parsectx, pkt)) != -1)
   13074:	e08f7007 	add	r7, pc, r7
  init_packet(pkt);
   13078:	e5c06000 	strb	r6, [r0]
   1307c:	e5806004 	str	r6, [r0, #4]
  init_parse_packet(&parsectx, a);
   13080:	e58da028 	str	sl, [sp, #40]	; 0x28
  int any_data = 0;
   13084:	e1a0a006 	mov	sl, r6
  init_parse_packet(&parsectx, a);
   13088:	e5cd602c 	strb	r6, [sp, #44]	; 0x2c
   1308c:	e58d6030 	str	r6, [sp, #48]	; 0x30
   13090:	e58d6034 	str	r6, [sp, #52]	; 0x34
   13094:	e58d6038 	str	r6, [sp, #56]	; 0x38
   13098:	e58d603c 	str	r6, [sp, #60]	; 0x3c
  while ((rc = parse_packet(&parsectx, pkt)) != -1)
   1309c:	e28d6028 	add	r6, sp, #40	; 0x28
      printf("Encrypt only\n");
   130a0:	e08f8008 	add	r8, pc, r8
  printf("processing encrypted packet\n");
   130a4:	e08f9009 	add	r9, pc, r9
  int early_plaintext = literals_seen;
   130a8:	e58d3018 	str	r3, [sp, #24]
  while ((rc = parse_packet(&parsectx, pkt)) != -1)
   130ac:	ea00000a 	b	130dc <do_proc_packets+0x140>
     * packet and not to reuse the current one ...  It works right
     * when there is a compression packet between which adds just
     * an extra layer.
     * Hmmm: Rewrite this whole module here??
     */
    if (pkt->pkttype != PKT_SIGNATURE && pkt->pkttype != PKT_MDC)
   130b0:	e5d53000 	ldrb	r3, [r5]
   130b4:	e3530002 	cmp	r3, #2
   130b8:	13530013 	cmpne	r3, #19
   130bc:	0a000005 	beq	130d8 <do_proc_packets+0x13c>
      c->any.data = (pkt->pkttype == PKT_PLAINTEXT);
   130c0:	e5d4205c 	ldrb	r2, [r4, #92]	; 0x5c
   130c4:	e243300b 	sub	r3, r3, #11
   130c8:	e16f3f13 	clz	r3, r3
   130cc:	e1a032a3 	lsr	r3, r3, #5
   130d0:	e7c12093 	bfi	r2, r3, #1, #1
   130d4:	e5c4205c 	strb	r2, [r4, #92]	; 0x5c
  int any_data = 0;
   130d8:	e3a0a001 	mov	sl, #1
  while ((rc = parse_packet(&parsectx, pkt)) != -1)
   130dc:	e3003797 	movw	r3, #1943	; 0x797
   130e0:	e1a02007 	mov	r2, r7
   130e4:	e1a01005 	mov	r1, r5
   130e8:	e1a00006 	mov	r0, r6
   130ec:	ebfff65b 	bl	10a60 <dbg_parse_packet>
   130f0:	e3700001 	cmn	r0, #1
   130f4:	0a0000bb 	beq	133e8 <do_proc_packets+0x44c>
    if (rc)
   130f8:	e3500000 	cmp	r0, #0
   130fc:	1a0000c2 	bne	1340c <do_proc_packets+0x470>
    if (c->encrypt_only)
   13100:	e5943014 	ldr	r3, [r4, #20]
   13104:	e3530000 	cmp	r3, #0
   13108:	0affffe8 	beq	130b0 <do_proc_packets+0x114>
      printf("Encrypt only\n");
   1310c:	e1a00008 	mov	r0, r8
   13110:	ebfff8bb 	bl	11404 <tfp_printf>
      switch (pkt->pkttype)
   13114:	e5d52000 	ldrb	r2, [r5]
   13118:	e2423003 	sub	r3, r2, #3
   1311c:	e3530011 	cmp	r3, #17
   13120:	908ff103 	addls	pc, pc, r3, lsl #2
   13124:	ea000011 	b	13170 <do_proc_packets+0x1d4>
   13128:	ea000069 	b	132d4 <do_proc_packets+0x338>
   1312c:	ea00000f 	b	13170 <do_proc_packets+0x1d4>
   13130:	ea000059 	b	1329c <do_proc_packets+0x300>
   13134:	ea000058 	b	1329c <do_proc_packets+0x300>
   13138:	ea00000c 	b	13170 <do_proc_packets+0x1d4>
   1313c:	ea00000b 	b	13170 <do_proc_packets+0x1d4>
   13140:	ea000018 	b	131a8 <do_proc_packets+0x20c>
   13144:	ea000009 	b	13170 <do_proc_packets+0x1d4>
   13148:	ea000008 	b	13170 <do_proc_packets+0x1d4>
   1314c:	ea000007 	b	13170 <do_proc_packets+0x1d4>
   13150:	ea000051 	b	1329c <do_proc_packets+0x300>
   13154:	ea000005 	b	13170 <do_proc_packets+0x1d4>
   13158:	ea000004 	b	13170 <do_proc_packets+0x1d4>
   1315c:	ea000003 	b	13170 <do_proc_packets+0x1d4>
   13160:	ea000002 	b	13170 <do_proc_packets+0x1d4>
   13164:	ea00000f 	b	131a8 <do_proc_packets+0x20c>
   13168:	ea000000 	b	13170 <do_proc_packets+0x1d4>
   1316c:	ea00000d 	b	131a8 <do_proc_packets+0x20c>
    if (pkt->pkttype != PKT_SIGNATURE && pkt->pkttype != PKT_MDC)
   13170:	e3520002 	cmp	r2, #2
   13174:	13520013 	cmpne	r2, #19
   13178:	0a000005 	beq	13194 <do_proc_packets+0x1f8>
      c->any.data = (pkt->pkttype == PKT_PLAINTEXT);
   1317c:	e5d4305c 	ldrb	r3, [r4, #92]	; 0x5c
   13180:	e242200b 	sub	r2, r2, #11
   13184:	e16f2f12 	clz	r2, r2
   13188:	e1a022a2 	lsr	r2, r2, #5
   1318c:	e7c13092 	bfi	r3, r2, #1, #1
   13190:	e5c4305c 	strb	r3, [r4, #92]	; 0x5c
    {
      pkt = xmalloc(sizeof *pkt);
      init_packet(pkt);
    }
    else
      free_packet(pkt, &parsectx);
   13194:	e1a01006 	mov	r1, r6
   13198:	e1a00005 	mov	r0, r5
   1319c:	e3a0a001 	mov	sl, #1
   131a0:	ebffe50b 	bl	c5d4 <free_packet>
   131a4:	eaffffcc 	b	130dc <do_proc_packets+0x140>
  printf("processing encrypted packet\n");
   131a8:	e1a00009 	mov	r0, r9
   131ac:	ebfff894 	bl	11404 <tfp_printf>
  if (pkt->pkttype == PKT_ENCRYPTED_AEAD)
   131b0:	e5d53000 	ldrb	r3, [r5]
  int early_plaintext = literals_seen;
   131b4:	e59d2018 	ldr	r2, [sp, #24]
  if (pkt->pkttype == PKT_ENCRYPTED_AEAD)
   131b8:	e3530014 	cmp	r3, #20
  int early_plaintext = literals_seen;
   131bc:	e592b000 	ldr	fp, [r2]
    c->seen_pkt_encrypted_aead = 1;
   131c0:	03a03001 	moveq	r3, #1
   131c4:	05843054 	streq	r3, [r4, #84]	; 0x54
  if (pkt->pkttype == PKT_ENCRYPTED_AEAD)
   131c8:	0a000002 	beq	131d8 <do_proc_packets+0x23c>
  if (pkt->pkttype == PKT_ENCRYPTED_MDC)
   131cc:	e3530012 	cmp	r3, #18
    c->seen_pkt_encrypted_mdc = 1;
   131d0:	03a03001 	moveq	r3, #1
   131d4:	05843058 	streq	r3, [r4, #88]	; 0x58
  if (early_plaintext)
   131d8:	e35b0000 	cmp	fp, #0
   131dc:	1a00005d 	bne	13358 <do_proc_packets+0x3bc>
    if (c->symkeys > 1)
   131e0:	e5941048 	ldr	r1, [r4, #72]	; 0x48
   131e4:	e3510001 	cmp	r1, #1
   131e8:	8a000056 	bhi	13348 <do_proc_packets+0x3ac>
    else if (c->symkeys == 1)
   131ec:	0a0000e1 	beq	13578 <do_proc_packets+0x5dc>
printf("pkt->pkt.encrypted: %p\n", (void*)pkt->pkt.encrypted);
   131f0:	e59f03a4 	ldr	r0, [pc, #932]	; 1359c <do_proc_packets+0x600>
   131f4:	e5951004 	ldr	r1, [r5, #4]
   131f8:	e08f0000 	add	r0, pc, r0
   131fc:	ebfff880 	bl	11404 <tfp_printf>
    result = decrypt_data(c->ctrl, c, pkt->pkt.encrypted, c->dek,
   13200:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   13204:	e28d1024 	add	r1, sp, #36	; 0x24
   13208:	e5952004 	ldr	r2, [r5, #4]
   1320c:	e5940000 	ldr	r0, [r4]
   13210:	e58d1000 	str	r1, [sp]
   13214:	e1a01004 	mov	r1, r4
   13218:	ebffe3c5 	bl	c134 <decrypt_data>
   1321c:	e1a0a000 	mov	sl, r0
  printf("decrypt_data result: %d\n", result);
   13220:	e59f0378 	ldr	r0, [pc, #888]	; 135a0 <do_proc_packets+0x604>
   13224:	e1a0100a 	mov	r1, sl
   13228:	e08f0000 	add	r0, pc, r0
   1322c:	ebfff874 	bl	11404 <tfp_printf>
  if (!result && early_plaintext)
   13230:	e16f3f1a 	clz	r3, sl
   13234:	e35b0000 	cmp	fp, #0
   13238:	e1a032a3 	lsr	r3, r3, #5
   1323c:	03a03000 	moveq	r3, #0
   13240:	e3530000 	cmp	r3, #0
   13244:	0a00004f 	beq	13388 <do_proc_packets+0x3ec>
    printf(STATUS_DECRYPTION_FAILED);
   13248:	e3a00018 	mov	r0, #24
   1324c:	ebfff86c 	bl	11404 <tfp_printf>
    printf(("decryption failed: %s\n")); //, gpg_strerror (result));
   13250:	e59f034c 	ldr	r0, [pc, #844]	; 135a4 <do_proc_packets+0x608>
   13254:	e08f0000 	add	r0, pc, r0
   13258:	ebfff869 	bl	11404 <tfp_printf>
  xfree(c->dek);
   1325c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
  c->dek = NULL;
   13260:	e3a0a000 	mov	sl, #0
  xfree(c->dek);
   13264:	ebffef60 	bl	efec <xfree>
  c->dek = NULL;
   13268:	e584a02c 	str	sl, [r4, #44]	; 0x2c
  free_packet(pkt, NULL);
   1326c:	e1a0100a 	mov	r1, sl
   13270:	e1a00005 	mov	r0, r5
   13274:	ebffe4d6 	bl	c5d4 <free_packet>
  c->last_was_session_key = 0;
   13278:	e584a038 	str	sl, [r4, #56]	; 0x38
  printf(STATUS_END_DECRYPTION);
   1327c:	e3a0002a 	mov	r0, #42	; 0x2a
   13280:	ebfff85f 	bl	11404 <tfp_printf>
  literals_seen++;
   13284:	e59f231c 	ldr	r2, [pc, #796]	; 135a8 <do_proc_packets+0x60c>
   13288:	e08f2002 	add	r2, pc, r2
   1328c:	e5923000 	ldr	r3, [r2]
   13290:	e2833001 	add	r3, r3, #1
   13294:	e5823000 	str	r3, [r2]
}
   13298:	eaffff84 	b	130b0 <do_proc_packets+0x114>
      switch (pkt->pkttype)
   1329c:	e3a0b026 	mov	fp, #38	; 0x26
  else if (rc == -1)
    printf(STATUS_NODATA, "2");

leave:
  //  release_list (c);
  xfree(c->dek);
   132a0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   132a4:	ebffef50 	bl	efec <xfree>
  free_packet(pkt, &parsectx);
   132a8:	e1a01006 	mov	r1, r6
   132ac:	e1a00005 	mov	r0, r5
   132b0:	ebffe4c7 	bl	c5d4 <free_packet>
  deinit_parse_packet(&parsectx);
   132b4:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
   132b8:	e3530000 	cmp	r3, #0
   132bc:	1a00002d 	bne	13378 <do_proc_packets+0x3dc>
  xfree(pkt);
   132c0:	e1a00005 	mov	r0, r5
   132c4:	ebffef48 	bl	efec <xfree>
  // free_md_filter_context (&c->mfx);
  return rc;
}
   132c8:	e1a0000b 	mov	r0, fp
   132cc:	e28dd044 	add	sp, sp, #68	; 0x44
   132d0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  printf("proc_symkey_enc\n");
   132d4:	e59f02d0 	ldr	r0, [pc, #720]	; 135ac <do_proc_packets+0x610>
   132d8:	e08f0000 	add	r0, pc, r0
   132dc:	ebfff848 	bl	11404 <tfp_printf>
  enc = pkt->pkt.symkey_enc;
   132e0:	e595a004 	ldr	sl, [r5, #4]
  if (!enc)
   132e4:	e35a0000 	cmp	sl, #0
   132e8:	0a00004c 	beq	13420 <do_proc_packets+0x484>
  else if (!c->dek)
   132ec:	e594b02c 	ldr	fp, [r4, #44]	; 0x2c
   132f0:	e35b0000 	cmp	fp, #0
   132f4:	0a000061 	beq	13480 <do_proc_packets+0x4e4>
    symitem = xcalloc(1, sizeof *symitem);
   132f8:	e3a01010 	mov	r1, #16
   132fc:	e3a00001 	mov	r0, #1
   13300:	ebffef62 	bl	f090 <xcalloc>
      symitem->cipher_algo = enc->cipher_algo;
   13304:	e5da3001 	ldrb	r3, [sl, #1]
   13308:	e5803004 	str	r3, [r0, #4]
      symitem->cfb_mode = !enc->aead_algo;
   1330c:	e5da3002 	ldrb	r3, [sl, #2]
   13310:	e16f3f13 	clz	r3, r3
   13314:	e1a032a3 	lsr	r3, r3, #5
   13318:	e5803008 	str	r3, [r0, #8]
  c->symkeys++;
   1331c:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    symitem->next = c->symenc_list;
   13320:	e5942050 	ldr	r2, [r4, #80]	; 0x50
  c->symkeys++;
   13324:	e2833001 	add	r3, r3, #1
    symitem->next = c->symenc_list;
   13328:	e5802000 	str	r2, [r0]
    c->symenc_list = symitem;
   1332c:	e5840050 	str	r0, [r4, #80]	; 0x50
  c->symkeys++;
   13330:	e5843048 	str	r3, [r4, #72]	; 0x48
}
   13334:	eaffff5d 	b	130b0 <do_proc_packets+0x114>
  else printf("Will derive key from passphrase\n");
   13338:	e59f0270 	ldr	r0, [pc, #624]	; 135b0 <do_proc_packets+0x614>
   1333c:	e08f0000 	add	r0, pc, r0
   13340:	ebfff82f 	bl	11404 <tfp_printf>
   13344:	eaffff37 	b	13028 <do_proc_packets+0x8c>
      printf(("encrypted with %lu passphrases\n"), c->symkeys);
   13348:	e59f0264 	ldr	r0, [pc, #612]	; 135b4 <do_proc_packets+0x618>
   1334c:	e08f0000 	add	r0, pc, r0
   13350:	ebfff82b 	bl	11404 <tfp_printf>
   13354:	eaffffa5 	b	131f0 <do_proc_packets+0x254>
    printf(("WARNING: multiple plaintexts seen\n"));
   13358:	e59f0258 	ldr	r0, [pc, #600]	; 135b8 <do_proc_packets+0x61c>
   1335c:	e08f0000 	add	r0, pc, r0
   13360:	ebfff827 	bl	11404 <tfp_printf>
    printf("decryption.early_plaintext", GPG_ERR_BAD_DATA);
   13364:	e59f0250 	ldr	r0, [pc, #592]	; 135bc <do_proc_packets+0x620>
   13368:	e3a01059 	mov	r1, #89	; 0x59
   1336c:	e08f0000 	add	r0, pc, r0
   13370:	ebfff823 	bl	11404 <tfp_printf>
   13374:	eaffff99 	b	131e0 <do_proc_packets+0x244>
  deinit_parse_packet(&parsectx);
   13378:	e1a01006 	mov	r1, r6
   1337c:	e3a00000 	mov	r0, #0
   13380:	ebffe493 	bl	c5d4 <free_packet>
   13384:	eaffffcd 	b	132c0 <do_proc_packets+0x324>
  if (result == -1)
   13388:	e37a0001 	cmn	sl, #1
   1338c:	0affffb2 	beq	1325c <do_proc_packets+0x2c0>
  else if (!result || (gpg_err_code(result) == GPG_ERR_BAD_SIGNATURE && !pkt->pkt.encrypted->aead_algo && 1)) // opt.ignore_mdc_error))
   13390:	e35a0000 	cmp	sl, #0
   13394:	1a00002a 	bne	13444 <do_proc_packets+0x4a8>
    printf(STATUS_DECRYPTION_OKAY);
   13398:	e3a00019 	mov	r0, #25
   1339c:	ebfff818 	bl	11404 <tfp_printf>
    printf(("decryption okay\n"));
   133a0:	e59f0218 	ldr	r0, [pc, #536]	; 135c0 <do_proc_packets+0x624>
   133a4:	e08f0000 	add	r0, pc, r0
   133a8:	ebfff815 	bl	11404 <tfp_printf>
    printf(("WARNING: message was not integrity protected\n"));
   133ac:	e59f0210 	ldr	r0, [pc, #528]	; 135c4 <do_proc_packets+0x628>
   133b0:	e08f0000 	add	r0, pc, r0
   133b4:	ebfff812 	bl	11404 <tfp_printf>
   133b8:	eaffffa7 	b	1325c <do_proc_packets+0x2c0>
    printf("input data with too deeply nested packets\n");
   133bc:	e59f0204 	ldr	r0, [pc, #516]	; 135c8 <do_proc_packets+0x62c>
    return GPG_ERR_BAD_DATA;
   133c0:	e3a0b059 	mov	fp, #89	; 0x59
    printf("input data with too deeply nested packets\n");
   133c4:	e08f0000 	add	r0, pc, r0
   133c8:	ebfff80d 	bl	11404 <tfp_printf>
    printf(STATUS_UNEXPECTED, "1");
   133cc:	e59f11f8 	ldr	r1, [pc, #504]	; 135cc <do_proc_packets+0x630>
   133d0:	e3a0003c 	mov	r0, #60	; 0x3c
   133d4:	e08f1001 	add	r1, pc, r1
   133d8:	ebfff809 	bl	11404 <tfp_printf>
}
   133dc:	e1a0000b 	mov	r0, fp
   133e0:	e28dd044 	add	sp, sp, #68	; 0x44
   133e4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (any_data)
   133e8:	e35a0000 	cmp	sl, #0
   133ec:	e1a0b000 	mov	fp, r0
    rc = 0;
   133f0:	13a0b000 	movne	fp, #0
  if (any_data)
   133f4:	1affffa9 	bne	132a0 <do_proc_packets+0x304>
    printf(STATUS_NODATA, "2");
   133f8:	e59f11d0 	ldr	r1, [pc, #464]	; 135d0 <do_proc_packets+0x634>
   133fc:	e3a00011 	mov	r0, #17
   13400:	e08f1001 	add	r1, pc, r1
   13404:	ebfff7fe 	bl	11404 <tfp_printf>
   13408:	eaffffa4 	b	132a0 <do_proc_packets+0x304>
      free_packet(pkt, &parsectx);
   1340c:	e1a0b000 	mov	fp, r0
   13410:	e1a01006 	mov	r1, r6
   13414:	e1a00005 	mov	r0, r5
   13418:	ebffe46d 	bl	c5d4 <free_packet>
      goto leave;
   1341c:	eaffff9f 	b	132a0 <do_proc_packets+0x304>
    printf("invalid symkey encrypted packet\n");
   13420:	e59f01ac 	ldr	r0, [pc, #428]	; 135d4 <do_proc_packets+0x638>
   13424:	e08f0000 	add	r0, pc, r0
   13428:	ebfff7f5 	bl	11404 <tfp_printf>
    symitem = xcalloc(1, sizeof *symitem);
   1342c:	e3a01010 	mov	r1, #16
   13430:	e3a00001 	mov	r0, #1
   13434:	ebffef15 	bl	f090 <xcalloc>
      symitem->other_error = 1;
   13438:	e3a03001 	mov	r3, #1
   1343c:	e580300c 	str	r3, [r0, #12]
   13440:	eaffffb5 	b	1331c <do_proc_packets+0x380>
   13444:	e6ffa07a 	uxth	sl, sl
  else if (!result || (gpg_err_code(result) == GPG_ERR_BAD_SIGNATURE && !pkt->pkt.encrypted->aead_algo && 1)) // opt.ignore_mdc_error))
   13448:	e35a0008 	cmp	sl, #8
   1344c:	1a00003a 	bne	1353c <do_proc_packets+0x5a0>
   13450:	e5953004 	ldr	r3, [r5, #4]
   13454:	e5d3300b 	ldrb	r3, [r3, #11]
   13458:	e3530000 	cmp	r3, #0
   1345c:	0affffcd 	beq	13398 <do_proc_packets+0x3fc>
    printf(("WARNING: encrypted message has been manipulated!\n"));
   13460:	e59f0170 	ldr	r0, [pc, #368]	; 135d8 <do_proc_packets+0x63c>
   13464:	e08f0000 	add	r0, pc, r0
   13468:	ebfff7e5 	bl	11404 <tfp_printf>
    printf(STATUS_BADMDC);
   1346c:	e3a0001d 	mov	r0, #29
   13470:	ebfff7e3 	bl	11404 <tfp_printf>
    printf(STATUS_DECRYPTION_FAILED);
   13474:	e3a00018 	mov	r0, #24
   13478:	ebfff7e1 	bl	11404 <tfp_printf>
   1347c:	eaffff76 	b	1325c <do_proc_packets+0x2c0>
    printf("no DEK\n");
   13480:	e59f0154 	ldr	r0, [pc, #340]	; 135dc <do_proc_packets+0x640>
   13484:	e08f0000 	add	r0, pc, r0
   13488:	ebfff7dd 	bl	11404 <tfp_printf>
        printf(("%s %s encrypted data\n"), s, a);
   1348c:	e59f214c 	ldr	r2, [pc, #332]	; 135e0 <do_proc_packets+0x644>
   13490:	e59f114c 	ldr	r1, [pc, #332]	; 135e4 <do_proc_packets+0x648>
   13494:	e59f014c 	ldr	r0, [pc, #332]	; 135e8 <do_proc_packets+0x64c>
    int algo = enc->cipher_algo;
   13498:	e5da3001 	ldrb	r3, [sl, #1]
        printf(("%s %s encrypted data\n"), s, a);
   1349c:	e08f2002 	add	r2, pc, r2
   134a0:	e08f1001 	add	r1, pc, r1
   134a4:	e08f0000 	add	r0, pc, r0
    int algo = enc->cipher_algo;
   134a8:	e58d301c 	str	r3, [sp, #28]
        printf(("%s %s encrypted data\n"), s, a);
   134ac:	ebfff7d4 	bl	11404 <tfp_printf>
      printf("DOING DEK HERE passphrase:%s\n", c->passphrase);
   134b0:	e59f0134 	ldr	r0, [pc, #308]	; 135ec <do_proc_packets+0x650>
    c->last_was_session_key = 2;
   134b4:	e3a02002 	mov	r2, #2
   134b8:	e5842038 	str	r2, [r4, #56]	; 0x38
      printf("DOING DEK HERE passphrase:%s\n", c->passphrase);
   134bc:	e5941030 	ldr	r1, [r4, #48]	; 0x30
   134c0:	e08f0000 	add	r0, pc, r0
   134c4:	ebfff7ce 	bl	11404 <tfp_printf>
      printf("session_key: %s\n", c->session_key);
   134c8:	e59f0120 	ldr	r0, [pc, #288]	; 135f0 <do_proc_packets+0x654>
   134cc:	e5941034 	ldr	r1, [r4, #52]	; 0x34
   134d0:	e08f0000 	add	r0, pc, r0
   134d4:	ebfff7ca 	bl	11404 <tfp_printf>
      c->dek = passphrase_to_dek(algo,
   134d8:	e59d301c 	ldr	r3, [sp, #28]
   134dc:	e1a0200b 	mov	r2, fp
   134e0:	e58db008 	str	fp, [sp, #8]
   134e4:	e28a1004 	add	r1, sl, #4
   134e8:	e58db004 	str	fp, [sp, #4]
   134ec:	e1a00003 	mov	r0, r3
   134f0:	e58db000 	str	fp, [sp]
   134f4:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   134f8:	e58d3010 	str	r3, [sp, #16]
   134fc:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   13500:	e58d300c 	str	r3, [sp, #12]
   13504:	e3a03001 	mov	r3, #1
   13508:	ebfffe0e 	bl	12d48 <passphrase_to_dek>
   1350c:	e584002c 	str	r0, [r4, #44]	; 0x2c
      if (c->dek)
   13510:	e3500000 	cmp	r0, #0
   13514:	0affff77 	beq	132f8 <do_proc_packets+0x35c>
        c->dek->algo_info_printed = 1;
   13518:	e5da3002 	ldrb	r3, [sl, #2]
   1351c:	e5d02008 	ldrb	r2, [r0, #8]
   13520:	e1a03083 	lsl	r3, r3, #1
   13524:	e3c2205f 	bic	r2, r2, #95	; 0x5f
   13528:	e203301e 	and	r3, r3, #30
   1352c:	e3833041 	orr	r3, r3, #65	; 0x41
   13530:	e1833002 	orr	r3, r3, r2
   13534:	e5c03008 	strb	r3, [r0, #8]
   13538:	eaffff6e 	b	132f8 <do_proc_packets+0x35c>
  else if (gpg_err_code(result) == GPG_ERR_BAD_SIGNATURE || gpg_err_code(result) == GPG_ERR_TRUNCATED)
   1353c:	e35a004a 	cmp	sl, #74	; 0x4a
   13540:	0affffc6 	beq	13460 <do_proc_packets+0x4c4>
    if (gpg_err_code(result) == GPG_ERR_BAD_KEY || gpg_err_code(result) == GPG_ERR_CHECKSUM || gpg_err_code(result) == GPG_ERR_CIPHER_ALGO)
   13544:	e24a300a 	sub	r3, sl, #10
   13548:	e3c33002 	bic	r3, r3, #2
   1354c:	e3530000 	cmp	r3, #0
   13550:	135a0013 	cmpne	sl, #19
   13554:	1affff3b 	bne	13248 <do_proc_packets+0x2ac>
      if (c->symkeys)
   13558:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   1355c:	e3530000 	cmp	r3, #0
   13560:	0affff38 	beq	13248 <do_proc_packets+0x2ac>
        printf(STATUS_ERROR,
   13564:	e59f1088 	ldr	r1, [pc, #136]	; 135f4 <do_proc_packets+0x658>
   13568:	e3a00061 	mov	r0, #97	; 0x61
   1356c:	e08f1001 	add	r1, pc, r1
   13570:	ebfff7a3 	bl	11404 <tfp_printf>
   13574:	eaffff33 	b	13248 <do_proc_packets+0x2ac>
      printf(("encrypted with 1 passphrase\n"));
   13578:	e59f0078 	ldr	r0, [pc, #120]	; 135f8 <do_proc_packets+0x65c>
   1357c:	e08f0000 	add	r0, pc, r0
   13580:	ebfff79f 	bl	11404 <tfp_printf>
   13584:	eaffff19 	b	131f0 <do_proc_packets+0x254>
   13588:	00005114 	.word	0x00005114
   1358c:	000052f4 	.word	0x000052f4
   13590:	0000508c 	.word	0x0000508c
   13594:	000491c4 	.word	0x000491c4
   13598:	00005130 	.word	0x00005130
   1359c:	0000507c 	.word	0x0000507c
   135a0:	00005064 	.word	0x00005064
   135a4:	000050fc 	.word	0x000050fc
   135a8:	00048fa8 	.word	0x00048fa8
   135ac:	00004e64 	.word	0x00004e64
   135b0:	00004da0 	.word	0x00004da0
   135b4:	00004ee8 	.word	0x00004ee8
   135b8:	00004e98 	.word	0x00004e98
   135bc:	00004eac 	.word	0x00004eac
   135c0:	00004f04 	.word	0x00004f04
   135c4:	00004f0c 	.word	0x00004f0c
   135c8:	00004d3c 	.word	0x00004d3c
   135cc:	00003604 	.word	0x00003604
   135d0:	000035fc 	.word	0x000035fc
   135d4:	00004d2c 	.word	0x00004d2c
   135d8:	00004e88 	.word	0x00004e88
   135dc:	00004cf0 	.word	0x00004cf0
   135e0:	00004ce0 	.word	0x00004ce0
   135e4:	00004ce0 	.word	0x00004ce0
   135e8:	00004ce4 	.word	0x00004ce4
   135ec:	00004ce0 	.word	0x00004ce0
   135f0:	00004cf0 	.word	0x00004cf0
   135f4:	00004db4 	.word	0x00004db4
   135f8:	00004cd8 	.word	0x00004cd8

000135fc <proc_packets>:
{
   135fc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13600:	e1a05000 	mov	r5, r0
  printf("proc_packets\n");
   13604:	e59f0044 	ldr	r0, [pc, #68]	; 13650 <proc_packets+0x54>
{
   13608:	e1a06001 	mov	r6, r1
   1360c:	e1a07002 	mov	r7, r2
  printf("proc_packets\n");
   13610:	e08f0000 	add	r0, pc, r0
   13614:	ebfff77a 	bl	11404 <tfp_printf>
  CTX c = xmalloc_clear(sizeof *c);
   13618:	e3a00060 	mov	r0, #96	; 0x60
   1361c:	ebffee91 	bl	f068 <xmalloc_clear>
  c->ctrl = ctrl;
   13620:	e5805000 	str	r5, [r0]
  rc = do_proc_packets(ctrl, c, a);
   13624:	e1a01000 	mov	r1, r0
  c->anchor = anchor;
   13628:	e5806004 	str	r6, [r0, #4]
  CTX c = xmalloc_clear(sizeof *c);
   1362c:	e1a04000 	mov	r4, r0
  rc = do_proc_packets(ctrl, c, a);
   13630:	e1a02007 	mov	r2, r7
   13634:	e1a00005 	mov	r0, r5
   13638:	ebfffe57 	bl	12f9c <do_proc_packets>
   1363c:	e1a05000 	mov	r5, r0
  xfree(c);
   13640:	e1a00004 	mov	r0, r4
   13644:	ebffee68 	bl	efec <xfree>
}
   13648:	e1a00005 	mov	r0, r5
   1364c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13650:	00004d68 	.word	0x00004d68

00013654 <proc_encryption_packets>:
{
   13654:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13658:	e1a06000 	mov	r6, r0
  printf("proc_encryption_packets a->use: %d, a->filter: %d\n", a->use, a->filter);
   1365c:	e59f0054 	ldr	r0, [pc, #84]	; 136b8 <proc_encryption_packets+0x64>
{
   13660:	e1a05002 	mov	r5, r2
  printf("proc_encryption_packets a->use: %d, a->filter: %d\n", a->use, a->filter);
   13664:	e592202c 	ldr	r2, [r2, #44]	; 0x2c
{
   13668:	e1a07001 	mov	r7, r1
  printf("proc_encryption_packets a->use: %d, a->filter: %d\n", a->use, a->filter);
   1366c:	e08f0000 	add	r0, pc, r0
   13670:	e5d51000 	ldrb	r1, [r5]
   13674:	ebfff762 	bl	11404 <tfp_printf>
  CTX c = xmalloc_clear(sizeof *c);
   13678:	e3a00060 	mov	r0, #96	; 0x60
   1367c:	ebffee79 	bl	f068 <xmalloc_clear>
  c->ctrl = ctrl;
   13680:	e5806000 	str	r6, [r0]
  CTX c = xmalloc_clear(sizeof *c);
   13684:	e1a04000 	mov	r4, r0
  c->anchor = anchor;
   13688:	e5807004 	str	r7, [r0, #4]
  c->encrypt_only = 1;
   1368c:	e3a03001 	mov	r3, #1
   13690:	e5843014 	str	r3, [r4, #20]
  rc = do_proc_packets(ctrl, c, a);
   13694:	e1a02005 	mov	r2, r5
   13698:	e1a01004 	mov	r1, r4
   1369c:	e1a00006 	mov	r0, r6
   136a0:	ebfffe3d 	bl	12f9c <do_proc_packets>
   136a4:	e1a05000 	mov	r5, r0
  xfree(c);
   136a8:	e1a00004 	mov	r0, r4
   136ac:	ebffee4e 	bl	efec <xfree>
}
   136b0:	e1a00005 	mov	r0, r5
   136b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   136b8:	00004d1c 	.word	0x00004d1c

Disassembly of section .text.startup:

000136bc <main>:
    (void)p;
    uart_putc(c);
}

void main()
{
   136bc:	e92d4070 	push	{r4, r5, r6, lr}
    init_printf(0, putc_uart);
   136c0:	e3a00000 	mov	r0, #0
{
   136c4:	e59f5108 	ldr	r5, [pc, #264]	; 137d4 <main+0x118>
    init_printf(0, putc_uart);
   136c8:	e59f3108 	ldr	r3, [pc, #264]	; 137d8 <main+0x11c>
{
   136cc:	e08f5005 	add	r5, pc, r5
    init_printf(0, putc_uart);
   136d0:	e7951003 	ldr	r1, [r5, r3]
   136d4:	ebfff744 	bl	113ec <init_printf>
    // print_memory_map();
    // Properly allocate control structure with debug output
    ctrl_t ctrl = malloc(sizeof(struct server_control_s));
   136d8:	e3a00024 	mov	r0, #36	; 0x24
   136dc:	ebffede1 	bl	ee68 <malloc>
    if (!ctrl) {
   136e0:	e2506000 	subs	r6, r0, #0
   136e4:	0a00002e 	beq	137a4 <main+0xe8>
    // my_strcpy(ctrl->passphrase, test_passphrase);
    
    // Set up and verify session key
    // If we want to skip KDF comment out above block and leave this in
    const char *key = "427c028e28eeb15464c376d7dcca6ca2"; // Test 2. Good/Bad Derived Key???
    size_t key_len = strlen(key);
   136e8:	e59f40ec 	ldr	r4, [pc, #236]	; 137dc <main+0x120>
    memset(ctrl, 0, sizeof(struct server_control_s));
   136ec:	e3a02024 	mov	r2, #36	; 0x24
   136f0:	e3a01000 	mov	r1, #0
    size_t key_len = strlen(key);
   136f4:	e08f4004 	add	r4, pc, r4
    memset(ctrl, 0, sizeof(struct server_control_s));
   136f8:	ebffee3e 	bl	eff8 <memset>
    size_t key_len = strlen(key);
   136fc:	e1a00004 	mov	r0, r4
   13700:	ebfffcc4 	bl	12a18 <strlen>
    ctrl->session_key = malloc(key_len + 1);
   13704:	e2800001 	add	r0, r0, #1
   13708:	ebffedd6 	bl	ee68 <malloc>
   1370c:	e586001c 	str	r0, [r6, #28]
    if (!ctrl->session_key) {
   13710:	e3500000 	cmp	r0, #0
   13714:	11a03004 	movne	r3, r4
   13718:	10400003 	subne	r0, r0, r3
   1371c:	0a000028 	beq	137c4 <main+0x108>
   13720:	e0831000 	add	r1, r3, r0
   13724:	e4d32001 	ldrb	r2, [r3], #1
   13728:	e5c12000 	strb	r2, [r1]
   1372c:	e3520000 	cmp	r2, #0
   13730:	1afffffa 	bne	13720 <main+0x64>
    // ctrl->session_key = NULL; // Force KDF

    // Add some guard values
    uint32_t guard1 = 0xDEADBEEF;
    uint32_t guard2 = 0xBABECAFE;
    printf("Guard values before decrypt: 0x%08X 0x%08X\n", guard1, guard2);
   13734:	e59f00a4 	ldr	r0, [pc, #164]	; 137e0 <main+0x124>
   13738:	e30c2afe 	movw	r2, #51966	; 0xcafe
   1373c:	e34b2abe 	movt	r2, #47806	; 0xbabe
   13740:	e30b1eef 	movw	r1, #48879	; 0xbeef
   13744:	e08f0000 	add	r0, pc, r0
   13748:	e34d1ead 	movt	r1, #57005	; 0xdead
   1374c:	ebfff72c 	bl	11404 <tfp_printf>
    
    // Decrypt the data
    int rc = decrypt_memory(ctrl, __7379ab5047b143c0b6cfe5d8d79ad240b4b4f8cced55aa26f86d1d3d370c0d4c_gpg, __7379ab5047b143c0b6cfe5d8d79ad240b4b4f8cced55aa26f86d1d3d370c0d4c_gpg_len); // Test 2. BAD DECRYPT !!!!
   13750:	e59f208c 	ldr	r2, [pc, #140]	; 137e4 <main+0x128>
   13754:	e1a00006 	mov	r0, r6
   13758:	e59f3088 	ldr	r3, [pc, #136]	; 137e8 <main+0x12c>
   1375c:	e7952002 	ldr	r2, [r5, r2]
   13760:	e7951003 	ldr	r1, [r5, r3]
   13764:	e5922000 	ldr	r2, [r2]
   13768:	ebffe166 	bl	bd08 <decrypt_memory>
    if (rc) {
   1376c:	e2501000 	subs	r1, r0, #0
   13770:	1a00000f 	bne	137b4 <main+0xf8>
        printf("Decryption failed with code: %d\n", rc);
    }
    // Check guard values
    printf("Guard values after decrypt: 0x%08X 0x%08X\n", guard1, guard2);
   13774:	e59f0070 	ldr	r0, [pc, #112]	; 137ec <main+0x130>
   13778:	e30c2afe 	movw	r2, #51966	; 0xcafe
   1377c:	e34b2abe 	movt	r2, #47806	; 0xbabe
   13780:	e30b1eef 	movw	r1, #48879	; 0xbeef
   13784:	e08f0000 	add	r0, pc, r0
   13788:	e34d1ead 	movt	r1, #57005	; 0xdead
   1378c:	ebfff71c 	bl	11404 <tfp_printf>
    printf("CTRL-A + X\n");
   13790:	e59f0058 	ldr	r0, [pc, #88]	; 137f0 <main+0x134>
   13794:	e08f0000 	add	r0, pc, r0
   13798:	ebfff719 	bl	11404 <tfp_printf>
cleanup:
    while (1) {
        __asm__("wfi");
   1379c:	e320f003 	wfi
    while (1) {
   137a0:	eafffffd 	b	1379c <main+0xe0>
        printf("Failed to allocate control structure\n");
   137a4:	e59f0048 	ldr	r0, [pc, #72]	; 137f4 <main+0x138>
   137a8:	e08f0000 	add	r0, pc, r0
   137ac:	ebfff714 	bl	11404 <tfp_printf>
        goto cleanup;
   137b0:	eafffff9 	b	1379c <main+0xe0>
        printf("Decryption failed with code: %d\n", rc);
   137b4:	e59f003c 	ldr	r0, [pc, #60]	; 137f8 <main+0x13c>
   137b8:	e08f0000 	add	r0, pc, r0
   137bc:	ebfff710 	bl	11404 <tfp_printf>
   137c0:	eaffffeb 	b	13774 <main+0xb8>
        printf("Failed to allocate session_key\n");
   137c4:	e59f0030 	ldr	r0, [pc, #48]	; 137fc <main+0x140>
   137c8:	e08f0000 	add	r0, pc, r0
   137cc:	ebfff70c 	bl	11404 <tfp_printf>
        goto cleanup;
   137d0:	eafffff1 	b	1379c <main+0xe0>
   137d4:	000282f0 	.word	0x000282f0
   137d8:	00000050 	.word	0x00000050
   137dc:	000047f8 	.word	0x000047f8
   137e0:	00004814 	.word	0x00004814
   137e4:	00000010 	.word	0x00000010
   137e8:	00000058 	.word	0x00000058
   137ec:	00004824 	.word	0x00004824
   137f0:	00004840 	.word	0x00004840
   137f4:	00004768 	.word	0x00004768
   137f8:	000047cc 	.word	0x000047cc
   137fc:	00004770 	.word	0x00004770
